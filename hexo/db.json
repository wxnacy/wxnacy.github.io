{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.507b3a.css","path":"main.507b3a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.507b3a.js","path":"main.507b3a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.fdc4b7.js","path":"mobile.fdc4b7.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/._config.yml.swp","hash":"890e901e080e3c215c195111ce29238fccfedbf8","modified":1505523407000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1505472573000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1505472573000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1505472573000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1505472573000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1505472573000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1505472573000},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1505472573000},{"_id":"themes/yilia/_config.yml","hash":"ed0ed37d6a762a8216bb1fa3f89e28a005acabb1","modified":1505521016000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1505472573000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1505472573000},{"_id":"source/_posts/.mac-2017-08-23-develop-hotapps.md.swp","hash":"3c3bc3d0d8b61f4765e943070c62e589c1a445ab","modified":1505524087000},{"_id":"source/_posts/algorithm-2017-08-05-bank_verify.md","hash":"645276a3588f9e0201998aa7cfa3a9d91bbb51ae","modified":1505485018000},{"_id":"source/_posts/ansible-2017-08-08-item-basic_get_started.md","hash":"13bc46eb9b94c4bf81647cff2e7077ee1e29c042","modified":1505485371000},{"_id":"source/_posts/ansible-2017-08-08-item-basic_playbooks.md","hash":"d63d22f2ecfdde7d539945ac74cfb08c5723984e","modified":1505485675000},{"_id":"source/_posts/ansible-2017-08-14-album-study-notes.md","hash":"293f7d6a4cdaf17fb0ba57d84386f0ccdbff3e26","modified":1505485509000},{"_id":"source/_posts/git-2017-08-04-basic-cmd.md","hash":"68b851a9dd6def61d5808a137920d1bda4e26543","modified":1505487535000},{"_id":"source/_posts/develop-2017-09-08-regex-basic.md","hash":"4dff3c36e26401c8cccce2bdf7d9221eccaf2a96","modified":1505485630000},{"_id":"source/_posts/http-2017-08-16-basic.md","hash":"78cbdb6700fb1cd134cd28d38befe11a4464cd46","modified":1505487565000},{"_id":"source/_posts/js-2017-08-05-screen_wh.md","hash":"39972f3e5051d93e65a30a6fa7129bdeed4b7859","modified":1505487591000},{"_id":"source/_posts/life-2017-09-06-beijing.md","hash":"83645b25ead1d281457e7c395d3f54f36f6bcba5","modified":1505487611000},{"_id":"source/_posts/linux-2017-08-15-nohup.md","hash":"ec6e734fd94f326e623ea7ad2d96d250276aeebe","modified":1505487656000},{"_id":"source/_posts/life-2017-09-06-fixed-point-hospital.md","hash":"89518f1412442efc8fc5391cffa356dc7deea8c1","modified":1505487637000},{"_id":"source/_posts/linux-2017-08-16-curl.md","hash":"8066801179fec8d4fc3c24ef4e786ee8b062d8e3","modified":1505487674000},{"_id":"source/_posts/linux-2017-08-22-centos-start-stop-restart-sshd.md","hash":"973c44dfbaddd694917032275a6f16b0213cd4f4","modified":1505487694000},{"_id":"source/_posts/linux-2017-08-22-sftp-scp.md","hash":"2632b77d349de119645f98c100e07541fdd048a7","modified":1505487713000},{"_id":"source/_posts/linux-2017-08-28-ln.md","hash":"73354560c0f3569aa3eb95c73a2390ccfe17a620","modified":1505487775000},{"_id":"source/_posts/linux-2017-08-23-ssh.md","hash":"01e4efc10187142f7191443d80f8144fa7d75d6b","modified":1505487744000},{"_id":"source/_posts/linux-2017-09-11-grep.md","hash":"39f75416ff43aabbdcd940714041c03aaa996d97","modified":1505487793000},{"_id":"source/_posts/linux-2017-09-11-redirection.md","hash":"52048c07a7bfbf35210e92ba696dec780b22dc37","modified":1505487812000},{"_id":"source/_posts/linux-2017-09-15-expect.md","hash":"7827802f6210976054ab61b329f795d628412ceb","modified":1505485077000},{"_id":"source/_posts/mac-2017-08-23-develop-hotapps.md","hash":"de3bc48c925508a056203d55923c73d5e386fcf5","modified":1505524069000},{"_id":"source/_posts/mac-2017-08-10-clear-dns.md","hash":"ea9bdcb44b95b2477b68be9631411120e26705a6","modified":1505485074000},{"_id":"source/_posts/mac-2017-09-07-homebrew.md","hash":"a73128cc38ef7134237f73116f828b850e69e86e","modified":1505487852000},{"_id":"source/_posts/movie-2017-08-13-MCU.md","hash":"afa2427f41a694683ee8cbd220ebdfba158762b0","modified":1505487869000},{"_id":"source/_posts/mysql-2017-08-06-basic_cmd.md","hash":"83f6b30b0c4ee24298d95c2d5fa167dedbe8f9b8","modified":1505487883000},{"_id":"source/_posts/mysql-2017-08-07-item-daily.md","hash":"60a93d594dd9ba5b8c7cbaaf4008912160bf5d4d","modified":1505487917000},{"_id":"source/_posts/mysql-2017-08-06-item-daily.md","hash":"6a29e97a4fedfc79e0a08892106d37841ed6a583","modified":1505487906000},{"_id":"source/_posts/mysql-2017-08-08-item-daily.md","hash":"30056bd96eac7c14441c139943034e6e6a781bc6","modified":1505487924000},{"_id":"source/_posts/mysql-2017-08-09-basic_index.md","hash":"26a59678d1f25b5e8d1acbcc3e4a430606f7741c","modified":1505487930000},{"_id":"source/_posts/mysql-2017-08-09-item-daily.md","hash":"bb1d163c6c574aff1261bd4d6bdc9c44a5e04c87","modified":1505487942000},{"_id":"source/_posts/mysql-2017-08-09-prompt.md","hash":"91b4bbe88e0c6fe0eca29e3b854cc7997a6b036b","modified":1505487948000},{"_id":"source/_posts/mysql-2017-08-09-select-format.md","hash":"039f93362735e5886ff2ef5002031a0a3958dccc","modified":1505487955000},{"_id":"source/_posts/mysql-2017-08-09-skill.md","hash":"b8d38f6cc99ac6e94ce1a45c5521c0879b91a84b","modified":1505487963000},{"_id":"source/_posts/mysql-2017-08-10-item-daily.md","hash":"a29728bf0fbd2f8b102db847d8eaf90ae0df7ec6","modified":1505487973000},{"_id":"source/_posts/mysql-2017-08-11-item-daily.md","hash":"24ec604e895b52b05b765c5aeab254300b941be4","modified":1505487984000},{"_id":"source/_posts/mysql-2017-08-12-item-daily.md","hash":"9983faf662bbcb91aca4b717b3d081db7c5a1575","modified":1505487991000},{"_id":"source/_posts/mysql-2017-09-15-tmp-mysql-sock.md","hash":"a6a736aa509f2a4b792448feba167b864a32d4f3","modified":1505484583000},{"_id":"source/_posts/nodejs-2017-09-12-npm.md","hash":"523fc89363e0a7283e92a1f25639d4f96f8bbb10","modified":1505487997000},{"_id":"source/_posts/openresty-2017-08-16-album-study-notes.md","hash":"1c599d2dc5903ab938e12e0ed94e2f348bc4cd0c","modified":1505488011000},{"_id":"source/_posts/openresty-2017-08-16-install.md","hash":"910ec0e89d6cabf5411fe1fef51213aacceef62f","modified":1505488022000},{"_id":"source/_posts/python-2017-08-10-pyenv-cmd.md","hash":"d6d4ead0f1058f12095dadc211d75e1c0525d9fc","modified":1505488045000},{"_id":"source/_posts/python-2017-08-10-pyenv-linux.md","hash":"18f4fe091ed16d662dcba1f4fa2702c259491dec","modified":1505488087000},{"_id":"source/_posts/python-2017-08-11-os_file.md","hash":"6086d95d3be6f00de234d355941cbe41dad7301f","modified":1505488151000},{"_id":"source/_posts/python-2017-08-14-sqlalchemy-filter.md","hash":"fa9d3dd88e2308801f7a1aeccab80752836fe305","modified":1505488160000},{"_id":"source/_posts/python-2017-08-15-config-pythonpath.md","hash":"893ea6f0b4b06e233ab506ba72eb770162abaa46","modified":1505488213000},{"_id":"source/_posts/python-2017-08-15-flask-env-config.md","hash":"3448690ab11139ba42e604a6321713b2ed52f455","modified":1505518311000},{"_id":"source/_posts/python-2017-08-15-flask-hello-world.md","hash":"748bb10c71f5780241a96949f0247069d5cd493b","modified":1505518326000},{"_id":"source/_posts/python-2017-08-15-gunicorn-run.md","hash":"659ec46476439c566195e309db37bea99144bfd5","modified":1505518348000},{"_id":"source/_posts/python-2017-08-18-basic-supervisor.md","hash":"af81a5c05686c947dde95b1c7d2802d3b0281b54","modified":1505518358000},{"_id":"source/_posts/python-2017-08-18-pip_not_found.md","hash":"3aa0ec5e58468ae4ca2a2a8028d2466dd59b5a9d","modified":1505518372000},{"_id":"source/_posts/python-2017-08-19-pigar.md","hash":"3285deb3fc9ed112e62d1e05b7ac55da98af1542","modified":1505518385000},{"_id":"source/_posts/python-2017-08-22-get-image-size.md","hash":"504dfd5551abae2293715d3cda4b5710b8e294b8","modified":1505518394000},{"_id":"source/_posts/python-2017-08-23-scrapy-basic.md","hash":"efd7a03658e54f022a175d8616dd1b0cbca19515","modified":1505518410000},{"_id":"source/_posts/python-2017-09-05-wx-create-menu-err.md","hash":"918c9b8b241e3fd34714e383ef7da8ce40e27bf1","modified":1505518422000},{"_id":"source/_posts/python-2017-09-06-use-markdown.md","hash":"a62f0ab13c1993a313e891e21561923d1a618041","modified":1505518433000},{"_id":"source/_posts/python-2017-09-07-flask-api.md","hash":"f601a989f9268fedd9e99380e6243ad0c945a61e","modified":1505518440000},{"_id":"source/_posts/shell-2017-08-16-zsh-install.md","hash":"4b8242199320f4a3ed90674fa696671a5aa11d26","modified":1505518449000},{"_id":"source/_posts/shell-2017-09-02-basic.md","hash":"98207c7ffe48ce486037524a69d2f5154bc5fd1c","modified":1505518472000},{"_id":"source/_posts/vim-2017-08-23-basic-cmd.md","hash":"1a6a2fd69f291fc419e2fdc7674d2e160f569b78","modified":1505518483000},{"_id":"source/_posts/vim-2017-08-29-plug.md","hash":"9955e83a469d4c88745e40024a0083a76bff4d15","modified":1505518494000},{"_id":"source/category/index.md","hash":"ce71f512c833da1a622ba0702bdd0fc78ef81e79","modified":1505483246000},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"93bcf8aa78ac5c538d67e3ddb820239876ac021e","modified":1505472652000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1505472573000},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"d53be7839d02167197dd0413db038f26fa1380b3","modified":1505472652000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1505472573000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1505472567000},{"_id":"themes/yilia/.git/index","hash":"f5106df347946300cc6527a15d034ccd31123447","modified":1505472644000},{"_id":"themes/yilia/.git/packed-refs","hash":"bedf7f90d58d21e413c3898f5a97bf2aa606f6d1","modified":1505472573000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1505472573000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1505472573000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1505472573000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1505472573000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1505472573000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1505472573000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1505472573000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1505472573000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1505472573000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1505472573000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1505472573000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505472573000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505472573000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1505472573000},{"_id":"themes/yilia/source/main.507b3a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1505472573000},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1505472573000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1505472573000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505472573000},{"_id":"themes/yilia/source/main.507b3a.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1505472573000},{"_id":"themes/yilia/source/mobile.fdc4b7.js","hash":"6bfff9bfe4d7e067b6289e851a4c424ac815af5e","modified":1505472573000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1505472567000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1505472567000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1505472567000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1505472567000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1505472567000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1505472567000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1505472567000},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1505472567000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1505472567000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1505472567000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1505472567000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"081f60e23e998a00ae4e01c964bf4cad23b2f324","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"b011d92be321ebe09fa2b3179c08aa435b9d051c","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1505472573000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1505472573000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1505472573000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1505472573000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1505472573000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1505472573000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1505472573000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1505472573000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1505472573000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1505472573000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1505472573000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1505472573000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1505472573000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1505472573000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1505472573000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1505472573000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1505472573000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1505472573000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1505472573000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1505472573000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1505472573000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1505472573000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1505472573000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1505472573000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1505472573000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1505472573000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1505472573000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1505472573000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1505472573000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1505472573000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1505472573000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1505472573000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1505472573000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1505472573000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1505472573000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1505472573000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1505472573000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1505472573000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1505472573000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1505472573000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"7f9599ffd5c5551538e90b97023e7d6c599d1ee6","modified":1505472573000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1505472573000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1505472573000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1505472573000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1505472573000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1505472573000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1505472573000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1505472573000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"e8a35d4497fe1e0f119662ae08bd8404e5dab2a4","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"439f2afa6c3515a7edd67d512aae6eba5b1b0d0b","modified":1505472573000},{"_id":"themes/yilia/.git/objects/pack/pack-6feabf2504d5bc70f58e17bde6d19e2109ddb615.idx","hash":"ddd9d995aa032fc6525b7a4f28fbf41d5186a6cd","modified":1505472573000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"d53be7839d02167197dd0413db038f26fa1380b3","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"ec71ffc2023cebd933c96bd35a7a23d44a30a422","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1505472573000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1505472573000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1505472573000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1505472573000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1505472573000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1505472573000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1505472573000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1505472573000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1505472573000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1505472573000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1505472573000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1505472573000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1505472573000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1505472573000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"081f60e23e998a00ae4e01c964bf4cad23b2f324","modified":1505472573000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1505472573000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"081f60e23e998a00ae4e01c964bf4cad23b2f324","modified":1505472573000},{"_id":"themes/yilia/.git/objects/pack/pack-6feabf2504d5bc70f58e17bde6d19e2109ddb615.pack","hash":"8f5974b4335d46165db8acde921fe371fcdb4cf3","modified":1505472573000},{"_id":"public/content.json","hash":"0e2fcd7d05cb4ffbbfa61e7d5e3ca4e7f62c68c7","modified":1505605388940},{"_id":"public/category/index.html","hash":"db3347a7e401d247eddcbe8ce6c661c625537bff","modified":1505605389462},{"_id":"public/2017/09/15/mysql-2017-09-15-tmp-mysql-sock/index.html","hash":"d3179dee8e393e341e1cbdfcf357e0d56853c7af","modified":1505605389462},{"_id":"public/2017/09/15/linux-2017-09-15-expect/index.html","hash":"1762e288f7bc77243e8a776f93877f1854691a3e","modified":1505605389462},{"_id":"public/2017/09/12/nodejs-2017-09-12-npm/index.html","hash":"787c9e328df4de12965e75cc8faba21f5d511471","modified":1505605389462},{"_id":"public/2017/09/11/linux-2017-09-11-grep/index.html","hash":"0495c11ba6db4ab5303b54c069dc0fdf02e964b4","modified":1505605389462},{"_id":"public/2017/09/11/linux-2017-09-11-redirection/index.html","hash":"44fab2755c5c6ece90fecbf1723f112bb30951e0","modified":1505605389462},{"_id":"public/2017/09/08/develop-2017-09-08-regex-basic/index.html","hash":"0e6229d2327b09ea810d0dfd3db48301b0d1a38a","modified":1505605389463},{"_id":"public/2017/09/07/python-2017-09-07-flask-api/index.html","hash":"b357869ef1d8eec25b9934caeb9794660745e98c","modified":1505605389463},{"_id":"public/2017/09/07/mac-2017-09-07-homebrew/index.html","hash":"f401ce9127060ea3d54813788dcbc13c5d8c4315","modified":1505605389463},{"_id":"public/2017/09/06/python-2017-09-06-use-markdown/index.html","hash":"9fa0f486b2de60c6a4034883b8645acc611af7ef","modified":1505605389463},{"_id":"public/2017/09/06/life-2017-09-06-fixed-point-hospital/index.html","hash":"4bb4b221b10b7c11886733ab9b21e68c98a41b68","modified":1505605389463},{"_id":"public/2017/09/06/life-2017-09-06-beijing/index.html","hash":"b9e5d709f3b1b31c6ad98cc71f3752327292c555","modified":1505605389463},{"_id":"public/2017/09/05/python-2017-09-05-wx-create-menu-err/index.html","hash":"c3bd14510646058377864c09b8073e0b051eb3fd","modified":1505605389464},{"_id":"public/2017/09/02/shell-2017-09-02-basic/index.html","hash":"8a6029515a0f05a7295074d4f5686e599368abde","modified":1505605389464},{"_id":"public/2017/08/29/vim-2017-08-29-plug/index.html","hash":"b0ffbf7fa46778dca43d45bc72934bab628e6ced","modified":1505605389464},{"_id":"public/2017/08/28/linux-2017-08-28-ln/index.html","hash":"0d166aeb64b60e03e224f954ec278e7db0783991","modified":1505605389464},{"_id":"public/2017/08/23/linux-2017-08-23-ssh/index.html","hash":"f9d39bb2d4ba673a89c7d97b961e1512f693cbf7","modified":1505605389464},{"_id":"public/2017/08/23/mac-2017-08-23-develop-hotapps/index.html","hash":"9c9d78dfc130b5ac3d7034416054142b70e7ef88","modified":1505605389464},{"_id":"public/2017/08/23/python-2017-08-23-scrapy-basic/index.html","hash":"1e3c776b5100ee8a5cf9b455d37cac3027f5f637","modified":1505605389464},{"_id":"public/2017/08/23/vim-2017-08-23-basic-cmd/index.html","hash":"178ac0ec2073043cb9a4e81c42917aca31014afd","modified":1505605389465},{"_id":"public/2017/08/22/linux-2017-08-22-sftp-scp/index.html","hash":"9ab09bc6186aec9dc6f51a9f92830fd13d51bd26","modified":1505605389465},{"_id":"public/2017/08/22/linux-2017-08-22-centos-start-stop-restart-sshd/index.html","hash":"91d96606bfd8618ef430db815e3db8a76ddcab99","modified":1505605389465},{"_id":"public/2017/08/22/python-2017-08-22-get-image-size/index.html","hash":"77cc5c9673b98b7c969f4c13fa89a256e95cb693","modified":1505605389465},{"_id":"public/2017/08/19/python-2017-08-19-pigar/index.html","hash":"82bad92308798f7a584cef5b47c0c2f7bd37d0e8","modified":1505605389465},{"_id":"public/2017/08/18/python-2017-08-18-pip-not-found/index.html","hash":"8a6434a402b3fb5f9e612363f44d74d1614dcdbf","modified":1505605389465},{"_id":"public/2017/08/18/python-2017-08-18-basic-supervisor/index.html","hash":"202f90749ec537c7555e25d7cbda2f1f50a55dcf","modified":1505605389466},{"_id":"public/2017/08/16/linux-2017-08-16-curl/index.html","hash":"1d618e8c94b064114272252110336a20e87084cc","modified":1505605389466},{"_id":"public/2017/08/16/http-2017-08-16-basic/index.html","hash":"33ce7b330e9d084b7d476747bffb426aa5179ee2","modified":1505605389466},{"_id":"public/2017/08/16/openresty-2017-08-16-album-study-notes/index.html","hash":"37c5a8ee56da0e9fd21adc0e20ac96ecbed6919f","modified":1505605389466},{"_id":"public/2017/08/16/openresty-2017-08-16-install/index.html","hash":"86f0847dee14423df660bc76452681cd0a4fa220","modified":1505605389466},{"_id":"public/2017/08/16/shell-2017-08-16-zsh-install/index.html","hash":"bb737b9b3db0587757334d13551d42c37fa6a614","modified":1505605389466},{"_id":"public/2017/08/15/linux-2017-08-15-nohup/index.html","hash":"c4aceb189ac8b61d555b4ac8f7d17b1ec237034e","modified":1505605389466},{"_id":"public/2017/08/15/python-2017-08-15-config-pythonpath/index.html","hash":"0fcf8f65b0a88d60bc536761414a39dc8b4920c8","modified":1505605389466},{"_id":"public/2017/08/15/python-2017-08-15-gunicorn-run/index.html","hash":"aa704d598cafd8a8017266cd23e055f9855767b8","modified":1505605389466},{"_id":"public/2017/08/15/python-2017-08-15-flask-env-config/index.html","hash":"8eb426408669dcf7afa4e2fa957baadb0d755925","modified":1505605389467},{"_id":"public/2017/08/15/python-2017-08-15-flask-hello-world/index.html","hash":"b7190b5a1647d4a18c4e9bcc6e66c8216ae2c7bd","modified":1505605389467},{"_id":"public/2017/08/14/python-2017-08-14-sqlalchemy-filter/index.html","hash":"8ad7db0b3233ecacd4bdbc54541ea482c0fe49f4","modified":1505605389467},{"_id":"public/2017/08/14/ansible-2017-08-14-album-study-notes/index.html","hash":"ad476d25b2e3b3f25c51b8fc7908d4040f5027a6","modified":1505605389467},{"_id":"public/2017/08/13/movie-2017-08-13-MCU/index.html","hash":"ae01a0628d2ec180f71aef80114d402522765d58","modified":1505605389467},{"_id":"public/2017/08/12/mysql-2017-08-12-item-daily/index.html","hash":"a55294340dc5f220b3c86a2e456be3da0f972ea3","modified":1505605389467},{"_id":"public/2017/08/11/python-2017-08-11-os-file/index.html","hash":"92874de30443e8bead1e3ab0e28fc3edd4613e9b","modified":1505605389467},{"_id":"public/2017/08/11/mysql-2017-08-11-item-daily/index.html","hash":"71e457a1936387a7208561202af9a098c9fdbd9b","modified":1505605389467},{"_id":"public/2017/08/10/python-2017-08-10-pyenv-linux/index.html","hash":"e7a4490110c1081f369e78504e50f8bdf026a2b9","modified":1505605389467},{"_id":"public/2017/08/10/mysql-2017-08-10-item-daily/index.html","hash":"e6e5624674ee5cd3fdacc78f8b3a71b332747bc8","modified":1505605389468},{"_id":"public/2017/08/10/mac-2017-08-10-clear-dns/index.html","hash":"3ce98b9d31bff9763d2015c09b6efa8dc9d2ddfa","modified":1505605389468},{"_id":"public/2017/08/10/python-2017-08-10-pyenv-cmd/index.html","hash":"89034ec88d9cec0cc3a6bd171ec9353bc5e8713c","modified":1505605389468},{"_id":"public/2017/08/09/mysql-2017-08-09-select-format/index.html","hash":"5270859384ce64a126b41032b0c1b39c994612fc","modified":1505605389468},{"_id":"public/2017/08/09/mysql-2017-08-09-skill/index.html","hash":"9ed782f7cbc5a8e0581f65c5a3c1609423935774","modified":1505605389468},{"_id":"public/2017/08/09/mysql-2017-08-09-basic-index/index.html","hash":"461df9411d4d4d9c655fa8d8f05bdc8cccc9535b","modified":1505605389468},{"_id":"public/2017/08/09/mysql-2017-08-09-item-daily/index.html","hash":"4a3c19978b3cf5940940ccab40f0734a7ceac73a","modified":1505605389468},{"_id":"public/2017/08/09/mysql-2017-08-09-prompt/index.html","hash":"e20bf678703d6ea1610a4de90d9a88cf68e6302b","modified":1505605389468},{"_id":"public/2017/08/08/ansible-2017-08-08-item-basic-get-started/index.html","hash":"997c5ca181bb47e251f49a402edadb6f421c7d6a","modified":1505605389469},{"_id":"public/2017/08/08/mysql-2017-08-08-item-daily/index.html","hash":"65036e743803ce8f278987ea29420cf6404fb191","modified":1505605389469},{"_id":"public/2017/08/08/ansible-2017-08-08-item-basic-playbooks/index.html","hash":"2e4a1cee270db63bb6158e53b7f97e3fa2e4511a","modified":1505605389469},{"_id":"public/2017/08/07/mysql-2017-08-07-item-daily/index.html","hash":"ddc80d152c4540f09bf4c64f9b2cea785c39851f","modified":1505605389469},{"_id":"public/2017/08/06/mysql-2017-08-06-item-daily/index.html","hash":"f76c6c510da5ee37cdf6783fded2f4d4fe17c357","modified":1505605389469},{"_id":"public/2017/08/06/mysql-2017-08-06-basic-cmd/index.html","hash":"c8caaf66131f27e6fad315942da9533e3894c826","modified":1505605389469},{"_id":"public/2017/08/05/js-2017-08-05-screen-wh/index.html","hash":"f7df872975f4f852ac426d919dbf60ddac5b2aab","modified":1505605389469},{"_id":"public/2017/08/05/algorithm-2017-08-05-bank-verify/index.html","hash":"01cb2b96ff092f4a65d55db0ace53ec01016fe09","modified":1505605389469},{"_id":"public/2017/08/04/git-2017-08-04-basic-cmd/index.html","hash":"26d48faf18d948440364c050d66e4870700f7830","modified":1505605389470},{"_id":"public/archives/index.html","hash":"d04450b9a3ccf0849287294b4fa21039429af11a","modified":1505605389470},{"_id":"public/archives/page/2/index.html","hash":"bc739a6d1e8a4d98af709cb93eb4950f709db27b","modified":1505605389470},{"_id":"public/archives/page/3/index.html","hash":"6b37c60475b4dff73deaa5db2c06fc0d3807b01b","modified":1505605389470},{"_id":"public/archives/page/4/index.html","hash":"9f82594a1053a0f3af2e4b297e571ecf107057cc","modified":1505605389470},{"_id":"public/archives/page/5/index.html","hash":"13cbb3278dfe9e68c433f855fbb495dee202926e","modified":1505605389470},{"_id":"public/archives/page/6/index.html","hash":"7f6fb6269c3800244faa6df496d8b336183f1144","modified":1505605389470},{"_id":"public/archives/2017/index.html","hash":"9f5ced991345a6ac70d2674a524dbb8a0eea8cff","modified":1505605389470},{"_id":"public/archives/2017/page/2/index.html","hash":"3dc161c252d7c4b0bbaae4973fc8e9a77b737e11","modified":1505605389470},{"_id":"public/archives/2017/page/3/index.html","hash":"ff20fcb14059134856adc5d8c38573b2319f9003","modified":1505605389470},{"_id":"public/archives/2017/page/4/index.html","hash":"8efc0bbd99cd7695b421a02700e5fd15125c0fee","modified":1505605389470},{"_id":"public/archives/2017/page/5/index.html","hash":"800eb9ec9a54cc2afe18a22a430d06191c6bf8cf","modified":1505605389471},{"_id":"public/archives/2017/page/6/index.html","hash":"fa3ad754afd9b92bc4f5299646fe86db9a46afcf","modified":1505605389471},{"_id":"public/archives/2017/08/index.html","hash":"b9bfb6c7cc9107be52dda1ac4716911a7e4e6407","modified":1505605389471},{"_id":"public/archives/2017/08/page/2/index.html","hash":"33ead8095475e3949f72676475903cad7de623d7","modified":1505605389471},{"_id":"public/archives/2017/08/page/3/index.html","hash":"c9d85faf5bba5f764e98f74d510ecfeeb795c2b0","modified":1505605389471},{"_id":"public/archives/2017/08/page/4/index.html","hash":"d4a66674c20b32167f61418aeb44472619f1fdee","modified":1505605389471},{"_id":"public/archives/2017/08/page/5/index.html","hash":"50af454c51c3dbe997cdd8657fbab81371f4db47","modified":1505605389471},{"_id":"public/archives/2017/09/index.html","hash":"27e191cebc21fc7b54f5cdf457bddce1baf144a6","modified":1505605389471},{"_id":"public/archives/2017/09/page/2/index.html","hash":"70f5e77d2f17d69fec8e3bb7c6af46652d747499","modified":1505605389471},{"_id":"public/index.html","hash":"2534a41a30a67b473db9d5062cfd04742f8ad70e","modified":1505605389471},{"_id":"public/page/2/index.html","hash":"58e728811ce765bf5840b8f90028117f394a47ca","modified":1505605389471},{"_id":"public/page/3/index.html","hash":"678289d1ce7d78604061d9a6267a82178e5f4897","modified":1505605389471},{"_id":"public/page/4/index.html","hash":"31f7a2cc3528a06893040e539a1381bc25128830","modified":1505605389472},{"_id":"public/page/5/index.html","hash":"d12c46d7d12527bbdb1ce223941ed1909eeea186","modified":1505605389472},{"_id":"public/page/6/index.html","hash":"74c8eca8c63a139831fa9ed43caddb4184e3967b","modified":1505605389472},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1505605389476},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1505605389476},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1505605389476},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1505605389476},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1505605389476},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1505605389476},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1505605389476},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1505605389476},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1505605389476},{"_id":"public/main.507b3a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1505605389483},{"_id":"public/main.507b3a.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1505605389483},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1505605389483},{"_id":"public/mobile.fdc4b7.js","hash":"6bfff9bfe4d7e067b6289e851a4c424ac815af5e","modified":1505605389483}],"Category":[],"Data":[],"Page":[{"title":"category","date":"2017-09-15T13:47:26.000Z","_content":"","source":"category/index.md","raw":"---\ntitle: category\ndate: 2017-09-15 21:47:26\n---\n","updated":"2017-09-15T13:47:26.000Z","path":"category/index.html","comments":1,"layout":"page","_id":"cj7nyko8h0001kjxvowttpjut","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"银行卡校验规则(Luhn算法)","date":"2017-08-04T16:00:00.000Z","_content":"\n[原文:http://www.icloudyin.com/?p=61](http://www.icloudyin.com/?p=61)\n\n- 检验数字算法（Luhn Check Digit Algorithm），也叫做模数10公式，是一种简单的算法，用于验证银行卡、信用卡号码的有效性的算法。对所有大型信用卡公司发行的信用卡都起作用，这些公司包括美国Express、护照、万事达卡、Discover和用餐者俱乐部等。这种算法最初是在20世纪60年代由一组数学家制定，现在Luhn检验数字算法属于大众，任何人都可以使用它。\n- 将卡号上的每个数字乘上其权重（weight），如果卡号上的数字个数是偶数，那么第一个数字的权重就是2，若是奇数，那么权重就给1，剩下来的数字，根据第一个数字依序给定。例如某信用卡卡号的数字个数为偶数，那么从第一个数字开始的权重依序为 2、1、2、1、2、1 …。\n- 如果数字乘上自己的权重后比9还大，那么就从这加权数字里扣除9。\n- 接下来将所有处理过的加权数字全部加总起来，并且除以10，取其余数。\n\n## java\n```java\nint sum = 0;\n\tboolean even = true;\n\tfor ( int index = digits.size() - 1; index >= 0; index-- ) {\n\t\tint digit = digits.get( index );\n\n\t\tif ( even ) {\n\t\t\tdigit <<= 1;\n\t\t}\n\t\tif ( digit > 9 ) {\n\t\t\tdigit -= 9;\n\t\t}\n\t\tsum += digit;\n\t\teven = !even;\n\t}\n\treturn ( 10 - ( sum % 10 ) ) % 10;\n\n```\n## python\n```python\ndef check_bank_card(card_num):\n    \"\"\"检查银行卡的合法性\"\"\"\n    total = 0\n    even = True\n    if isinstance(card_num, int):\n        card_num = str(card_num)\n    check_num = card_num[-1]\n    for item in card_num[-2::-1]:\n        item = int(item)\n        if even:\n            item <<= 1\n        if item > 9:\n            item -= 9\n        total += item\n        even = not even\n    return int(check_num) is (10 - (total % 10)) % 10\n\n```\n\n","source":"_posts/algorithm-2017-08-05-bank_verify.md","raw":"---\ntitle: 银行卡校验规则(Luhn算法)\ndate: 2017-08-05\ntags:\n---\n\n[原文:http://www.icloudyin.com/?p=61](http://www.icloudyin.com/?p=61)\n\n- 检验数字算法（Luhn Check Digit Algorithm），也叫做模数10公式，是一种简单的算法，用于验证银行卡、信用卡号码的有效性的算法。对所有大型信用卡公司发行的信用卡都起作用，这些公司包括美国Express、护照、万事达卡、Discover和用餐者俱乐部等。这种算法最初是在20世纪60年代由一组数学家制定，现在Luhn检验数字算法属于大众，任何人都可以使用它。\n- 将卡号上的每个数字乘上其权重（weight），如果卡号上的数字个数是偶数，那么第一个数字的权重就是2，若是奇数，那么权重就给1，剩下来的数字，根据第一个数字依序给定。例如某信用卡卡号的数字个数为偶数，那么从第一个数字开始的权重依序为 2、1、2、1、2、1 …。\n- 如果数字乘上自己的权重后比9还大，那么就从这加权数字里扣除9。\n- 接下来将所有处理过的加权数字全部加总起来，并且除以10，取其余数。\n\n## java\n```java\nint sum = 0;\n\tboolean even = true;\n\tfor ( int index = digits.size() - 1; index >= 0; index-- ) {\n\t\tint digit = digits.get( index );\n\n\t\tif ( even ) {\n\t\t\tdigit <<= 1;\n\t\t}\n\t\tif ( digit > 9 ) {\n\t\t\tdigit -= 9;\n\t\t}\n\t\tsum += digit;\n\t\teven = !even;\n\t}\n\treturn ( 10 - ( sum % 10 ) ) % 10;\n\n```\n## python\n```python\ndef check_bank_card(card_num):\n    \"\"\"检查银行卡的合法性\"\"\"\n    total = 0\n    even = True\n    if isinstance(card_num, int):\n        card_num = str(card_num)\n    check_num = card_num[-1]\n    for item in card_num[-2::-1]:\n        item = int(item)\n        if even:\n            item <<= 1\n        if item > 9:\n            item -= 9\n        total += item\n        even = not even\n    return int(check_num) is (10 - (total % 10)) % 10\n\n```\n\n","slug":"algorithm-2017-08-05-bank-verify","published":1,"updated":"2017-09-15T14:16:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko870000kjxv75tp3pz7","content":"<p><a href=\"http://www.icloudyin.com/?p=61\" target=\"_blank\" rel=\"external\">原文:http://www.icloudyin.com/?p=61</a></p>\n<ul>\n<li>检验数字算法（Luhn Check Digit Algorithm），也叫做模数10公式，是一种简单的算法，用于验证银行卡、信用卡号码的有效性的算法。对所有大型信用卡公司发行的信用卡都起作用，这些公司包括美国Express、护照、万事达卡、Discover和用餐者俱乐部等。这种算法最初是在20世纪60年代由一组数学家制定，现在Luhn检验数字算法属于大众，任何人都可以使用它。</li>\n<li>将卡号上的每个数字乘上其权重（weight），如果卡号上的数字个数是偶数，那么第一个数字的权重就是2，若是奇数，那么权重就给1，剩下来的数字，根据第一个数字依序给定。例如某信用卡卡号的数字个数为偶数，那么从第一个数字开始的权重依序为 2、1、2、1、2、1 …。</li>\n<li>如果数字乘上自己的权重后比9还大，那么就从这加权数字里扣除9。</li>\n<li>接下来将所有处理过的加权数字全部加总起来，并且除以10，取其余数。</li>\n</ul>\n<h2><span id=\"java\">java</span><a href=\"#java\" class=\"header-anchor\"></a></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">boolean</span> even = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> index = digits.size() - <span class=\"number\">1</span>; index &gt;= <span class=\"number\">0</span>; index-- ) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> digit = digits.get( index );</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ( even ) &#123;</div><div class=\"line\">\t\t\tdigit &lt;&lt;= <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ( digit &gt; <span class=\"number\">9</span> ) &#123;</div><div class=\"line\">\t\t\tdigit -= <span class=\"number\">9</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tsum += digit;</div><div class=\"line\">\t\teven = !even;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> ( <span class=\"number\">10</span> - ( sum % <span class=\"number\">10</span> ) ) % <span class=\"number\">10</span>;</div></pre></td></tr></table></figure>\n<h2><span id=\"python\">python</span><a href=\"#python\" class=\"header-anchor\"></a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_bank_card</span><span class=\"params\">(card_num)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"检查银行卡的合法性\"\"\"</span></div><div class=\"line\">    total = <span class=\"number\">0</span></div><div class=\"line\">    even = <span class=\"keyword\">True</span></div><div class=\"line\">    <span class=\"keyword\">if</span> isinstance(card_num, int):</div><div class=\"line\">        card_num = str(card_num)</div><div class=\"line\">    check_num = card_num[<span class=\"number\">-1</span>]</div><div class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> card_num[<span class=\"number\">-2</span>::<span class=\"number\">-1</span>]:</div><div class=\"line\">        item = int(item)</div><div class=\"line\">        <span class=\"keyword\">if</span> even:</div><div class=\"line\">            item &lt;&lt;= <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> item &gt; <span class=\"number\">9</span>:</div><div class=\"line\">            item -= <span class=\"number\">9</span></div><div class=\"line\">        total += item</div><div class=\"line\">        even = <span class=\"keyword\">not</span> even</div><div class=\"line\">    <span class=\"keyword\">return</span> int(check_num) <span class=\"keyword\">is</span> (<span class=\"number\">10</span> - (total % <span class=\"number\">10</span>)) % <span class=\"number\">10</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.icloudyin.com/?p=61\" target=\"_blank\" rel=\"external\">原文:http://www.icloudyin.com/?p=61</a></p>\n<ul>\n<li>检验数字算法（Luhn Check Digit Algorithm），也叫做模数10公式，是一种简单的算法，用于验证银行卡、信用卡号码的有效性的算法。对所有大型信用卡公司发行的信用卡都起作用，这些公司包括美国Express、护照、万事达卡、Discover和用餐者俱乐部等。这种算法最初是在20世纪60年代由一组数学家制定，现在Luhn检验数字算法属于大众，任何人都可以使用它。</li>\n<li>将卡号上的每个数字乘上其权重（weight），如果卡号上的数字个数是偶数，那么第一个数字的权重就是2，若是奇数，那么权重就给1，剩下来的数字，根据第一个数字依序给定。例如某信用卡卡号的数字个数为偶数，那么从第一个数字开始的权重依序为 2、1、2、1、2、1 …。</li>\n<li>如果数字乘上自己的权重后比9还大，那么就从这加权数字里扣除9。</li>\n<li>接下来将所有处理过的加权数字全部加总起来，并且除以10，取其余数。</li>\n</ul>\n<h2 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">boolean</span> even = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> index = digits.size() - <span class=\"number\">1</span>; index &gt;= <span class=\"number\">0</span>; index-- ) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> digit = digits.get( index );</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ( even ) &#123;</div><div class=\"line\">\t\t\tdigit &lt;&lt;= <span class=\"number\">1</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ( digit &gt; <span class=\"number\">9</span> ) &#123;</div><div class=\"line\">\t\t\tdigit -= <span class=\"number\">9</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tsum += digit;</div><div class=\"line\">\t\teven = !even;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> ( <span class=\"number\">10</span> - ( sum % <span class=\"number\">10</span> ) ) % <span class=\"number\">10</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_bank_card</span><span class=\"params\">(card_num)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"检查银行卡的合法性\"\"\"</span></div><div class=\"line\">    total = <span class=\"number\">0</span></div><div class=\"line\">    even = <span class=\"keyword\">True</span></div><div class=\"line\">    <span class=\"keyword\">if</span> isinstance(card_num, int):</div><div class=\"line\">        card_num = str(card_num)</div><div class=\"line\">    check_num = card_num[<span class=\"number\">-1</span>]</div><div class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> card_num[<span class=\"number\">-2</span>::<span class=\"number\">-1</span>]:</div><div class=\"line\">        item = int(item)</div><div class=\"line\">        <span class=\"keyword\">if</span> even:</div><div class=\"line\">            item &lt;&lt;= <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> item &gt; <span class=\"number\">9</span>:</div><div class=\"line\">            item -= <span class=\"number\">9</span></div><div class=\"line\">        total += item</div><div class=\"line\">        even = <span class=\"keyword\">not</span> even</div><div class=\"line\">    <span class=\"keyword\">return</span> int(check_num) <span class=\"keyword\">is</span> (<span class=\"number\">10</span> - (total % <span class=\"number\">10</span>)) % <span class=\"number\">10</span></div></pre></td></tr></table></figure>\n"},{"title":"ansible入门笔记1 Get Started","date":"2017-08-07T16:00:00.000Z","_content":"\n专辑：[ansible学习笔记](/ansible/2017/08/14/album-study-notes)\n\n> Ansilbe是一个部署一群远程主机的工具。远程的主机可以是远程虚拟机或物理机， 也可以是本地主机。Ansilbe是一个部署一群远程主机的工具。远程的主机可以是远程虚拟机或物理机， 也可以是本地主机。\n\n\n## 安装ansible\n- 命令 \n```bash\npip install ansible\n```\n- 配置hosts \n\n修改/etc/ansible/hosts 全局hosts文件，没有的话自己创建\n```bash\n[wxnacy] # 如果服务器使用密码登录就用这个方式保存密码，避免每次输入\nwxnacy.server.org ansible_ssh_pass=your_pass ansible_ssh_user=your_name \n\n[prod] # 如果服务器使用sshkey登陆（推荐使用）\nprod.server.org ansible_ssh_user=your_name ansible_ssh_private_key_file=key_path \n```\n## 第一条命令\n\n- 首先执行ping，查看是否可以连接服务器\n\n```bash\n$ ansible all -m ping\n\n\nwxnacy.server.org | SUCCESS => {\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\nprod.server.org | SUCCESS => {\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\n```\n得到如上样式结果即为正确,另外执行 ```ansible wxnacy -m ping``` 可以针对某一个服务器组进行操作\n\n- 现在我们用另一个命令看下是不是真的可以拿到远程服务器的信息\n\n```bash\n$ ansible prod -m shell -a \"uname -a\"\n\nprod.server.org | SUCCESS | rc=0 >>\nLinux ip-172-31-5-249 4.9.27-14.31.amzn1.x86_64 #1 SMP Wed May 10 01:58:40 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\n```\n## 指定hosts文件\n在一些项目中，全局hosts配置不能满足需求，需要指定hosts命令，可以执行如下命令\n```bash\nansible my -i hosts_path -m ping\n```\n\n\n","source":"_posts/ansible-2017-08-08-item-basic_get_started.md","raw":"---\ntitle: ansible入门笔记1 Get Started\ndate: 2017-08-08\ntags:\n---\n\n专辑：[ansible学习笔记](/ansible/2017/08/14/album-study-notes)\n\n> Ansilbe是一个部署一群远程主机的工具。远程的主机可以是远程虚拟机或物理机， 也可以是本地主机。Ansilbe是一个部署一群远程主机的工具。远程的主机可以是远程虚拟机或物理机， 也可以是本地主机。\n\n\n## 安装ansible\n- 命令 \n```bash\npip install ansible\n```\n- 配置hosts \n\n修改/etc/ansible/hosts 全局hosts文件，没有的话自己创建\n```bash\n[wxnacy] # 如果服务器使用密码登录就用这个方式保存密码，避免每次输入\nwxnacy.server.org ansible_ssh_pass=your_pass ansible_ssh_user=your_name \n\n[prod] # 如果服务器使用sshkey登陆（推荐使用）\nprod.server.org ansible_ssh_user=your_name ansible_ssh_private_key_file=key_path \n```\n## 第一条命令\n\n- 首先执行ping，查看是否可以连接服务器\n\n```bash\n$ ansible all -m ping\n\n\nwxnacy.server.org | SUCCESS => {\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\nprod.server.org | SUCCESS => {\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\n```\n得到如上样式结果即为正确,另外执行 ```ansible wxnacy -m ping``` 可以针对某一个服务器组进行操作\n\n- 现在我们用另一个命令看下是不是真的可以拿到远程服务器的信息\n\n```bash\n$ ansible prod -m shell -a \"uname -a\"\n\nprod.server.org | SUCCESS | rc=0 >>\nLinux ip-172-31-5-249 4.9.27-14.31.amzn1.x86_64 #1 SMP Wed May 10 01:58:40 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\n```\n## 指定hosts文件\n在一些项目中，全局hosts配置不能满足需求，需要指定hosts命令，可以执行如下命令\n```bash\nansible my -i hosts_path -m ping\n```\n\n\n","slug":"ansible-2017-08-08-item-basic-get-started","published":1,"updated":"2017-09-15T14:22:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8i0002kjxveg2ey8a9","content":"<p>专辑：<a href=\"/ansible/2017/08/14/album-study-notes\">ansible学习笔记</a></p>\n<blockquote>\n<p>Ansilbe是一个部署一群远程主机的工具。远程的主机可以是远程虚拟机或物理机， 也可以是本地主机。Ansilbe是一个部署一群远程主机的工具。远程的主机可以是远程虚拟机或物理机， 也可以是本地主机。</p>\n</blockquote>\n<h2><span id=\"an-zhuang-ansible\">安装ansible</span><a href=\"#an-zhuang-ansible\" class=\"header-anchor\"></a></h2><ul>\n<li><p>命令 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install ansible</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置hosts </p>\n</li>\n</ul>\n<p>修改/etc/ansible/hosts 全局hosts文件，没有的话自己创建<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[wxnacy] <span class=\"comment\"># 如果服务器使用密码登录就用这个方式保存密码，避免每次输入</span></div><div class=\"line\">wxnacy.server.org ansible_ssh_pass=your_pass ansible_ssh_user=your_name </div><div class=\"line\"></div><div class=\"line\">[prod] <span class=\"comment\"># 如果服务器使用sshkey登陆（推荐使用）</span></div><div class=\"line\">prod.server.org ansible_ssh_user=your_name ansible_ssh_private_key_file=key_path</div></pre></td></tr></table></figure></p>\n<h2><span id=\"di-yi-tiao-ming-ling\">第一条命令</span><a href=\"#di-yi-tiao-ming-ling\" class=\"header-anchor\"></a></h2><ul>\n<li>首先执行ping，查看是否可以连接服务器</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ansible all -m ping</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">wxnacy.server.org | SUCCESS =&gt; &#123;</div><div class=\"line\">    <span class=\"string\">\"changed\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"string\">\"ping\"</span>: <span class=\"string\">\"pong\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">prod.server.org | SUCCESS =&gt; &#123;</div><div class=\"line\">    <span class=\"string\">\"changed\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"string\">\"ping\"</span>: <span class=\"string\">\"pong\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>得到如上样式结果即为正确,另外执行 <figure class=\"highlight plain\"><figcaption><span>wxnacy -m ping``` 可以针对某一个服务器组进行操作</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- 现在我们用另一个命令看下是不是真的可以拿到远程服务器的信息</div><div class=\"line\"></div><div class=\"line\">```bash</div><div class=\"line\">$ ansible prod -m shell -a &quot;uname -a&quot;</div><div class=\"line\"></div><div class=\"line\">prod.server.org | SUCCESS | rc=0 &gt;&gt;</div><div class=\"line\">Linux ip-172-31-5-249 4.9.27-14.31.amzn1.x86_64 #1 SMP Wed May 10 01:58:40 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</div></pre></td></tr></table></figure></p>\n<h2><span id=\"zhi-ding-hosts-wen-jian\">指定hosts文件</span><a href=\"#zhi-ding-hosts-wen-jian\" class=\"header-anchor\"></a></h2><p>在一些项目中，全局hosts配置不能满足需求，需要指定hosts命令，可以执行如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ansible my -i hosts_path -m ping</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>专辑：<a href=\"/ansible/2017/08/14/album-study-notes\">ansible学习笔记</a></p>\n<blockquote>\n<p>Ansilbe是一个部署一群远程主机的工具。远程的主机可以是远程虚拟机或物理机， 也可以是本地主机。Ansilbe是一个部署一群远程主机的工具。远程的主机可以是远程虚拟机或物理机， 也可以是本地主机。</p>\n</blockquote>\n<h2 id=\"安装ansible\"><a href=\"#安装ansible\" class=\"headerlink\" title=\"安装ansible\"></a>安装ansible</h2><ul>\n<li><p>命令 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install ansible</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置hosts </p>\n</li>\n</ul>\n<p>修改/etc/ansible/hosts 全局hosts文件，没有的话自己创建<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[wxnacy] <span class=\"comment\"># 如果服务器使用密码登录就用这个方式保存密码，避免每次输入</span></div><div class=\"line\">wxnacy.server.org ansible_ssh_pass=your_pass ansible_ssh_user=your_name </div><div class=\"line\"></div><div class=\"line\">[prod] <span class=\"comment\"># 如果服务器使用sshkey登陆（推荐使用）</span></div><div class=\"line\">prod.server.org ansible_ssh_user=your_name ansible_ssh_private_key_file=key_path</div></pre></td></tr></table></figure></p>\n<h2 id=\"第一条命令\"><a href=\"#第一条命令\" class=\"headerlink\" title=\"第一条命令\"></a>第一条命令</h2><ul>\n<li>首先执行ping，查看是否可以连接服务器</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ansible all -m ping</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">wxnacy.server.org | SUCCESS =&gt; &#123;</div><div class=\"line\">    <span class=\"string\">\"changed\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"string\">\"ping\"</span>: <span class=\"string\">\"pong\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">prod.server.org | SUCCESS =&gt; &#123;</div><div class=\"line\">    <span class=\"string\">\"changed\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"string\">\"ping\"</span>: <span class=\"string\">\"pong\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>得到如上样式结果即为正确,另外执行 <figure class=\"highlight plain\"><figcaption><span>wxnacy -m ping``` 可以针对某一个服务器组进行操作</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- 现在我们用另一个命令看下是不是真的可以拿到远程服务器的信息</div><div class=\"line\"></div><div class=\"line\">```bash</div><div class=\"line\">$ ansible prod -m shell -a &quot;uname -a&quot;</div><div class=\"line\"></div><div class=\"line\">prod.server.org | SUCCESS | rc=0 &gt;&gt;</div><div class=\"line\">Linux ip-172-31-5-249 4.9.27-14.31.amzn1.x86_64 #1 SMP Wed May 10 01:58:40 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</div></pre></td></tr></table></figure></p>\n<h2 id=\"指定hosts文件\"><a href=\"#指定hosts文件\" class=\"headerlink\" title=\"指定hosts文件\"></a>指定hosts文件</h2><p>在一些项目中，全局hosts配置不能满足需求，需要指定hosts命令，可以执行如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ansible my -i hosts_path -m ping</div></pre></td></tr></table></figure></p>\n"},{"title":"ansible入门笔记2 Playbooks","date":"2017-08-07T16:00:00.000Z","_content":"\n\n专辑：[ansible学习笔记](/ansible/2017/08/14/album-study-notes)\n\n> Playbooks 是 Ansible的配置,部署,编排语言.他们可以被描述为一个需要希望远程主机执行命令的方案,或者一组IT程序运行的命令集合.\n\n一个playbook就是一个YAML文件，所以playbook文件一般都以.yml结尾，一个playbook文件由一个或多个play组成，每个play定义了在一个或多个远程主机上执行的一系列的task，其中每个task一般就是调用一个ansible的模块，如调用copy模块复制文件到远程主机或调用shell模块执行命令。\n\n## 简单的配置\n配置deploy.yml完成进入远程服务器的某个目录并执行git pull操作\n```bash\n- hosts: wxnacy # 它会默认使用/etc/ansible/hosts 中配置的服务器组名 也可以单独设置hosts地址\n  tasks:\n  - name: cd path and git pull # 命令名称\n    shell: git pull # 执行命令\n    args:\n      chdir: ~/workdir # 进入目录\n```\n运行\n```bash\n$ ansible-playbook deploy.yml\n\nPLAY [wxnacy] **********************************************************************************************************************************************************************************************\n\nTASK [cd path and git pull] *************************************************************************************************************************************************************************************\nok: [wxnacy.server.org]\n\n\nPLAY RECAP *************************************************************************************************************************************************************************************************\nwxnacy.server.org             : ok=2    changed=1    unreachable=0    failed=0\n```\n执行完运行命令ansible会在webservers组中依次执行tasks，返回以上样式结果极为成功，结果通过红黄绿三种颜色标明了不同的执行结果，红色表示有task执行失败，黄色表示改变了远程主机状态。\n\n","source":"_posts/ansible-2017-08-08-item-basic_playbooks.md","raw":"---\ntitle: ansible入门笔记2 Playbooks\ndate: 2017-08-08\ntags:\n---\n\n\n专辑：[ansible学习笔记](/ansible/2017/08/14/album-study-notes)\n\n> Playbooks 是 Ansible的配置,部署,编排语言.他们可以被描述为一个需要希望远程主机执行命令的方案,或者一组IT程序运行的命令集合.\n\n一个playbook就是一个YAML文件，所以playbook文件一般都以.yml结尾，一个playbook文件由一个或多个play组成，每个play定义了在一个或多个远程主机上执行的一系列的task，其中每个task一般就是调用一个ansible的模块，如调用copy模块复制文件到远程主机或调用shell模块执行命令。\n\n## 简单的配置\n配置deploy.yml完成进入远程服务器的某个目录并执行git pull操作\n```bash\n- hosts: wxnacy # 它会默认使用/etc/ansible/hosts 中配置的服务器组名 也可以单独设置hosts地址\n  tasks:\n  - name: cd path and git pull # 命令名称\n    shell: git pull # 执行命令\n    args:\n      chdir: ~/workdir # 进入目录\n```\n运行\n```bash\n$ ansible-playbook deploy.yml\n\nPLAY [wxnacy] **********************************************************************************************************************************************************************************************\n\nTASK [cd path and git pull] *************************************************************************************************************************************************************************************\nok: [wxnacy.server.org]\n\n\nPLAY RECAP *************************************************************************************************************************************************************************************************\nwxnacy.server.org             : ok=2    changed=1    unreachable=0    failed=0\n```\n执行完运行命令ansible会在webservers组中依次执行tasks，返回以上样式结果极为成功，结果通过红黄绿三种颜色标明了不同的执行结果，红色表示有task执行失败，黄色表示改变了远程主机状态。\n\n","slug":"ansible-2017-08-08-item-basic-playbooks","published":1,"updated":"2017-09-15T14:27:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8k0003kjxv5khvk9ao","content":"<p>专辑：<a href=\"/ansible/2017/08/14/album-study-notes\">ansible学习笔记</a></p>\n<blockquote>\n<p>Playbooks 是 Ansible的配置,部署,编排语言.他们可以被描述为一个需要希望远程主机执行命令的方案,或者一组IT程序运行的命令集合.</p>\n</blockquote>\n<p>一个playbook就是一个YAML文件，所以playbook文件一般都以.yml结尾，一个playbook文件由一个或多个play组成，每个play定义了在一个或多个远程主机上执行的一系列的task，其中每个task一般就是调用一个ansible的模块，如调用copy模块复制文件到远程主机或调用shell模块执行命令。</p>\n<h2><span id=\"jian-dan-de-pei-zhi\">简单的配置</span><a href=\"#jian-dan-de-pei-zhi\" class=\"header-anchor\"></a></h2><p>配置deploy.yml完成进入远程服务器的某个目录并执行git pull操作<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- hosts: wxnacy <span class=\"comment\"># 它会默认使用/etc/ansible/hosts 中配置的服务器组名 也可以单独设置hosts地址</span></div><div class=\"line\">  tasks:</div><div class=\"line\">  - name: <span class=\"built_in\">cd</span> path and git pull <span class=\"comment\"># 命令名称</span></div><div class=\"line\">    shell: git pull <span class=\"comment\"># 执行命令</span></div><div class=\"line\">    args:</div><div class=\"line\">      <span class=\"built_in\">chdir</span>: ~/workdir <span class=\"comment\"># 进入目录</span></div></pre></td></tr></table></figure></p>\n<p>运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ansible-playbook deploy.yml</div><div class=\"line\"></div><div class=\"line\">PLAY [wxnacy] **********************************************************************************************************************************************************************************************</div><div class=\"line\"></div><div class=\"line\">TASK [<span class=\"built_in\">cd</span> path and git pull] *************************************************************************************************************************************************************************************</div><div class=\"line\">ok: [wxnacy.server.org]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">PLAY RECAP *************************************************************************************************************************************************************************************************</div><div class=\"line\">wxnacy.server.org             : ok=2    changed=1    unreachable=0    failed=0</div></pre></td></tr></table></figure></p>\n<p>执行完运行命令ansible会在webservers组中依次执行tasks，返回以上样式结果极为成功，结果通过红黄绿三种颜色标明了不同的执行结果，红色表示有task执行失败，黄色表示改变了远程主机状态。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>专辑：<a href=\"/ansible/2017/08/14/album-study-notes\">ansible学习笔记</a></p>\n<blockquote>\n<p>Playbooks 是 Ansible的配置,部署,编排语言.他们可以被描述为一个需要希望远程主机执行命令的方案,或者一组IT程序运行的命令集合.</p>\n</blockquote>\n<p>一个playbook就是一个YAML文件，所以playbook文件一般都以.yml结尾，一个playbook文件由一个或多个play组成，每个play定义了在一个或多个远程主机上执行的一系列的task，其中每个task一般就是调用一个ansible的模块，如调用copy模块复制文件到远程主机或调用shell模块执行命令。</p>\n<h2 id=\"简单的配置\"><a href=\"#简单的配置\" class=\"headerlink\" title=\"简单的配置\"></a>简单的配置</h2><p>配置deploy.yml完成进入远程服务器的某个目录并执行git pull操作<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- hosts: wxnacy <span class=\"comment\"># 它会默认使用/etc/ansible/hosts 中配置的服务器组名 也可以单独设置hosts地址</span></div><div class=\"line\">  tasks:</div><div class=\"line\">  - name: <span class=\"built_in\">cd</span> path and git pull <span class=\"comment\"># 命令名称</span></div><div class=\"line\">    shell: git pull <span class=\"comment\"># 执行命令</span></div><div class=\"line\">    args:</div><div class=\"line\">      <span class=\"built_in\">chdir</span>: ~/workdir <span class=\"comment\"># 进入目录</span></div></pre></td></tr></table></figure></p>\n<p>运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ansible-playbook deploy.yml</div><div class=\"line\"></div><div class=\"line\">PLAY [wxnacy] **********************************************************************************************************************************************************************************************</div><div class=\"line\"></div><div class=\"line\">TASK [<span class=\"built_in\">cd</span> path and git pull] *************************************************************************************************************************************************************************************</div><div class=\"line\">ok: [wxnacy.server.org]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">PLAY RECAP *************************************************************************************************************************************************************************************************</div><div class=\"line\">wxnacy.server.org             : ok=2    changed=1    unreachable=0    failed=0</div></pre></td></tr></table></figure></p>\n<p>执行完运行命令ansible会在webservers组中依次执行tasks，返回以上样式结果极为成功，结果通过红黄绿三种颜色标明了不同的执行结果，红色表示有task执行失败，黄色表示改变了远程主机状态。</p>\n"},{"title":"ansible学习笔记","date":"2017-08-13T16:00:00.000Z","_content":"\n## 入门级别\n\n- [ansible入门笔记1 Get Started](/ansible/2017/08/08/item-basic_get_started)\n- [ansible入门笔记2 Playbooks](/ansible/2017/08/08/item-basic_playbooks)\n- [ansible入门笔记3 Playbooks 简单扩展](/ansible/2017/08/08/item-basic_playbooks_ext)\n- [ansible入门案例1 远程部署项目](/ansible/2017/08/08/item-basic_tasks1)\n\n\n","source":"_posts/ansible-2017-08-14-album-study-notes.md","raw":"---\ntitle: ansible学习笔记\ndate: 2017-08-14\ntags:\n---\n\n## 入门级别\n\n- [ansible入门笔记1 Get Started](/ansible/2017/08/08/item-basic_get_started)\n- [ansible入门笔记2 Playbooks](/ansible/2017/08/08/item-basic_playbooks)\n- [ansible入门笔记3 Playbooks 简单扩展](/ansible/2017/08/08/item-basic_playbooks_ext)\n- [ansible入门案例1 远程部署项目](/ansible/2017/08/08/item-basic_tasks1)\n\n\n","slug":"ansible-2017-08-14-album-study-notes","published":1,"updated":"2017-09-15T14:25:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8l0004kjxvql6egd7m","content":"<h2><span id=\"ru-men-ji-bie\">入门级别</span><a href=\"#ru-men-ji-bie\" class=\"header-anchor\"></a></h2><ul>\n<li><a href=\"/ansible/2017/08/08/item-basic_get_started\">ansible入门笔记1 Get Started</a></li>\n<li><a href=\"/ansible/2017/08/08/item-basic_playbooks\">ansible入门笔记2 Playbooks</a></li>\n<li><a href=\"/ansible/2017/08/08/item-basic_playbooks_ext\">ansible入门笔记3 Playbooks 简单扩展</a></li>\n<li><a href=\"/ansible/2017/08/08/item-basic_tasks1\">ansible入门案例1 远程部署项目</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"入门级别\"><a href=\"#入门级别\" class=\"headerlink\" title=\"入门级别\"></a>入门级别</h2><ul>\n<li><a href=\"/ansible/2017/08/08/item-basic_get_started\">ansible入门笔记1 Get Started</a></li>\n<li><a href=\"/ansible/2017/08/08/item-basic_playbooks\">ansible入门笔记2 Playbooks</a></li>\n<li><a href=\"/ansible/2017/08/08/item-basic_playbooks_ext\">ansible入门笔记3 Playbooks 简单扩展</a></li>\n<li><a href=\"/ansible/2017/08/08/item-basic_tasks1\">ansible入门案例1 远程部署项目</a></li>\n</ul>\n"},{"title":"git 常用命令","date":"2017-08-03T16:00:00.000Z","_content":"\n[TOC]\n## 初始化项目\n```bash\ncd project_root                             # 进入项目目录\ngit init                                    # 初始化git仓库\ngit add .                                   # 添加文件到仓库\ngit commit -m 'init commit'                 # 提交代码到本地仓库\ngit remote add origin ${repository_path}    # 将项目关联到git server\ngit pull origin master                      # 同步代码\ngit push origin master                      # push代码到远程仓库\ngit clone ${repository_path}                # 新的位置clone项目\n```\n\n## 删除文件\n```bash\nrm -r file_path\ngit rm -r ${file_path}\ngit commit -m 'remove'\ngit pull origin master\ngit push origin master\n```\n## 修改用户信息\n```bash\ngit config --global user.name wxnacy            # 配置用户名\ngit config --global user.email xxx@qq.com       # 配置邮件\n```\n\n## 记住密码\n在服务器上 `clone` 代码第一次通常会提示输入密码，为了下次不再提示，可以在 `clone` 后做如下操作\n```bash\ngit config credential.helper store\n```\n## revert commit\n```bash\ngit -c core.quotepath=false rm --cached -f -- env.sh\ngit -c core.quotepath=false checkout HEAD -- env.sh\n```\n## 修改remote url\n```bash\ngit remote set-url origin ${new_repository_path}\n```\n\n## 分支\n\n```bash\ngit checkout -b ${new_branch} master    # 从master创建新分支\ngit checkout ${branch_name}             # 定位分支\ngit merge --no-off ${branch_name}       # 将其他分支合并到master\ngit rebase origin master # master分支合并到当前分支\n```\n\n## 标签\n\n```bash\ngit tag ${tag_name} master              # 创建新分支\ngit push origin ${tag_name}             # 将标签推到远程仓库\ngit branch -D ${branch_tag_name}        # 删除本地分支或标签\ngit push origin :${branch_tag_name}     # 删除远程分支或分支\n```\n\n## 提交检查\n\n在代码提前前或查看提交记录详情时可能会用到下面几组命令\n\n### status\n```bash\ngit status          # 查看当前版本状态（是否修改）\n```\n\n### log\n\n```bash\ngit log             # 显示提交日志\ngit log -1          # 显示1行日志 -n为n行\ngit log --stat      # 显示提交日志及相关变动文件\ngit log -p -m       # 显示提交日志及变动的详细情况\ngit log v2.0        # 显示v2.0的日志\n```\n\n### show\n```bash\ngit show dfb02e6e4f2f7b573         # 显示某个提交的详细内容\ngit show dfb02                     # 可只用commitid的前几位\ngit show HEAD                      # 显示HEAD提交日志\ngit show HEAD^                     # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本\ngit show v2.0                      # 显示v2.0的日志及详细内容\n```\n\n### diff\n```bash\ngit diff                                  # 显示所有未添加至index的变更\ngit diff --cached                         # 显示所有已添加index但还未commit的变更\ngit diff HEAD^                            # 比较与上一个版本的差异\ngit diff HEAD -- ./lib                    # 比较与HEAD版本lib目录的差异\ngit diff origin/master..master            # 比较远程分支master上有本地分支master上没有的\ngit diff origin/master..master --stat     # 只显示差异的文件，不显示具体内容\n```\n\n\n\n\n\n\n","source":"_posts/git-2017-08-04-basic-cmd.md","raw":"---\ntitle: git 常用命令\ndate: 2017-08-04\ntags:\n---\n\n[TOC]\n## 初始化项目\n```bash\ncd project_root                             # 进入项目目录\ngit init                                    # 初始化git仓库\ngit add .                                   # 添加文件到仓库\ngit commit -m 'init commit'                 # 提交代码到本地仓库\ngit remote add origin ${repository_path}    # 将项目关联到git server\ngit pull origin master                      # 同步代码\ngit push origin master                      # push代码到远程仓库\ngit clone ${repository_path}                # 新的位置clone项目\n```\n\n## 删除文件\n```bash\nrm -r file_path\ngit rm -r ${file_path}\ngit commit -m 'remove'\ngit pull origin master\ngit push origin master\n```\n## 修改用户信息\n```bash\ngit config --global user.name wxnacy            # 配置用户名\ngit config --global user.email xxx@qq.com       # 配置邮件\n```\n\n## 记住密码\n在服务器上 `clone` 代码第一次通常会提示输入密码，为了下次不再提示，可以在 `clone` 后做如下操作\n```bash\ngit config credential.helper store\n```\n## revert commit\n```bash\ngit -c core.quotepath=false rm --cached -f -- env.sh\ngit -c core.quotepath=false checkout HEAD -- env.sh\n```\n## 修改remote url\n```bash\ngit remote set-url origin ${new_repository_path}\n```\n\n## 分支\n\n```bash\ngit checkout -b ${new_branch} master    # 从master创建新分支\ngit checkout ${branch_name}             # 定位分支\ngit merge --no-off ${branch_name}       # 将其他分支合并到master\ngit rebase origin master # master分支合并到当前分支\n```\n\n## 标签\n\n```bash\ngit tag ${tag_name} master              # 创建新分支\ngit push origin ${tag_name}             # 将标签推到远程仓库\ngit branch -D ${branch_tag_name}        # 删除本地分支或标签\ngit push origin :${branch_tag_name}     # 删除远程分支或分支\n```\n\n## 提交检查\n\n在代码提前前或查看提交记录详情时可能会用到下面几组命令\n\n### status\n```bash\ngit status          # 查看当前版本状态（是否修改）\n```\n\n### log\n\n```bash\ngit log             # 显示提交日志\ngit log -1          # 显示1行日志 -n为n行\ngit log --stat      # 显示提交日志及相关变动文件\ngit log -p -m       # 显示提交日志及变动的详细情况\ngit log v2.0        # 显示v2.0的日志\n```\n\n### show\n```bash\ngit show dfb02e6e4f2f7b573         # 显示某个提交的详细内容\ngit show dfb02                     # 可只用commitid的前几位\ngit show HEAD                      # 显示HEAD提交日志\ngit show HEAD^                     # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本\ngit show v2.0                      # 显示v2.0的日志及详细内容\n```\n\n### diff\n```bash\ngit diff                                  # 显示所有未添加至index的变更\ngit diff --cached                         # 显示所有已添加index但还未commit的变更\ngit diff HEAD^                            # 比较与上一个版本的差异\ngit diff HEAD -- ./lib                    # 比较与HEAD版本lib目录的差异\ngit diff origin/master..master            # 比较远程分支master上有本地分支master上没有的\ngit diff origin/master..master --stat     # 只显示差异的文件，不显示具体内容\n```\n\n\n\n\n\n\n","slug":"git-2017-08-04-basic-cmd","published":1,"updated":"2017-09-15T14:58:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8l0005kjxvyoqv8gtg","content":"<p>[TOC]</p>\n<h2><span id=\"chu-shi-hua-xiang-mu\">初始化项目</span><a href=\"#chu-shi-hua-xiang-mu\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> project_root                             <span class=\"comment\"># 进入项目目录</span></div><div class=\"line\">git init                                    <span class=\"comment\"># 初始化git仓库</span></div><div class=\"line\">git add .                                   <span class=\"comment\"># 添加文件到仓库</span></div><div class=\"line\">git commit -m <span class=\"string\">'init commit'</span>                 <span class=\"comment\"># 提交代码到本地仓库</span></div><div class=\"line\">git remote add origin <span class=\"variable\">$&#123;repository_path&#125;</span>    <span class=\"comment\"># 将项目关联到git server</span></div><div class=\"line\">git pull origin master                      <span class=\"comment\"># 同步代码</span></div><div class=\"line\">git push origin master                      <span class=\"comment\"># push代码到远程仓库</span></div><div class=\"line\">git <span class=\"built_in\">clone</span> <span class=\"variable\">$&#123;repository_path&#125;</span>                <span class=\"comment\"># 新的位置clone项目</span></div></pre></td></tr></table></figure>\n<h2><span id=\"shan-chu-wen-jian\">删除文件</span><a href=\"#shan-chu-wen-jian\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm -r file_path</div><div class=\"line\">git rm -r <span class=\"variable\">$&#123;file_path&#125;</span></div><div class=\"line\">git commit -m <span class=\"string\">'remove'</span></div><div class=\"line\">git pull origin master</div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure>\n<h2><span id=\"xiu-gai-yong-hu-xin-xi\">修改用户信息</span><a href=\"#xiu-gai-yong-hu-xin-xi\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name wxnacy            <span class=\"comment\"># 配置用户名</span></div><div class=\"line\">git config --global user.email xxx@qq.com       <span class=\"comment\"># 配置邮件</span></div></pre></td></tr></table></figure>\n<h2><span id=\"ji-zhu-mi-ma\">记住密码</span><a href=\"#ji-zhu-mi-ma\" class=\"header-anchor\"></a></h2><p>在服务器上 <code>clone</code> 代码第一次通常会提示输入密码，为了下次不再提示，可以在 <code>clone</code> 后做如下操作<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config credential.helper store</div></pre></td></tr></table></figure></p>\n<h2><span id=\"revert-commit\">revert commit</span><a href=\"#revert-commit\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git -c core.quotepath=<span class=\"literal\">false</span> rm --cached -f -- env.sh</div><div class=\"line\">git -c core.quotepath=<span class=\"literal\">false</span> checkout HEAD -- env.sh</div></pre></td></tr></table></figure>\n<h2><span id=\"xiu-gai-remote-url\">修改remote url</span><a href=\"#xiu-gai-remote-url\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote <span class=\"built_in\">set</span>-url origin <span class=\"variable\">$&#123;new_repository_path&#125;</span></div></pre></td></tr></table></figure>\n<h2><span id=\"fen-zhi\">分支</span><a href=\"#fen-zhi\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b <span class=\"variable\">$&#123;new_branch&#125;</span> master    <span class=\"comment\"># 从master创建新分支</span></div><div class=\"line\">git checkout <span class=\"variable\">$&#123;branch_name&#125;</span>             <span class=\"comment\"># 定位分支</span></div><div class=\"line\">git merge --no-off <span class=\"variable\">$&#123;branch_name&#125;</span>       <span class=\"comment\"># 将其他分支合并到master</span></div><div class=\"line\">git rebase origin master <span class=\"comment\"># master分支合并到当前分支</span></div></pre></td></tr></table></figure>\n<h2><span id=\"biao-qian\">标签</span><a href=\"#biao-qian\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag <span class=\"variable\">$&#123;tag_name&#125;</span> master              <span class=\"comment\"># 创建新分支</span></div><div class=\"line\">git push origin <span class=\"variable\">$&#123;tag_name&#125;</span>             <span class=\"comment\"># 将标签推到远程仓库</span></div><div class=\"line\">git branch -D <span class=\"variable\">$&#123;branch_tag_name&#125;</span>        <span class=\"comment\"># 删除本地分支或标签</span></div><div class=\"line\">git push origin :<span class=\"variable\">$&#123;branch_tag_name&#125;</span>     <span class=\"comment\"># 删除远程分支或分支</span></div></pre></td></tr></table></figure>\n<h2><span id=\"ti-jiao-jian-cha\">提交检查</span><a href=\"#ti-jiao-jian-cha\" class=\"header-anchor\"></a></h2><p>在代码提前前或查看提交记录详情时可能会用到下面几组命令</p>\n<h3><span id=\"status\">status</span><a href=\"#status\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status          <span class=\"comment\"># 查看当前版本状态（是否修改）</span></div></pre></td></tr></table></figure>\n<h3><span id=\"log\">log</span><a href=\"#log\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span>             <span class=\"comment\"># 显示提交日志</span></div><div class=\"line\">git <span class=\"built_in\">log</span> -1          <span class=\"comment\"># 显示1行日志 -n为n行</span></div><div class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span>      <span class=\"comment\"># 显示提交日志及相关变动文件</span></div><div class=\"line\">git <span class=\"built_in\">log</span> -p -m       <span class=\"comment\"># 显示提交日志及变动的详细情况</span></div><div class=\"line\">git <span class=\"built_in\">log</span> v2.0        <span class=\"comment\"># 显示v2.0的日志</span></div></pre></td></tr></table></figure>\n<h3><span id=\"show\">show</span><a href=\"#show\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git show dfb02e6e4f2f7b573         <span class=\"comment\"># 显示某个提交的详细内容</span></div><div class=\"line\">git show dfb02                     <span class=\"comment\"># 可只用commitid的前几位</span></div><div class=\"line\">git show HEAD                      <span class=\"comment\"># 显示HEAD提交日志</span></div><div class=\"line\">git show HEAD^                     <span class=\"comment\"># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span></div><div class=\"line\">git show v2.0                      <span class=\"comment\"># 显示v2.0的日志及详细内容</span></div></pre></td></tr></table></figure>\n<h3><span id=\"diff\">diff</span><a href=\"#diff\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff                                  <span class=\"comment\"># 显示所有未添加至index的变更</span></div><div class=\"line\">git diff --cached                         <span class=\"comment\"># 显示所有已添加index但还未commit的变更</span></div><div class=\"line\">git diff HEAD^                            <span class=\"comment\"># 比较与上一个版本的差异</span></div><div class=\"line\">git diff HEAD -- ./lib                    <span class=\"comment\"># 比较与HEAD版本lib目录的差异</span></div><div class=\"line\">git diff origin/master..master            <span class=\"comment\"># 比较远程分支master上有本地分支master上没有的</span></div><div class=\"line\">git diff origin/master..master --<span class=\"built_in\">stat</span>     <span class=\"comment\"># 只显示差异的文件，不显示具体内容</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> project_root                             <span class=\"comment\"># 进入项目目录</span></div><div class=\"line\">git init                                    <span class=\"comment\"># 初始化git仓库</span></div><div class=\"line\">git add .                                   <span class=\"comment\"># 添加文件到仓库</span></div><div class=\"line\">git commit -m <span class=\"string\">'init commit'</span>                 <span class=\"comment\"># 提交代码到本地仓库</span></div><div class=\"line\">git remote add origin <span class=\"variable\">$&#123;repository_path&#125;</span>    <span class=\"comment\"># 将项目关联到git server</span></div><div class=\"line\">git pull origin master                      <span class=\"comment\"># 同步代码</span></div><div class=\"line\">git push origin master                      <span class=\"comment\"># push代码到远程仓库</span></div><div class=\"line\">git <span class=\"built_in\">clone</span> <span class=\"variable\">$&#123;repository_path&#125;</span>                <span class=\"comment\"># 新的位置clone项目</span></div></pre></td></tr></table></figure>\n<h2 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm -r file_path</div><div class=\"line\">git rm -r <span class=\"variable\">$&#123;file_path&#125;</span></div><div class=\"line\">git commit -m <span class=\"string\">'remove'</span></div><div class=\"line\">git pull origin master</div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure>\n<h2 id=\"修改用户信息\"><a href=\"#修改用户信息\" class=\"headerlink\" title=\"修改用户信息\"></a>修改用户信息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name wxnacy            <span class=\"comment\"># 配置用户名</span></div><div class=\"line\">git config --global user.email xxx@qq.com       <span class=\"comment\"># 配置邮件</span></div></pre></td></tr></table></figure>\n<h2 id=\"记住密码\"><a href=\"#记住密码\" class=\"headerlink\" title=\"记住密码\"></a>记住密码</h2><p>在服务器上 <code>clone</code> 代码第一次通常会提示输入密码，为了下次不再提示，可以在 <code>clone</code> 后做如下操作<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config credential.helper store</div></pre></td></tr></table></figure></p>\n<h2 id=\"revert-commit\"><a href=\"#revert-commit\" class=\"headerlink\" title=\"revert commit\"></a>revert commit</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git -c core.quotepath=<span class=\"literal\">false</span> rm --cached -f -- env.sh</div><div class=\"line\">git -c core.quotepath=<span class=\"literal\">false</span> checkout HEAD -- env.sh</div></pre></td></tr></table></figure>\n<h2 id=\"修改remote-url\"><a href=\"#修改remote-url\" class=\"headerlink\" title=\"修改remote url\"></a>修改remote url</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote <span class=\"built_in\">set</span>-url origin <span class=\"variable\">$&#123;new_repository_path&#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b <span class=\"variable\">$&#123;new_branch&#125;</span> master    <span class=\"comment\"># 从master创建新分支</span></div><div class=\"line\">git checkout <span class=\"variable\">$&#123;branch_name&#125;</span>             <span class=\"comment\"># 定位分支</span></div><div class=\"line\">git merge --no-off <span class=\"variable\">$&#123;branch_name&#125;</span>       <span class=\"comment\"># 将其他分支合并到master</span></div><div class=\"line\">git rebase origin master <span class=\"comment\"># master分支合并到当前分支</span></div></pre></td></tr></table></figure>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag <span class=\"variable\">$&#123;tag_name&#125;</span> master              <span class=\"comment\"># 创建新分支</span></div><div class=\"line\">git push origin <span class=\"variable\">$&#123;tag_name&#125;</span>             <span class=\"comment\"># 将标签推到远程仓库</span></div><div class=\"line\">git branch -D <span class=\"variable\">$&#123;branch_tag_name&#125;</span>        <span class=\"comment\"># 删除本地分支或标签</span></div><div class=\"line\">git push origin :<span class=\"variable\">$&#123;branch_tag_name&#125;</span>     <span class=\"comment\"># 删除远程分支或分支</span></div></pre></td></tr></table></figure>\n<h2 id=\"提交检查\"><a href=\"#提交检查\" class=\"headerlink\" title=\"提交检查\"></a>提交检查</h2><p>在代码提前前或查看提交记录详情时可能会用到下面几组命令</p>\n<h3 id=\"status\"><a href=\"#status\" class=\"headerlink\" title=\"status\"></a>status</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status          <span class=\"comment\"># 查看当前版本状态（是否修改）</span></div></pre></td></tr></table></figure>\n<h3 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span>             <span class=\"comment\"># 显示提交日志</span></div><div class=\"line\">git <span class=\"built_in\">log</span> -1          <span class=\"comment\"># 显示1行日志 -n为n行</span></div><div class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span>      <span class=\"comment\"># 显示提交日志及相关变动文件</span></div><div class=\"line\">git <span class=\"built_in\">log</span> -p -m       <span class=\"comment\"># 显示提交日志及变动的详细情况</span></div><div class=\"line\">git <span class=\"built_in\">log</span> v2.0        <span class=\"comment\"># 显示v2.0的日志</span></div></pre></td></tr></table></figure>\n<h3 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git show dfb02e6e4f2f7b573         <span class=\"comment\"># 显示某个提交的详细内容</span></div><div class=\"line\">git show dfb02                     <span class=\"comment\"># 可只用commitid的前几位</span></div><div class=\"line\">git show HEAD                      <span class=\"comment\"># 显示HEAD提交日志</span></div><div class=\"line\">git show HEAD^                     <span class=\"comment\"># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span></div><div class=\"line\">git show v2.0                      <span class=\"comment\"># 显示v2.0的日志及详细内容</span></div></pre></td></tr></table></figure>\n<h3 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff                                  <span class=\"comment\"># 显示所有未添加至index的变更</span></div><div class=\"line\">git diff --cached                         <span class=\"comment\"># 显示所有已添加index但还未commit的变更</span></div><div class=\"line\">git diff HEAD^                            <span class=\"comment\"># 比较与上一个版本的差异</span></div><div class=\"line\">git diff HEAD -- ./lib                    <span class=\"comment\"># 比较与HEAD版本lib目录的差异</span></div><div class=\"line\">git diff origin/master..master            <span class=\"comment\"># 比较远程分支master上有本地分支master上没有的</span></div><div class=\"line\">git diff origin/master..master --<span class=\"built_in\">stat</span>     <span class=\"comment\"># 只显示差异的文件，不显示具体内容</span></div></pre></td></tr></table></figure>\n"},{"title":"正则表达式","date":"2017-09-07T16:00:00.000Z","_content":"\n\n## 常用元字符\n```bash\n^           匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。\n$           匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\\n' 或 '\\r' 之前的位置。\n.           匹配除 \"\\n\" 之外的任何单个字符。要匹配包括 '\\n' 在内的任何字符，请使用像\"(.|\\n)\"的模式。\nx|y         匹配 x 或 y。例如，'z|food' 能匹配 \"z\" 或 \"food\"。'(z|f)ood' 则匹配 \"zood\" 或 \"food\"。\n[xyz]       字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 \"plain\" 中的 'a'。\n[^xyz]      负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 \"plain\" 中的'p'、'l'、'i'、'n'。\n[a-z]       字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。\n[^a-z]      负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。\n\\b          匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。\n\\B          匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。\n\\cx         匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。\n\\d          匹配一个数字字符。等价于 [0-9]。\n\\D          匹配一个非数字字符。等价于 [^0-9]。\n\\f          匹配一个换页符。等价于 \\x0c 和 \\cL。\n\\n          匹配一个换行符。等价于 \\x0a 和 \\cJ。\n\\r          匹配一个回车符。等价于 \\x0d 和 \\cM。\n\\s          匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。\n\\S          匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。\n\\t          匹配一个制表符。等价于 \\x09 和 \\cI。\n\\v          匹配一个垂直制表符。等价于 \\x0b 和 \\cK。\n\\w          匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。\n\\W          匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。\n```\n## 常用次数元字符\n```bash\n*       匹配前面的子表达式零次或多次。例如，zo* 能匹配 \"z\" 以及 \"zoo\"。* 等价于{0,}。\n+       匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 \"zo\" 以及 \"zoo\"，但不能匹配 \"z\"。+ 等价于 {1,}。\n?       匹配前面的子表达式零次或一次。例如，\"do(es)?\" 可以匹配 \"do\" 或 \"does\" 。? 等价于 {0,1}。\n{n}\t    n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 \"Bob\" 中的 'o'，但是能匹配 \"food\" 中的两个 o。\n{n,}\tn 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 \"Bob\" 中的 'o'，但能匹配 \"foooood\" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。\n{n,m}\tm 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，\"o{1,3}\" 将匹配 \"fooooood\" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。\n```\n","source":"_posts/develop-2017-09-08-regex-basic.md","raw":"---\ntitle: 正则表达式\ndate: 2017-09-08\ntags:\n---\n\n\n## 常用元字符\n```bash\n^           匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\\n' 或 '\\r' 之后的位置。\n$           匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\\n' 或 '\\r' 之前的位置。\n.           匹配除 \"\\n\" 之外的任何单个字符。要匹配包括 '\\n' 在内的任何字符，请使用像\"(.|\\n)\"的模式。\nx|y         匹配 x 或 y。例如，'z|food' 能匹配 \"z\" 或 \"food\"。'(z|f)ood' 则匹配 \"zood\" 或 \"food\"。\n[xyz]       字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 \"plain\" 中的 'a'。\n[^xyz]      负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 \"plain\" 中的'p'、'l'、'i'、'n'。\n[a-z]       字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。\n[^a-z]      负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。\n\\b          匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。\n\\B          匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。\n\\cx         匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。\n\\d          匹配一个数字字符。等价于 [0-9]。\n\\D          匹配一个非数字字符。等价于 [^0-9]。\n\\f          匹配一个换页符。等价于 \\x0c 和 \\cL。\n\\n          匹配一个换行符。等价于 \\x0a 和 \\cJ。\n\\r          匹配一个回车符。等价于 \\x0d 和 \\cM。\n\\s          匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。\n\\S          匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。\n\\t          匹配一个制表符。等价于 \\x09 和 \\cI。\n\\v          匹配一个垂直制表符。等价于 \\x0b 和 \\cK。\n\\w          匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。\n\\W          匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。\n```\n## 常用次数元字符\n```bash\n*       匹配前面的子表达式零次或多次。例如，zo* 能匹配 \"z\" 以及 \"zoo\"。* 等价于{0,}。\n+       匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 \"zo\" 以及 \"zoo\"，但不能匹配 \"z\"。+ 等价于 {1,}。\n?       匹配前面的子表达式零次或一次。例如，\"do(es)?\" 可以匹配 \"do\" 或 \"does\" 。? 等价于 {0,1}。\n{n}\t    n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 \"Bob\" 中的 'o'，但是能匹配 \"food\" 中的两个 o。\n{n,}\tn 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 \"Bob\" 中的 'o'，但能匹配 \"foooood\" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。\n{n,m}\tm 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，\"o{1,3}\" 将匹配 \"fooooood\" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。\n```\n","slug":"develop-2017-09-08-regex-basic","published":1,"updated":"2017-09-15T14:27:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8m0006kjxvtbac6nim","content":"<h2><span id=\"chang-yong-yuan-zi-fu\">常用元字符</span><a href=\"#chang-yong-yuan-zi-fu\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">^           匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 <span class=\"string\">'\\n'</span> 或 <span class=\"string\">'\\r'</span> 之后的位置。</div><div class=\"line\">$           匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 <span class=\"string\">'\\n'</span> 或 <span class=\"string\">'\\r'</span> 之前的位置。</div><div class=\"line\">.           匹配除 <span class=\"string\">\"\\n\"</span> 之外的任何单个字符。要匹配包括 <span class=\"string\">'\\n'</span> 在内的任何字符，请使用像<span class=\"string\">\"(.|\\n)\"</span>的模式。</div><div class=\"line\">x|y         匹配 x 或 y。例如，<span class=\"string\">'z|food'</span> 能匹配 <span class=\"string\">\"z\"</span> 或 <span class=\"string\">\"food\"</span>。<span class=\"string\">'(z|f)ood'</span> 则匹配 <span class=\"string\">\"zood\"</span> 或 <span class=\"string\">\"food\"</span>。</div><div class=\"line\">[xyz]       字符集合。匹配所包含的任意一个字符。例如， <span class=\"string\">'[abc]'</span> 可以匹配 <span class=\"string\">\"plain\"</span> 中的 <span class=\"string\">'a'</span>。</div><div class=\"line\">[^xyz]      负值字符集合。匹配未包含的任意字符。例如， <span class=\"string\">'[^abc]'</span> 可以匹配 <span class=\"string\">\"plain\"</span> 中的<span class=\"string\">'p'</span>、<span class=\"string\">'l'</span>、<span class=\"string\">'i'</span>、<span class=\"string\">'n'</span>。</div><div class=\"line\">[a-z]       字符范围。匹配指定范围内的任意字符。例如，<span class=\"string\">'[a-z]'</span> 可以匹配 <span class=\"string\">'a'</span> 到 <span class=\"string\">'z'</span> 范围内的任意小写字母字符。</div><div class=\"line\">[^a-z]      负值字符范围。匹配任何不在指定范围内的任意字符。例如，<span class=\"string\">'[^a-z]'</span> 可以匹配任何不在 <span class=\"string\">'a'</span> 到 <span class=\"string\">'z'</span> 范围内的任意字符。</div><div class=\"line\">\\b          匹配一个单词边界，也就是指单词和空格间的位置。例如， <span class=\"string\">'er\\b'</span> 可以匹配<span class=\"string\">\"never\"</span> 中的 <span class=\"string\">'er'</span>，但不能匹配 <span class=\"string\">\"verb\"</span> 中的 <span class=\"string\">'er'</span>。</div><div class=\"line\">\\B          匹配非单词边界。<span class=\"string\">'er\\B'</span> 能匹配 <span class=\"string\">\"verb\"</span> 中的 <span class=\"string\">'er'</span>，但不能匹配 <span class=\"string\">\"never\"</span> 中的 <span class=\"string\">'er'</span>。</div><div class=\"line\">\\cx         匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 <span class=\"string\">'c'</span> 字符。</div><div class=\"line\">\\d          匹配一个数字字符。等价于 [0-9]。</div><div class=\"line\">\\D          匹配一个非数字字符。等价于 [^0-9]。</div><div class=\"line\">\\f          匹配一个换页符。等价于 \\x0c 和 \\cL。</div><div class=\"line\">\\n          匹配一个换行符。等价于 \\x0a 和 \\cJ。</div><div class=\"line\">\\r          匹配一个回车符。等价于 \\x0d 和 \\cM。</div><div class=\"line\">\\s          匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。</div><div class=\"line\">\\S          匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</div><div class=\"line\">\\t          匹配一个制表符。等价于 \\x09 和 \\cI。</div><div class=\"line\">\\v          匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</div><div class=\"line\">\\w          匹配包括下划线的任何单词字符。等价于<span class=\"string\">'[A-Za-z0-9_]'</span>。</div><div class=\"line\">\\W          匹配任何非单词字符。等价于 <span class=\"string\">'[^A-Za-z0-9_]'</span>。</div></pre></td></tr></table></figure>\n<h2><span id=\"chang-yong-ci-shu-yuan-zi-fu\">常用次数元字符</span><a href=\"#chang-yong-ci-shu-yuan-zi-fu\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">*       匹配前面的子表达式零次或多次。例如，zo* 能匹配 <span class=\"string\">\"z\"</span> 以及 <span class=\"string\">\"zoo\"</span>。* 等价于&#123;0,&#125;。</div><div class=\"line\">+       匹配前面的子表达式一次或多次。例如，<span class=\"string\">'zo+'</span> 能匹配 <span class=\"string\">\"zo\"</span> 以及 <span class=\"string\">\"zoo\"</span>，但不能匹配 <span class=\"string\">\"z\"</span>。+ 等价于 &#123;1,&#125;。</div><div class=\"line\">?       匹配前面的子表达式零次或一次。例如，<span class=\"string\">\"do(es)?\"</span> 可以匹配 <span class=\"string\">\"do\"</span> 或 <span class=\"string\">\"does\"</span> 。? 等价于 &#123;0,1&#125;。</div><div class=\"line\">&#123;n&#125;\t    n 是一个非负整数。匹配确定的 n 次。例如，<span class=\"string\">'o&#123;2&#125;'</span> 不能匹配 <span class=\"string\">\"Bob\"</span> 中的 <span class=\"string\">'o'</span>，但是能匹配 <span class=\"string\">\"food\"</span> 中的两个 o。</div><div class=\"line\">&#123;n,&#125;\tn 是一个非负整数。至少匹配n 次。例如，<span class=\"string\">'o&#123;2,&#125;'</span> 不能匹配 <span class=\"string\">\"Bob\"</span> 中的 <span class=\"string\">'o'</span>，但能匹配 <span class=\"string\">\"foooood\"</span> 中的所有 o。<span class=\"string\">'o&#123;1,&#125;'</span> 等价于 <span class=\"string\">'o+'</span>。<span class=\"string\">'o&#123;0,&#125;'</span> 则等价于 <span class=\"string\">'o*'</span>。</div><div class=\"line\">&#123;n,m&#125;\tm 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，<span class=\"string\">\"o&#123;1,3&#125;\"</span> 将匹配 <span class=\"string\">\"fooooood\"</span> 中的前三个 o。<span class=\"string\">'o&#123;0,1&#125;'</span> 等价于 <span class=\"string\">'o?'</span>。请注意在逗号和两个数之间不能有空格。</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常用元字符\"><a href=\"#常用元字符\" class=\"headerlink\" title=\"常用元字符\"></a>常用元字符</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">^           匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 <span class=\"string\">'\\n'</span> 或 <span class=\"string\">'\\r'</span> 之后的位置。</div><div class=\"line\">$           匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 <span class=\"string\">'\\n'</span> 或 <span class=\"string\">'\\r'</span> 之前的位置。</div><div class=\"line\">.           匹配除 <span class=\"string\">\"\\n\"</span> 之外的任何单个字符。要匹配包括 <span class=\"string\">'\\n'</span> 在内的任何字符，请使用像<span class=\"string\">\"(.|\\n)\"</span>的模式。</div><div class=\"line\">x|y         匹配 x 或 y。例如，<span class=\"string\">'z|food'</span> 能匹配 <span class=\"string\">\"z\"</span> 或 <span class=\"string\">\"food\"</span>。<span class=\"string\">'(z|f)ood'</span> 则匹配 <span class=\"string\">\"zood\"</span> 或 <span class=\"string\">\"food\"</span>。</div><div class=\"line\">[xyz]       字符集合。匹配所包含的任意一个字符。例如， <span class=\"string\">'[abc]'</span> 可以匹配 <span class=\"string\">\"plain\"</span> 中的 <span class=\"string\">'a'</span>。</div><div class=\"line\">[^xyz]      负值字符集合。匹配未包含的任意字符。例如， <span class=\"string\">'[^abc]'</span> 可以匹配 <span class=\"string\">\"plain\"</span> 中的<span class=\"string\">'p'</span>、<span class=\"string\">'l'</span>、<span class=\"string\">'i'</span>、<span class=\"string\">'n'</span>。</div><div class=\"line\">[a-z]       字符范围。匹配指定范围内的任意字符。例如，<span class=\"string\">'[a-z]'</span> 可以匹配 <span class=\"string\">'a'</span> 到 <span class=\"string\">'z'</span> 范围内的任意小写字母字符。</div><div class=\"line\">[^a-z]      负值字符范围。匹配任何不在指定范围内的任意字符。例如，<span class=\"string\">'[^a-z]'</span> 可以匹配任何不在 <span class=\"string\">'a'</span> 到 <span class=\"string\">'z'</span> 范围内的任意字符。</div><div class=\"line\">\\b          匹配一个单词边界，也就是指单词和空格间的位置。例如， <span class=\"string\">'er\\b'</span> 可以匹配<span class=\"string\">\"never\"</span> 中的 <span class=\"string\">'er'</span>，但不能匹配 <span class=\"string\">\"verb\"</span> 中的 <span class=\"string\">'er'</span>。</div><div class=\"line\">\\B          匹配非单词边界。<span class=\"string\">'er\\B'</span> 能匹配 <span class=\"string\">\"verb\"</span> 中的 <span class=\"string\">'er'</span>，但不能匹配 <span class=\"string\">\"never\"</span> 中的 <span class=\"string\">'er'</span>。</div><div class=\"line\">\\cx         匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 <span class=\"string\">'c'</span> 字符。</div><div class=\"line\">\\d          匹配一个数字字符。等价于 [0-9]。</div><div class=\"line\">\\D          匹配一个非数字字符。等价于 [^0-9]。</div><div class=\"line\">\\f          匹配一个换页符。等价于 \\x0c 和 \\cL。</div><div class=\"line\">\\n          匹配一个换行符。等价于 \\x0a 和 \\cJ。</div><div class=\"line\">\\r          匹配一个回车符。等价于 \\x0d 和 \\cM。</div><div class=\"line\">\\s          匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。</div><div class=\"line\">\\S          匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</div><div class=\"line\">\\t          匹配一个制表符。等价于 \\x09 和 \\cI。</div><div class=\"line\">\\v          匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</div><div class=\"line\">\\w          匹配包括下划线的任何单词字符。等价于<span class=\"string\">'[A-Za-z0-9_]'</span>。</div><div class=\"line\">\\W          匹配任何非单词字符。等价于 <span class=\"string\">'[^A-Za-z0-9_]'</span>。</div></pre></td></tr></table></figure>\n<h2 id=\"常用次数元字符\"><a href=\"#常用次数元字符\" class=\"headerlink\" title=\"常用次数元字符\"></a>常用次数元字符</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">*       匹配前面的子表达式零次或多次。例如，zo* 能匹配 <span class=\"string\">\"z\"</span> 以及 <span class=\"string\">\"zoo\"</span>。* 等价于&#123;0,&#125;。</div><div class=\"line\">+       匹配前面的子表达式一次或多次。例如，<span class=\"string\">'zo+'</span> 能匹配 <span class=\"string\">\"zo\"</span> 以及 <span class=\"string\">\"zoo\"</span>，但不能匹配 <span class=\"string\">\"z\"</span>。+ 等价于 &#123;1,&#125;。</div><div class=\"line\">?       匹配前面的子表达式零次或一次。例如，<span class=\"string\">\"do(es)?\"</span> 可以匹配 <span class=\"string\">\"do\"</span> 或 <span class=\"string\">\"does\"</span> 。? 等价于 &#123;0,1&#125;。</div><div class=\"line\">&#123;n&#125;\t    n 是一个非负整数。匹配确定的 n 次。例如，<span class=\"string\">'o&#123;2&#125;'</span> 不能匹配 <span class=\"string\">\"Bob\"</span> 中的 <span class=\"string\">'o'</span>，但是能匹配 <span class=\"string\">\"food\"</span> 中的两个 o。</div><div class=\"line\">&#123;n,&#125;\tn 是一个非负整数。至少匹配n 次。例如，<span class=\"string\">'o&#123;2,&#125;'</span> 不能匹配 <span class=\"string\">\"Bob\"</span> 中的 <span class=\"string\">'o'</span>，但能匹配 <span class=\"string\">\"foooood\"</span> 中的所有 o。<span class=\"string\">'o&#123;1,&#125;'</span> 等价于 <span class=\"string\">'o+'</span>。<span class=\"string\">'o&#123;0,&#125;'</span> 则等价于 <span class=\"string\">'o*'</span>。</div><div class=\"line\">&#123;n,m&#125;\tm 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，<span class=\"string\">\"o&#123;1,3&#125;\"</span> 将匹配 <span class=\"string\">\"fooooood\"</span> 中的前三个 o。<span class=\"string\">'o&#123;0,1&#125;'</span> 等价于 <span class=\"string\">'o?'</span>。请注意在逗号和两个数之间不能有空格。</div></pre></td></tr></table></figure>\n"},{"title":"HTTP相关知识","date":"2017-08-15T16:00:00.000Z","_content":"\n\n## Content-Type\n### 常用\n- application/octet-stream\n- application/json\n- application/javascript\n- application/xml\n- application/x-www-form-urlencoded\n- text/plain\n- text/xml\n- text/html\n- image/jpeg\n- image/jpeg\n- multipart/form-data\n详细内容:[http://tool.oschina.net/commons](http://tool.oschina.net/commons)","source":"_posts/http-2017-08-16-basic.md","raw":"---\ntitle: HTTP相关知识\ndate: 2017-08-16\ntags:\n---\n\n\n## Content-Type\n### 常用\n- application/octet-stream\n- application/json\n- application/javascript\n- application/xml\n- application/x-www-form-urlencoded\n- text/plain\n- text/xml\n- text/html\n- image/jpeg\n- image/jpeg\n- multipart/form-data\n详细内容:[http://tool.oschina.net/commons](http://tool.oschina.net/commons)","slug":"http-2017-08-16-basic","published":1,"updated":"2017-09-15T14:59:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8o0007kjxvlu3xh29m","content":"<h2><span id=\"content-type\">Content-Type</span><a href=\"#content-type\" class=\"header-anchor\"></a></h2><h3><span id=\"chang-yong\">常用</span><a href=\"#chang-yong\" class=\"header-anchor\"></a></h3><ul>\n<li>application/octet-stream</li>\n<li>application/json</li>\n<li>application/javascript</li>\n<li>application/xml</li>\n<li>application/x-www-form-urlencoded</li>\n<li>text/plain</li>\n<li>text/xml</li>\n<li>text/html</li>\n<li>image/jpeg</li>\n<li>image/jpeg</li>\n<li>multipart/form-data<br>详细内容:<a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"external\">http://tool.oschina.net/commons</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h2><h3 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h3><ul>\n<li>application/octet-stream</li>\n<li>application/json</li>\n<li>application/javascript</li>\n<li>application/xml</li>\n<li>application/x-www-form-urlencoded</li>\n<li>text/plain</li>\n<li>text/xml</li>\n<li>text/html</li>\n<li>image/jpeg</li>\n<li>image/jpeg</li>\n<li>multipart/form-data<br>详细内容:<a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"external\">http://tool.oschina.net/commons</a></li>\n</ul>\n"},{"title":"js和css获取屏幕大小","date":"2017-08-04T16:00:00.000Z","_content":"\n[原文：https://segmentfault.com/q/1010000004605042](https://segmentfault.com/q/1010000004605042)\n## js\n```javascript\nfunction getScreenInfo() \n{ \n    var s = \"\"; \n    s = \" 网页可见区域宽：\" document.body.clientWidth; \n    s = \" 网页可见区域高：\" document.body.clientHeight; \n    s = \" 网页可见区域宽：\" document.body.offsetWidth \" (包括边线和滚动条的宽)\"; \n    s = \" 网页可见区域高：\" document.body.offsetHeight \" (包括边线的宽)\"; \n    s = \" 网页正文全文宽：\" document.body.scrollWidth; \n    s = \" 网页正文全文高：\" document.body.scrollHeight; \n    s = \" 网页被卷去的高(ff)：\" document.body.scrollTop; \n    s = \" 网页被卷去的高(ie)：\" document.documentElement.scrollTop; \n    s = \" 网页被卷去的左：\" document.body.scrollLeft; \n    s = \" 网页正文部分上：\" window.screenTop; \n    s = \" 网页正文部分左：\" window.screenLeft; \n    s = \" 屏幕分辨率的高：\" window.screen.height; \n    s = \" 屏幕分辨率的宽：\" window.screen.width; \n    s = \" 屏幕可用工作区高度：\" window.screen.availHeight; \n    s = \" 屏幕可用工作区宽度：\" window.screen.availWidth;\n    s = \" 你的屏幕设置是 \" window.screen.colorDepth \" 位彩色\"; \n    s = \" 你的屏幕设置 \" window.screen.deviceXDPI \" 像素/英寸\"; \n} \n\n```\n## css判断\n```css\n/* 小屏幕（平板，大于等于 768px） */\n@media (min-width: 768px) { ... }\n\n/* 中等屏幕（桌面显示器，大于等于 992px） */\n@media (min-width: 992px) { ... }\n\n/* 大屏幕（大桌面显示器，大于等于 1200px） */\n@media (min-width: 1200px) { ... }\n\n```\n\n\n","source":"_posts/js-2017-08-05-screen_wh.md","raw":"---\ntitle: js和css获取屏幕大小\ndate: 2017-08-05\ntags:\n---\n\n[原文：https://segmentfault.com/q/1010000004605042](https://segmentfault.com/q/1010000004605042)\n## js\n```javascript\nfunction getScreenInfo() \n{ \n    var s = \"\"; \n    s = \" 网页可见区域宽：\" document.body.clientWidth; \n    s = \" 网页可见区域高：\" document.body.clientHeight; \n    s = \" 网页可见区域宽：\" document.body.offsetWidth \" (包括边线和滚动条的宽)\"; \n    s = \" 网页可见区域高：\" document.body.offsetHeight \" (包括边线的宽)\"; \n    s = \" 网页正文全文宽：\" document.body.scrollWidth; \n    s = \" 网页正文全文高：\" document.body.scrollHeight; \n    s = \" 网页被卷去的高(ff)：\" document.body.scrollTop; \n    s = \" 网页被卷去的高(ie)：\" document.documentElement.scrollTop; \n    s = \" 网页被卷去的左：\" document.body.scrollLeft; \n    s = \" 网页正文部分上：\" window.screenTop; \n    s = \" 网页正文部分左：\" window.screenLeft; \n    s = \" 屏幕分辨率的高：\" window.screen.height; \n    s = \" 屏幕分辨率的宽：\" window.screen.width; \n    s = \" 屏幕可用工作区高度：\" window.screen.availHeight; \n    s = \" 屏幕可用工作区宽度：\" window.screen.availWidth;\n    s = \" 你的屏幕设置是 \" window.screen.colorDepth \" 位彩色\"; \n    s = \" 你的屏幕设置 \" window.screen.deviceXDPI \" 像素/英寸\"; \n} \n\n```\n## css判断\n```css\n/* 小屏幕（平板，大于等于 768px） */\n@media (min-width: 768px) { ... }\n\n/* 中等屏幕（桌面显示器，大于等于 992px） */\n@media (min-width: 992px) { ... }\n\n/* 大屏幕（大桌面显示器，大于等于 1200px） */\n@media (min-width: 1200px) { ... }\n\n```\n\n\n","slug":"js-2017-08-05-screen-wh","published":1,"updated":"2017-09-15T14:59:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8p0008kjxvzfdmrquz","content":"<p><a href=\"https://segmentfault.com/q/1010000004605042\" target=\"_blank\" rel=\"external\">原文：https://segmentfault.com/q/1010000004605042</a></p>\n<h2><span id=\"js\">js</span><a href=\"#js\" class=\"header-anchor\"></a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getScreenInfo</span>(<span class=\"params\"></span>) </span></div><div class=\"line\"><span class=\"function\"></span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">\"\"</span>; </div><div class=\"line\">    s = <span class=\"string\">\" 网页可见区域宽：\"</span> <span class=\"built_in\">document</span>.body.clientWidth; </div><div class=\"line\">    s = <span class=\"string\">\" 网页可见区域高：\"</span> <span class=\"built_in\">document</span>.body.clientHeight; </div><div class=\"line\">    s = <span class=\"string\">\" 网页可见区域宽：\"</span> <span class=\"built_in\">document</span>.body.offsetWidth <span class=\"string\">\" (包括边线和滚动条的宽)\"</span>; </div><div class=\"line\">    s = <span class=\"string\">\" 网页可见区域高：\"</span> <span class=\"built_in\">document</span>.body.offsetHeight <span class=\"string\">\" (包括边线的宽)\"</span>; </div><div class=\"line\">    s = <span class=\"string\">\" 网页正文全文宽：\"</span> <span class=\"built_in\">document</span>.body.scrollWidth; </div><div class=\"line\">    s = <span class=\"string\">\" 网页正文全文高：\"</span> <span class=\"built_in\">document</span>.body.scrollHeight; </div><div class=\"line\">    s = <span class=\"string\">\" 网页被卷去的高(ff)：\"</span> <span class=\"built_in\">document</span>.body.scrollTop; </div><div class=\"line\">    s = <span class=\"string\">\" 网页被卷去的高(ie)：\"</span> <span class=\"built_in\">document</span>.documentElement.scrollTop; </div><div class=\"line\">    s = <span class=\"string\">\" 网页被卷去的左：\"</span> <span class=\"built_in\">document</span>.body.scrollLeft; </div><div class=\"line\">    s = <span class=\"string\">\" 网页正文部分上：\"</span> <span class=\"built_in\">window</span>.screenTop; </div><div class=\"line\">    s = <span class=\"string\">\" 网页正文部分左：\"</span> <span class=\"built_in\">window</span>.screenLeft; </div><div class=\"line\">    s = <span class=\"string\">\" 屏幕分辨率的高：\"</span> <span class=\"built_in\">window</span>.screen.height; </div><div class=\"line\">    s = <span class=\"string\">\" 屏幕分辨率的宽：\"</span> <span class=\"built_in\">window</span>.screen.width; </div><div class=\"line\">    s = <span class=\"string\">\" 屏幕可用工作区高度：\"</span> <span class=\"built_in\">window</span>.screen.availHeight; </div><div class=\"line\">    s = <span class=\"string\">\" 屏幕可用工作区宽度：\"</span> <span class=\"built_in\">window</span>.screen.availWidth;</div><div class=\"line\">    s = <span class=\"string\">\" 你的屏幕设置是 \"</span> <span class=\"built_in\">window</span>.screen.colorDepth <span class=\"string\">\" 位彩色\"</span>; </div><div class=\"line\">    s = <span class=\"string\">\" 你的屏幕设置 \"</span> <span class=\"built_in\">window</span>.screen.deviceXDPI <span class=\"string\">\" 像素/英寸\"</span>; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2><span id=\"css-pan-duan\">css判断</span><a href=\"#css-pan-duan\" class=\"header-anchor\"></a></h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 小屏幕（平板，大于等于 768px） */</span></div><div class=\"line\">@<span class=\"keyword\">media</span> (min-width: <span class=\"number\">768px</span>) &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 中等屏幕（桌面显示器，大于等于 992px） */</span></div><div class=\"line\">@<span class=\"keyword\">media</span> (min-width: <span class=\"number\">992px</span>) &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 大屏幕（大桌面显示器，大于等于 1200px） */</span></div><div class=\"line\">@<span class=\"keyword\">media</span> (min-width: <span class=\"number\">1200px</span>) &#123; ... &#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://segmentfault.com/q/1010000004605042\" target=\"_blank\" rel=\"external\">原文：https://segmentfault.com/q/1010000004605042</a></p>\n<h2 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getScreenInfo</span>(<span class=\"params\"></span>) </span></div><div class=\"line\"><span class=\"function\"></span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">\"\"</span>; </div><div class=\"line\">    s = <span class=\"string\">\" 网页可见区域宽：\"</span> <span class=\"built_in\">document</span>.body.clientWidth; </div><div class=\"line\">    s = <span class=\"string\">\" 网页可见区域高：\"</span> <span class=\"built_in\">document</span>.body.clientHeight; </div><div class=\"line\">    s = <span class=\"string\">\" 网页可见区域宽：\"</span> <span class=\"built_in\">document</span>.body.offsetWidth <span class=\"string\">\" (包括边线和滚动条的宽)\"</span>; </div><div class=\"line\">    s = <span class=\"string\">\" 网页可见区域高：\"</span> <span class=\"built_in\">document</span>.body.offsetHeight <span class=\"string\">\" (包括边线的宽)\"</span>; </div><div class=\"line\">    s = <span class=\"string\">\" 网页正文全文宽：\"</span> <span class=\"built_in\">document</span>.body.scrollWidth; </div><div class=\"line\">    s = <span class=\"string\">\" 网页正文全文高：\"</span> <span class=\"built_in\">document</span>.body.scrollHeight; </div><div class=\"line\">    s = <span class=\"string\">\" 网页被卷去的高(ff)：\"</span> <span class=\"built_in\">document</span>.body.scrollTop; </div><div class=\"line\">    s = <span class=\"string\">\" 网页被卷去的高(ie)：\"</span> <span class=\"built_in\">document</span>.documentElement.scrollTop; </div><div class=\"line\">    s = <span class=\"string\">\" 网页被卷去的左：\"</span> <span class=\"built_in\">document</span>.body.scrollLeft; </div><div class=\"line\">    s = <span class=\"string\">\" 网页正文部分上：\"</span> <span class=\"built_in\">window</span>.screenTop; </div><div class=\"line\">    s = <span class=\"string\">\" 网页正文部分左：\"</span> <span class=\"built_in\">window</span>.screenLeft; </div><div class=\"line\">    s = <span class=\"string\">\" 屏幕分辨率的高：\"</span> <span class=\"built_in\">window</span>.screen.height; </div><div class=\"line\">    s = <span class=\"string\">\" 屏幕分辨率的宽：\"</span> <span class=\"built_in\">window</span>.screen.width; </div><div class=\"line\">    s = <span class=\"string\">\" 屏幕可用工作区高度：\"</span> <span class=\"built_in\">window</span>.screen.availHeight; </div><div class=\"line\">    s = <span class=\"string\">\" 屏幕可用工作区宽度：\"</span> <span class=\"built_in\">window</span>.screen.availWidth;</div><div class=\"line\">    s = <span class=\"string\">\" 你的屏幕设置是 \"</span> <span class=\"built_in\">window</span>.screen.colorDepth <span class=\"string\">\" 位彩色\"</span>; </div><div class=\"line\">    s = <span class=\"string\">\" 你的屏幕设置 \"</span> <span class=\"built_in\">window</span>.screen.deviceXDPI <span class=\"string\">\" 像素/英寸\"</span>; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"css判断\"><a href=\"#css判断\" class=\"headerlink\" title=\"css判断\"></a>css判断</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 小屏幕（平板，大于等于 768px） */</span></div><div class=\"line\">@<span class=\"keyword\">media</span> (min-width: <span class=\"number\">768px</span>) &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 中等屏幕（桌面显示器，大于等于 992px） */</span></div><div class=\"line\">@<span class=\"keyword\">media</span> (min-width: <span class=\"number\">992px</span>) &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 大屏幕（大桌面显示器，大于等于 1200px） */</span></div><div class=\"line\">@<span class=\"keyword\">media</span> (min-width: <span class=\"number\">1200px</span>) &#123; ... &#125;</div></pre></td></tr></table></figure>\n"},{"title":"北京生活","date":"2017-09-05T16:00:00.000Z","_content":"\n\n- [公积金查询](http://www.bjgjj.gov.cn/ywxtgn/201606/t20160623_3924.html)\n- [社保查询](http://www.bjrbj.gov.cn/csibiz/indinfo/login.jsp)\n","source":"_posts/life-2017-09-06-beijing.md","raw":"---\ntitle: 北京生活\ndate: 2017-09-06\ntags:\n---\n\n\n- [公积金查询](http://www.bjgjj.gov.cn/ywxtgn/201606/t20160623_3924.html)\n- [社保查询](http://www.bjrbj.gov.cn/csibiz/indinfo/login.jsp)\n","slug":"life-2017-09-06-beijing","published":1,"updated":"2017-09-15T15:00:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8p0009kjxvvrbm4idx","content":"<ul>\n<li><a href=\"http://www.bjgjj.gov.cn/ywxtgn/201606/t20160623_3924.html\" target=\"_blank\" rel=\"external\">公积金查询</a></li>\n<li><a href=\"http://www.bjrbj.gov.cn/csibiz/indinfo/login.jsp\" target=\"_blank\" rel=\"external\">社保查询</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"http://www.bjgjj.gov.cn/ywxtgn/201606/t20160623_3924.html\" target=\"_blank\" rel=\"external\">公积金查询</a></li>\n<li><a href=\"http://www.bjrbj.gov.cn/csibiz/indinfo/login.jsp\" target=\"_blank\" rel=\"external\">社保查询</a></li>\n</ul>\n"},{"title":"北京不是定点也可以报销的三甲医院","date":"2017-09-05T16:00:00.000Z","_content":"\n\n\n- 中国医学科学院北京协和医院\n- 首都医科大学附属北京同仁医院\n- 首都医科大学宣武医院\n- 首都医科大学附属北京友谊医院\n- 北京大学第一医院\n- 北京大学人民医院\n- 北京大学第三医院\n- 北京积水潭医院\n- 中国中医科学院广安门医院\n- 首都医科大学附属北京朝阳医院\n- 中日友好医院\n- 北京大学首钢医院\n- 首都医科大学附属北京中医医院\n- 首都医科大学附属北京天坛医院\n- 北京世纪坛医院(北京铁路总医院)\n- 北京市健宫医院\n- 北京市房山区良乡医院\n- 北京市大兴区人民医院\n- 北京市石景山医院\n\n除此之外，报销都需要社保指定定点医院，[北京定点医院查询](http://www.bjrbj.gov.cn/LDJAPP/search/ddyy/index_new.jsp)\n","source":"_posts/life-2017-09-06-fixed-point-hospital.md","raw":"---\ntitle: 北京不是定点也可以报销的三甲医院\ndate: 2017-09-06\ntags:\n---\n\n\n\n- 中国医学科学院北京协和医院\n- 首都医科大学附属北京同仁医院\n- 首都医科大学宣武医院\n- 首都医科大学附属北京友谊医院\n- 北京大学第一医院\n- 北京大学人民医院\n- 北京大学第三医院\n- 北京积水潭医院\n- 中国中医科学院广安门医院\n- 首都医科大学附属北京朝阳医院\n- 中日友好医院\n- 北京大学首钢医院\n- 首都医科大学附属北京中医医院\n- 首都医科大学附属北京天坛医院\n- 北京世纪坛医院(北京铁路总医院)\n- 北京市健宫医院\n- 北京市房山区良乡医院\n- 北京市大兴区人民医院\n- 北京市石景山医院\n\n除此之外，报销都需要社保指定定点医院，[北京定点医院查询](http://www.bjrbj.gov.cn/LDJAPP/search/ddyy/index_new.jsp)\n","slug":"life-2017-09-06-fixed-point-hospital","published":1,"updated":"2017-09-15T15:00:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8q000akjxv3hiaao2b","content":"<ul>\n<li>中国医学科学院北京协和医院</li>\n<li>首都医科大学附属北京同仁医院</li>\n<li>首都医科大学宣武医院</li>\n<li>首都医科大学附属北京友谊医院</li>\n<li>北京大学第一医院</li>\n<li>北京大学人民医院</li>\n<li>北京大学第三医院</li>\n<li>北京积水潭医院</li>\n<li>中国中医科学院广安门医院</li>\n<li>首都医科大学附属北京朝阳医院</li>\n<li>中日友好医院</li>\n<li>北京大学首钢医院</li>\n<li>首都医科大学附属北京中医医院</li>\n<li>首都医科大学附属北京天坛医院</li>\n<li>北京世纪坛医院(北京铁路总医院)</li>\n<li>北京市健宫医院</li>\n<li>北京市房山区良乡医院</li>\n<li>北京市大兴区人民医院</li>\n<li>北京市石景山医院</li>\n</ul>\n<p>除此之外，报销都需要社保指定定点医院，<a href=\"http://www.bjrbj.gov.cn/LDJAPP/search/ddyy/index_new.jsp\" target=\"_blank\" rel=\"external\">北京定点医院查询</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>中国医学科学院北京协和医院</li>\n<li>首都医科大学附属北京同仁医院</li>\n<li>首都医科大学宣武医院</li>\n<li>首都医科大学附属北京友谊医院</li>\n<li>北京大学第一医院</li>\n<li>北京大学人民医院</li>\n<li>北京大学第三医院</li>\n<li>北京积水潭医院</li>\n<li>中国中医科学院广安门医院</li>\n<li>首都医科大学附属北京朝阳医院</li>\n<li>中日友好医院</li>\n<li>北京大学首钢医院</li>\n<li>首都医科大学附属北京中医医院</li>\n<li>首都医科大学附属北京天坛医院</li>\n<li>北京世纪坛医院(北京铁路总医院)</li>\n<li>北京市健宫医院</li>\n<li>北京市房山区良乡医院</li>\n<li>北京市大兴区人民医院</li>\n<li>北京市石景山医院</li>\n</ul>\n<p>除此之外，报销都需要社保指定定点医院，<a href=\"http://www.bjrbj.gov.cn/LDJAPP/search/ddyy/index_new.jsp\" target=\"_blank\" rel=\"external\">北京定点医院查询</a></p>\n"},{"title":"Linux 使用nohup在后台不挂断执行命令","date":"2017-08-14T16:00:00.000Z","_content":"\n> nohup搭配 & 来不挂断地运行某条命令达到后台执行的效果，默认会在根目录生成一个 nohup.out 文件用来记录所有的 log 信息，也可以重定向到其他位置。\n\n```bash\n$ nohup gunicorn run:app &\n```\n## 重定向日志到制定文件\n```bash\n$ nohup gunicorn run:app >nohup.log 2>&1 & \n```","source":"_posts/linux-2017-08-15-nohup.md","raw":"---\ntitle: Linux 使用nohup在后台不挂断执行命令\ndate: 2017-08-15\ntags:\n---\n\n> nohup搭配 & 来不挂断地运行某条命令达到后台执行的效果，默认会在根目录生成一个 nohup.out 文件用来记录所有的 log 信息，也可以重定向到其他位置。\n\n```bash\n$ nohup gunicorn run:app &\n```\n## 重定向日志到制定文件\n```bash\n$ nohup gunicorn run:app >nohup.log 2>&1 & \n```","slug":"linux-2017-08-15-nohup","published":1,"updated":"2017-09-15T15:00:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8r000bkjxv5b9vhrei","content":"<blockquote>\n<p>nohup搭配 &amp; 来不挂断地运行某条命令达到后台执行的效果，默认会在根目录生成一个 nohup.out 文件用来记录所有的 log 信息，也可以重定向到其他位置。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nohup gunicorn run:app &amp;</div></pre></td></tr></table></figure>\n<h2><span id=\"chong-ding-xiang-ri-zhi-dao-zhi-ding-wen-jian\">重定向日志到制定文件</span><a href=\"#chong-ding-xiang-ri-zhi-dao-zhi-ding-wen-jian\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nohup gunicorn run:app &gt;nohup.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>nohup搭配 &amp; 来不挂断地运行某条命令达到后台执行的效果，默认会在根目录生成一个 nohup.out 文件用来记录所有的 log 信息，也可以重定向到其他位置。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nohup gunicorn run:app &amp;</div></pre></td></tr></table></figure>\n<h2 id=\"重定向日志到制定文件\"><a href=\"#重定向日志到制定文件\" class=\"headerlink\" title=\"重定向日志到制定文件\"></a>重定向日志到制定文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nohup gunicorn run:app &gt;nohup.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>"},{"title":"Linux curl使用指南","date":"2017-08-15T16:00:00.000Z","_content":"\n原文: [http://www.ruanyifeng.com/blog/2011/09/curl.html](http://www.ruanyifeng.com/blog/2011/09/curl.html)\n\n>  curl是一种命令行工具，作用是发出网络请求，然后得到和提取数据，显示在\"标准输出\"（stdout）上面。\n\n## 查看网页源码\n```bash\n$ curl baidu.com\n```\n```html\n<html>\n<meta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com/\">\n</html>\n```\n如果要把这个网页保存下来，可以使用`-o`或`--output`参数，这就相当于使用wget命令了。\n```bash\n$ curl -o file_name baidu.com\n```\n\n## 自动跳转\n有的网址是自动跳转的。使用`-L`或`--location`参数，curl就会跳转到新的网址。\n```bash\n$ curl -L baidu.com\n```\n\n## 显示头信息\n`-i`或`--include`参数可以显示http response的头信息，连同网页代码一起。 `-I`或`--head`参数则是只显示http response的头信息。\n```bash\n$ curl -i baidu.com\n```\n```html\nHTTP/1.1 200 OK\nDate: Wed, 16 Aug 2017 08:21:49 GMT\nServer: Apache\nLast-Modified: Tue, 12 Jan 2010 13:48:00 GMT\nETag: \"51-47cf7e6ee8400\"\nAccept-Ranges: bytes\nContent-Length: 81\nCache-Control: max-age=86400\nExpires: Thu, 17 Aug 2017 08:21:49 GMT\nConnection: Keep-Alive\nContent-Type: text/html\n\n<html>\n<meta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com/\">\n</html>\n\n```\n\n## 显示通信过程\n`-v`或`--verbose`参数可以显示一次http通信的整个过程，包括端口连接和http request头信息。\n```bash\n$ curl -v baidu.com\n```\n```html\n* Rebuilt URL to: baidu.com/\n*   Trying 220.181.57.217...\n* Connected to baidu.com (220.181.57.217) port 80 (#0)\n> GET / HTTP/1.1\n> Host: baidu.com\n> User-Agent: curl/7.43.0\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Date: Wed, 16 Aug 2017 08:24:49 GMT\n< Server: Apache\n< Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT\n< ETag: \"51-47cf7e6ee8400\"\n< Accept-Ranges: bytes\n< Content-Length: 81\n< Cache-Control: max-age=86400\n< Expires: Thu, 17 Aug 2017 08:24:49 GMT\n< Connection: Keep-Alive\n< Content-Type: text/html\n<\n<html>\n<meta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com/\">\n</html>\n* Connection #0 to host baidu.com left intact\n```\n也可以通过`--trace`或`--trace-ascii`命令查看更详细通信过程，执行后通过制定的日志地址查看\n```bash\n$ curl --trace ${log_path} baidu.com\n$ curl --trace-ascii ${log_path} baidu.com\n```\n## HTTP动词\ncurl默认的HTTP动词是GET，使用`-X`参数可以支持其他动词。\n\n```bash\n$ curl -X POST baidu.com\n```\n\n## 增加头信息\n```bash\n$ curl localhost:8002/test -H \"Content-Type:application/json\" # 使用-H 或 --header 可以起到这个作用\n```\n\n## 发送表单信息\n```bash\n$ curl localhost:8002/test?data=xxx # GET方法比较简单，网址后直接跟参数\n$ curl -X POST localhost:8002/test --data \"name=xxx\" --data \"password=xxx\" # POST方法通过--data或-d参数实现\n$ curl -X POST localhost:8002/test -H \"Content-Type:application/x-www-form-urlencoded\" -d \"name=win\"\n$ curl -X POST localhost:8002/test -H \"Content-Type:application/json\" -d '{\"name\":\"wxnacy\"}' # 使用application/json 提交json数据\n$ curl -X POST localhost:8002/test --data-urlencode \"data=1 2\" #如果你的数据没有经过表单编码，还可以让curl为你编码，参数是`--data-urlencode`。\n```\n\n## 文件上传\n```bash\n$ curl --form upload_field=@localfilename localhost:8002/test\n$ curl --form \"upload_field=@new.txt;type=text/plain\" localhost:8002/test\n```\n\n## Referer字段\n需要添加request头信息referer标示从哪里跳转来的\n```bash\n$ curl localhost:8002/test --referer ${from_url} \n```\n## user-agent字段\n使用`--user-agent`或`-A`可以模拟发送user-agent字段\n```bash\n$ curl localhost:8002/test --user-agent \"device\"\n```\n## cookie\n```bash\n$ curl localhost:8002/test --cookie \"name=ss\" # 发送的cookie可以在response headers中看到\n$ curl localhost:8002/test -c ${cookie_file} # -c 可以保存服务器返回的cookies到文件中\n$ curl localhost:8002/test -b ${cookie_file} # -b 可以使用这个文件作为cookie信息，进行后续的请求。\n```\n\n\n\n## HTTP认证\n有些网域需要HTTP认证，这时curl需要用到`--user`或 `-u`参数。\n```bash\n$ curl localhost:8002/test --user name:apss # 这时候服务器会在头信息中接收到Authorization字段，值为Basic + name:pass的base64加密数值\n```\n\n\n","source":"_posts/linux-2017-08-16-curl.md","raw":"---\ntitle: Linux curl使用指南\ndate: 2017-08-16\ntags:\n---\n\n原文: [http://www.ruanyifeng.com/blog/2011/09/curl.html](http://www.ruanyifeng.com/blog/2011/09/curl.html)\n\n>  curl是一种命令行工具，作用是发出网络请求，然后得到和提取数据，显示在\"标准输出\"（stdout）上面。\n\n## 查看网页源码\n```bash\n$ curl baidu.com\n```\n```html\n<html>\n<meta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com/\">\n</html>\n```\n如果要把这个网页保存下来，可以使用`-o`或`--output`参数，这就相当于使用wget命令了。\n```bash\n$ curl -o file_name baidu.com\n```\n\n## 自动跳转\n有的网址是自动跳转的。使用`-L`或`--location`参数，curl就会跳转到新的网址。\n```bash\n$ curl -L baidu.com\n```\n\n## 显示头信息\n`-i`或`--include`参数可以显示http response的头信息，连同网页代码一起。 `-I`或`--head`参数则是只显示http response的头信息。\n```bash\n$ curl -i baidu.com\n```\n```html\nHTTP/1.1 200 OK\nDate: Wed, 16 Aug 2017 08:21:49 GMT\nServer: Apache\nLast-Modified: Tue, 12 Jan 2010 13:48:00 GMT\nETag: \"51-47cf7e6ee8400\"\nAccept-Ranges: bytes\nContent-Length: 81\nCache-Control: max-age=86400\nExpires: Thu, 17 Aug 2017 08:21:49 GMT\nConnection: Keep-Alive\nContent-Type: text/html\n\n<html>\n<meta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com/\">\n</html>\n\n```\n\n## 显示通信过程\n`-v`或`--verbose`参数可以显示一次http通信的整个过程，包括端口连接和http request头信息。\n```bash\n$ curl -v baidu.com\n```\n```html\n* Rebuilt URL to: baidu.com/\n*   Trying 220.181.57.217...\n* Connected to baidu.com (220.181.57.217) port 80 (#0)\n> GET / HTTP/1.1\n> Host: baidu.com\n> User-Agent: curl/7.43.0\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Date: Wed, 16 Aug 2017 08:24:49 GMT\n< Server: Apache\n< Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT\n< ETag: \"51-47cf7e6ee8400\"\n< Accept-Ranges: bytes\n< Content-Length: 81\n< Cache-Control: max-age=86400\n< Expires: Thu, 17 Aug 2017 08:24:49 GMT\n< Connection: Keep-Alive\n< Content-Type: text/html\n<\n<html>\n<meta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com/\">\n</html>\n* Connection #0 to host baidu.com left intact\n```\n也可以通过`--trace`或`--trace-ascii`命令查看更详细通信过程，执行后通过制定的日志地址查看\n```bash\n$ curl --trace ${log_path} baidu.com\n$ curl --trace-ascii ${log_path} baidu.com\n```\n## HTTP动词\ncurl默认的HTTP动词是GET，使用`-X`参数可以支持其他动词。\n\n```bash\n$ curl -X POST baidu.com\n```\n\n## 增加头信息\n```bash\n$ curl localhost:8002/test -H \"Content-Type:application/json\" # 使用-H 或 --header 可以起到这个作用\n```\n\n## 发送表单信息\n```bash\n$ curl localhost:8002/test?data=xxx # GET方法比较简单，网址后直接跟参数\n$ curl -X POST localhost:8002/test --data \"name=xxx\" --data \"password=xxx\" # POST方法通过--data或-d参数实现\n$ curl -X POST localhost:8002/test -H \"Content-Type:application/x-www-form-urlencoded\" -d \"name=win\"\n$ curl -X POST localhost:8002/test -H \"Content-Type:application/json\" -d '{\"name\":\"wxnacy\"}' # 使用application/json 提交json数据\n$ curl -X POST localhost:8002/test --data-urlencode \"data=1 2\" #如果你的数据没有经过表单编码，还可以让curl为你编码，参数是`--data-urlencode`。\n```\n\n## 文件上传\n```bash\n$ curl --form upload_field=@localfilename localhost:8002/test\n$ curl --form \"upload_field=@new.txt;type=text/plain\" localhost:8002/test\n```\n\n## Referer字段\n需要添加request头信息referer标示从哪里跳转来的\n```bash\n$ curl localhost:8002/test --referer ${from_url} \n```\n## user-agent字段\n使用`--user-agent`或`-A`可以模拟发送user-agent字段\n```bash\n$ curl localhost:8002/test --user-agent \"device\"\n```\n## cookie\n```bash\n$ curl localhost:8002/test --cookie \"name=ss\" # 发送的cookie可以在response headers中看到\n$ curl localhost:8002/test -c ${cookie_file} # -c 可以保存服务器返回的cookies到文件中\n$ curl localhost:8002/test -b ${cookie_file} # -b 可以使用这个文件作为cookie信息，进行后续的请求。\n```\n\n\n\n## HTTP认证\n有些网域需要HTTP认证，这时curl需要用到`--user`或 `-u`参数。\n```bash\n$ curl localhost:8002/test --user name:apss # 这时候服务器会在头信息中接收到Authorization字段，值为Basic + name:pass的base64加密数值\n```\n\n\n","slug":"linux-2017-08-16-curl","published":1,"updated":"2017-09-15T15:01:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8s000ckjxv6lnly7ie","content":"<p>原文: <a href=\"http://www.ruanyifeng.com/blog/2011/09/curl.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2011/09/curl.html</a></p>\n<blockquote>\n<p> curl是一种命令行工具，作用是发出网络请求，然后得到和提取数据，显示在”标准输出”（stdout）上面。</p>\n</blockquote>\n<h2><span id=\"cha-kan-wang-ye-yuan-ma\">查看网页源码</span><a href=\"#cha-kan-wang-ye-yuan-ma\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl baidu.com</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"0;url=http://www.baidu.com/\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果要把这个网页保存下来，可以使用<code>-o</code>或<code>--output</code>参数，这就相当于使用wget命令了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -o file_name baidu.com</div></pre></td></tr></table></figure></p>\n<h2><span id=\"zi-dong-tiao-zhuan\">自动跳转</span><a href=\"#zi-dong-tiao-zhuan\" class=\"header-anchor\"></a></h2><p>有的网址是自动跳转的。使用<code>-L</code>或<code>--location</code>参数，curl就会跳转到新的网址。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -L baidu.com</div></pre></td></tr></table></figure></p>\n<h2><span id=\"xian-shi-tou-xin-xi\">显示头信息</span><a href=\"#xian-shi-tou-xin-xi\" class=\"header-anchor\"></a></h2><p><code>-i</code>或<code>--include</code>参数可以显示http response的头信息，连同网页代码一起。 <code>-I</code>或<code>--head</code>参数则是只显示http response的头信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i baidu.com</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 200 OK</div><div class=\"line\">Date: Wed, 16 Aug 2017 08:21:49 GMT</div><div class=\"line\">Server: Apache</div><div class=\"line\">Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT</div><div class=\"line\">ETag: \"51-47cf7e6ee8400\"</div><div class=\"line\">Accept-Ranges: bytes</div><div class=\"line\">Content-Length: 81</div><div class=\"line\">Cache-Control: max-age=86400</div><div class=\"line\">Expires: Thu, 17 Aug 2017 08:21:49 GMT</div><div class=\"line\">Connection: Keep-Alive</div><div class=\"line\">Content-Type: text/html</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"0;url=http://www.baidu.com/\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2><span id=\"xian-shi-tong-xin-guo-cheng\">显示通信过程</span><a href=\"#xian-shi-tong-xin-guo-cheng\" class=\"header-anchor\"></a></h2><p><code>-v</code>或<code>--verbose</code>参数可以显示一次http通信的整个过程，包括端口连接和http request头信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -v baidu.com</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">* Rebuilt URL to: baidu.com/</div><div class=\"line\">*   Trying 220.181.57.217...</div><div class=\"line\">* Connected to baidu.com (220.181.57.217) port 80 (#0)</div><div class=\"line\">&gt; GET / HTTP/1.1</div><div class=\"line\">&gt; Host: baidu.com</div><div class=\"line\">&gt; User-Agent: curl/7.43.0</div><div class=\"line\">&gt; Accept: */*</div><div class=\"line\">&gt;</div><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">HTTP</span>/<span class=\"attr\">1.1</span> <span class=\"attr\">200</span> <span class=\"attr\">OK</span></span></div><div class=\"line\">&lt; Date: Wed, 16 Aug 2017 08:24:49 GMT</div><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">Server:</span> <span class=\"attr\">Apache</span></span></div><div class=\"line\">&lt; Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT</div><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">ETag:</span> \"<span class=\"attr\">51-47cf7e6ee8400</span>\"</span></div><div class=\"line\">&lt; Accept-Ranges: bytes</div><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">Content-Length:</span> <span class=\"attr\">81</span></span></div><div class=\"line\">&lt; Cache-Control: max-age=86400</div><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">Expires:</span> <span class=\"attr\">Thu</span>, <span class=\"attr\">17</span> <span class=\"attr\">Aug</span> <span class=\"attr\">2017</span> <span class=\"attr\">08:24:49</span> <span class=\"attr\">GMT</span></span></div><div class=\"line\">&lt; Connection: Keep-Alive</div><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">Content-Type:</span> <span class=\"attr\">text</span>/<span class=\"attr\">html</span></span></div><div class=\"line\">&lt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"0;url=http://www.baidu.com/\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">* Connection #0 to host baidu.com left intact</div></pre></td></tr></table></figure>\n<p>也可以通过<code>--trace</code>或<code>--trace-ascii</code>命令查看更详细通信过程，执行后通过制定的日志地址查看<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl --trace <span class=\"variable\">$&#123;log_path&#125;</span> baidu.com</div><div class=\"line\">$ curl --trace-ascii <span class=\"variable\">$&#123;log_path&#125;</span> baidu.com</div></pre></td></tr></table></figure></p>\n<h2><span id=\"http-dong-ci\">HTTP动词</span><a href=\"#http-dong-ci\" class=\"header-anchor\"></a></h2><p>curl默认的HTTP动词是GET，使用<code>-X</code>参数可以支持其他动词。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -X POST baidu.com</div></pre></td></tr></table></figure>\n<h2><span id=\"zeng-jia-tou-xin-xi\">增加头信息</span><a href=\"#zeng-jia-tou-xin-xi\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span> -H <span class=\"string\">\"Content-Type:application/json\"</span> <span class=\"comment\"># 使用-H 或 --header 可以起到这个作用</span></div></pre></td></tr></table></figure>\n<h2><span id=\"fa-song-biao-dan-xin-xi\">发送表单信息</span><a href=\"#fa-song-biao-dan-xin-xi\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span>?data=xxx <span class=\"comment\"># GET方法比较简单，网址后直接跟参数</span></div><div class=\"line\">$ curl -X POST localhost:8002/<span class=\"built_in\">test</span> --data <span class=\"string\">\"name=xxx\"</span> --data <span class=\"string\">\"password=xxx\"</span> <span class=\"comment\"># POST方法通过--data或-d参数实现</span></div><div class=\"line\">$ curl -X POST localhost:8002/<span class=\"built_in\">test</span> -H <span class=\"string\">\"Content-Type:application/x-www-form-urlencoded\"</span> -d <span class=\"string\">\"name=win\"</span></div><div class=\"line\">$ curl -X POST localhost:8002/<span class=\"built_in\">test</span> -H <span class=\"string\">\"Content-Type:application/json\"</span> -d <span class=\"string\">'&#123;\"name\":\"wxnacy\"&#125;'</span> <span class=\"comment\"># 使用application/json 提交json数据</span></div><div class=\"line\">$ curl -X POST localhost:8002/<span class=\"built_in\">test</span> --data-urlencode <span class=\"string\">\"data=1 2\"</span> <span class=\"comment\">#如果你的数据没有经过表单编码，还可以让curl为你编码，参数是`--data-urlencode`。</span></div></pre></td></tr></table></figure>\n<h2><span id=\"wen-jian-shang-chuan\">文件上传</span><a href=\"#wen-jian-shang-chuan\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl --form upload_field=@localfilename localhost:8002/<span class=\"built_in\">test</span></div><div class=\"line\">$ curl --form <span class=\"string\">\"upload_field=@new.txt;type=text/plain\"</span> localhost:8002/<span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n<h2><span id=\"referer-zi-duan\">Referer字段</span><a href=\"#referer-zi-duan\" class=\"header-anchor\"></a></h2><p>需要添加request头信息referer标示从哪里跳转来的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span> --referer <span class=\"variable\">$&#123;from_url&#125;</span></div></pre></td></tr></table></figure></p>\n<h2><span id=\"user-agent-zi-duan\">user-agent字段</span><a href=\"#user-agent-zi-duan\" class=\"header-anchor\"></a></h2><p>使用<code>--user-agent</code>或<code>-A</code>可以模拟发送user-agent字段<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span> --user-agent <span class=\"string\">\"device\"</span></div></pre></td></tr></table></figure></p>\n<h2><span id=\"cookie\">cookie</span><a href=\"#cookie\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span> --cookie <span class=\"string\">\"name=ss\"</span> <span class=\"comment\"># 发送的cookie可以在response headers中看到</span></div><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span> -c <span class=\"variable\">$&#123;cookie_file&#125;</span> <span class=\"comment\"># -c 可以保存服务器返回的cookies到文件中</span></div><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span> -b <span class=\"variable\">$&#123;cookie_file&#125;</span> <span class=\"comment\"># -b 可以使用这个文件作为cookie信息，进行后续的请求。</span></div></pre></td></tr></table></figure>\n<h2><span id=\"http-ren-zheng\">HTTP认证</span><a href=\"#http-ren-zheng\" class=\"header-anchor\"></a></h2><p>有些网域需要HTTP认证，这时curl需要用到<code>--user</code>或 <code>-u</code>参数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span> --user name:apss <span class=\"comment\"># 这时候服务器会在头信息中接收到Authorization字段，值为Basic + name:pass的base64加密数值</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文: <a href=\"http://www.ruanyifeng.com/blog/2011/09/curl.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2011/09/curl.html</a></p>\n<blockquote>\n<p> curl是一种命令行工具，作用是发出网络请求，然后得到和提取数据，显示在”标准输出”（stdout）上面。</p>\n</blockquote>\n<h2 id=\"查看网页源码\"><a href=\"#查看网页源码\" class=\"headerlink\" title=\"查看网页源码\"></a>查看网页源码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl baidu.com</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"0;url=http://www.baidu.com/\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果要把这个网页保存下来，可以使用<code>-o</code>或<code>--output</code>参数，这就相当于使用wget命令了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -o file_name baidu.com</div></pre></td></tr></table></figure></p>\n<h2 id=\"自动跳转\"><a href=\"#自动跳转\" class=\"headerlink\" title=\"自动跳转\"></a>自动跳转</h2><p>有的网址是自动跳转的。使用<code>-L</code>或<code>--location</code>参数，curl就会跳转到新的网址。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -L baidu.com</div></pre></td></tr></table></figure></p>\n<h2 id=\"显示头信息\"><a href=\"#显示头信息\" class=\"headerlink\" title=\"显示头信息\"></a>显示头信息</h2><p><code>-i</code>或<code>--include</code>参数可以显示http response的头信息，连同网页代码一起。 <code>-I</code>或<code>--head</code>参数则是只显示http response的头信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i baidu.com</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 200 OK</div><div class=\"line\">Date: Wed, 16 Aug 2017 08:21:49 GMT</div><div class=\"line\">Server: Apache</div><div class=\"line\">Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT</div><div class=\"line\">ETag: \"51-47cf7e6ee8400\"</div><div class=\"line\">Accept-Ranges: bytes</div><div class=\"line\">Content-Length: 81</div><div class=\"line\">Cache-Control: max-age=86400</div><div class=\"line\">Expires: Thu, 17 Aug 2017 08:21:49 GMT</div><div class=\"line\">Connection: Keep-Alive</div><div class=\"line\">Content-Type: text/html</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"0;url=http://www.baidu.com/\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"显示通信过程\"><a href=\"#显示通信过程\" class=\"headerlink\" title=\"显示通信过程\"></a>显示通信过程</h2><p><code>-v</code>或<code>--verbose</code>参数可以显示一次http通信的整个过程，包括端口连接和http request头信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -v baidu.com</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">* Rebuilt URL to: baidu.com/</div><div class=\"line\">*   Trying 220.181.57.217...</div><div class=\"line\">* Connected to baidu.com (220.181.57.217) port 80 (#0)</div><div class=\"line\">&gt; GET / HTTP/1.1</div><div class=\"line\">&gt; Host: baidu.com</div><div class=\"line\">&gt; User-Agent: curl/7.43.0</div><div class=\"line\">&gt; Accept: */*</div><div class=\"line\">&gt;</div><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">HTTP</span>/<span class=\"attr\">1.1</span> <span class=\"attr\">200</span> <span class=\"attr\">OK</span></span></div><div class=\"line\">&lt; Date: Wed, 16 Aug 2017 08:24:49 GMT</div><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">Server:</span> <span class=\"attr\">Apache</span></span></div><div class=\"line\">&lt; Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT</div><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">ETag:</span> \"<span class=\"attr\">51-47cf7e6ee8400</span>\"</span></div><div class=\"line\">&lt; Accept-Ranges: bytes</div><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">Content-Length:</span> <span class=\"attr\">81</span></span></div><div class=\"line\">&lt; Cache-Control: max-age=86400</div><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">Expires:</span> <span class=\"attr\">Thu</span>, <span class=\"attr\">17</span> <span class=\"attr\">Aug</span> <span class=\"attr\">2017</span> <span class=\"attr\">08:24:49</span> <span class=\"attr\">GMT</span></span></div><div class=\"line\">&lt; Connection: Keep-Alive</div><div class=\"line\"><span class=\"tag\">&lt; <span class=\"attr\">Content-Type:</span> <span class=\"attr\">text</span>/<span class=\"attr\">html</span></span></div><div class=\"line\">&lt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"0;url=http://www.baidu.com/\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">* Connection #0 to host baidu.com left intact</div></pre></td></tr></table></figure>\n<p>也可以通过<code>--trace</code>或<code>--trace-ascii</code>命令查看更详细通信过程，执行后通过制定的日志地址查看<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl --trace <span class=\"variable\">$&#123;log_path&#125;</span> baidu.com</div><div class=\"line\">$ curl --trace-ascii <span class=\"variable\">$&#123;log_path&#125;</span> baidu.com</div></pre></td></tr></table></figure></p>\n<h2 id=\"HTTP动词\"><a href=\"#HTTP动词\" class=\"headerlink\" title=\"HTTP动词\"></a>HTTP动词</h2><p>curl默认的HTTP动词是GET，使用<code>-X</code>参数可以支持其他动词。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -X POST baidu.com</div></pre></td></tr></table></figure>\n<h2 id=\"增加头信息\"><a href=\"#增加头信息\" class=\"headerlink\" title=\"增加头信息\"></a>增加头信息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span> -H <span class=\"string\">\"Content-Type:application/json\"</span> <span class=\"comment\"># 使用-H 或 --header 可以起到这个作用</span></div></pre></td></tr></table></figure>\n<h2 id=\"发送表单信息\"><a href=\"#发送表单信息\" class=\"headerlink\" title=\"发送表单信息\"></a>发送表单信息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span>?data=xxx <span class=\"comment\"># GET方法比较简单，网址后直接跟参数</span></div><div class=\"line\">$ curl -X POST localhost:8002/<span class=\"built_in\">test</span> --data <span class=\"string\">\"name=xxx\"</span> --data <span class=\"string\">\"password=xxx\"</span> <span class=\"comment\"># POST方法通过--data或-d参数实现</span></div><div class=\"line\">$ curl -X POST localhost:8002/<span class=\"built_in\">test</span> -H <span class=\"string\">\"Content-Type:application/x-www-form-urlencoded\"</span> -d <span class=\"string\">\"name=win\"</span></div><div class=\"line\">$ curl -X POST localhost:8002/<span class=\"built_in\">test</span> -H <span class=\"string\">\"Content-Type:application/json\"</span> -d <span class=\"string\">'&#123;\"name\":\"wxnacy\"&#125;'</span> <span class=\"comment\"># 使用application/json 提交json数据</span></div><div class=\"line\">$ curl -X POST localhost:8002/<span class=\"built_in\">test</span> --data-urlencode <span class=\"string\">\"data=1 2\"</span> <span class=\"comment\">#如果你的数据没有经过表单编码，还可以让curl为你编码，参数是`--data-urlencode`。</span></div></pre></td></tr></table></figure>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl --form upload_field=@localfilename localhost:8002/<span class=\"built_in\">test</span></div><div class=\"line\">$ curl --form <span class=\"string\">\"upload_field=@new.txt;type=text/plain\"</span> localhost:8002/<span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n<h2 id=\"Referer字段\"><a href=\"#Referer字段\" class=\"headerlink\" title=\"Referer字段\"></a>Referer字段</h2><p>需要添加request头信息referer标示从哪里跳转来的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span> --referer <span class=\"variable\">$&#123;from_url&#125;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"user-agent字段\"><a href=\"#user-agent字段\" class=\"headerlink\" title=\"user-agent字段\"></a>user-agent字段</h2><p>使用<code>--user-agent</code>或<code>-A</code>可以模拟发送user-agent字段<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span> --user-agent <span class=\"string\">\"device\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span> --cookie <span class=\"string\">\"name=ss\"</span> <span class=\"comment\"># 发送的cookie可以在response headers中看到</span></div><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span> -c <span class=\"variable\">$&#123;cookie_file&#125;</span> <span class=\"comment\"># -c 可以保存服务器返回的cookies到文件中</span></div><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span> -b <span class=\"variable\">$&#123;cookie_file&#125;</span> <span class=\"comment\"># -b 可以使用这个文件作为cookie信息，进行后续的请求。</span></div></pre></td></tr></table></figure>\n<h2 id=\"HTTP认证\"><a href=\"#HTTP认证\" class=\"headerlink\" title=\"HTTP认证\"></a>HTTP认证</h2><p>有些网域需要HTTP认证，这时curl需要用到<code>--user</code>或 <code>-u</code>参数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl localhost:8002/<span class=\"built_in\">test</span> --user name:apss <span class=\"comment\"># 这时候服务器会在头信息中接收到Authorization字段，值为Basic + name:pass的base64加密数值</span></div></pre></td></tr></table></figure></p>\n"},{"title":"Linux CentOS 各个版本启动SSHD服务命令","date":"2017-08-21T16:00:00.000Z","_content":"\n\n> 本篇介绍如何在 CentOS 系统中怎样启动sshd服务，如何开机自启\n\n## 命令概况\n\nCentOS < 7.x\n```bash\nservice command # 使用service命令做start|stop|restart sshd\nchkconfig command # turn on or off 机器自启sshd\n```\n\nCentOS >= 7.x\n```bash\nsystemctl command # 管理 start|stop|start 自启sshd\n```\n\n## CentOS < 7.x\n\n### chkconfig\n```bash\n$ chkconfig sshd on # 开机自启sshd\n$ chkconfig sshd off # 开机关闭自启sshd\n$ chkconfig --list sshd # 查看每个运行级别类型中服务的当前状态 \n```\n\n### service\n\n```bash\n$ service sshd start | stop | restart\nor \n$ /etc/init.d/sshd start | stop | restart\n```\n\n## CentOS >= 7.x\n\n```bash\n$ systemctl enable sshd.service # 开机自启sshd\n$ systemctl disable sshd.service # 开机关闭自启sshd\n$ systemctl start sshd.service # 启动sshd\n$ systemctl restart sshd.service # 重启\n$ systemctl stop sshd.service # 停止\n$ systemctl reload sshd.service # 重新加载\n$ systemctl status sshd.service # 查看启动状态\n```\n","source":"_posts/linux-2017-08-22-centos-start-stop-restart-sshd.md","raw":"---\ntitle: Linux CentOS 各个版本启动SSHD服务命令\ndate: 2017-08-22\ntags:\n---\n\n\n> 本篇介绍如何在 CentOS 系统中怎样启动sshd服务，如何开机自启\n\n## 命令概况\n\nCentOS < 7.x\n```bash\nservice command # 使用service命令做start|stop|restart sshd\nchkconfig command # turn on or off 机器自启sshd\n```\n\nCentOS >= 7.x\n```bash\nsystemctl command # 管理 start|stop|start 自启sshd\n```\n\n## CentOS < 7.x\n\n### chkconfig\n```bash\n$ chkconfig sshd on # 开机自启sshd\n$ chkconfig sshd off # 开机关闭自启sshd\n$ chkconfig --list sshd # 查看每个运行级别类型中服务的当前状态 \n```\n\n### service\n\n```bash\n$ service sshd start | stop | restart\nor \n$ /etc/init.d/sshd start | stop | restart\n```\n\n## CentOS >= 7.x\n\n```bash\n$ systemctl enable sshd.service # 开机自启sshd\n$ systemctl disable sshd.service # 开机关闭自启sshd\n$ systemctl start sshd.service # 启动sshd\n$ systemctl restart sshd.service # 重启\n$ systemctl stop sshd.service # 停止\n$ systemctl reload sshd.service # 重新加载\n$ systemctl status sshd.service # 查看启动状态\n```\n","slug":"linux-2017-08-22-centos-start-stop-restart-sshd","published":1,"updated":"2017-09-15T15:01:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8t000dkjxvhl0n044q","content":"<blockquote>\n<p>本篇介绍如何在 CentOS 系统中怎样启动sshd服务，如何开机自启</p>\n</blockquote>\n<h2><span id=\"ming-ling-gai-kuang\">命令概况</span><a href=\"#ming-ling-gai-kuang\" class=\"header-anchor\"></a></h2><p>CentOS &lt; 7.x<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">service <span class=\"built_in\">command</span> <span class=\"comment\"># 使用service命令做start|stop|restart sshd</span></div><div class=\"line\">chkconfig <span class=\"built_in\">command</span> <span class=\"comment\"># turn on or off 机器自启sshd</span></div></pre></td></tr></table></figure></p>\n<p>CentOS &gt;= 7.x<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl <span class=\"built_in\">command</span> <span class=\"comment\"># 管理 start|stop|start 自启sshd</span></div></pre></td></tr></table></figure></p>\n<h2><span id=\"centos-lt-7-x\">CentOS &lt; 7.x</span><a href=\"#centos-lt-7-x\" class=\"header-anchor\"></a></h2><h3><span id=\"chkconfig\">chkconfig</span><a href=\"#chkconfig\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chkconfig sshd on <span class=\"comment\"># 开机自启sshd</span></div><div class=\"line\">$ chkconfig sshd off <span class=\"comment\"># 开机关闭自启sshd</span></div><div class=\"line\">$ chkconfig --list sshd <span class=\"comment\"># 查看每个运行级别类型中服务的当前状态</span></div></pre></td></tr></table></figure>\n<h3><span id=\"service\">service</span><a href=\"#service\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ service sshd start | stop | restart</div><div class=\"line\">or </div><div class=\"line\">$ /etc/init.d/sshd start | stop | restart</div></pre></td></tr></table></figure>\n<h2><span id=\"centos-gt-7-x\">CentOS &gt;= 7.x</span><a href=\"#centos-gt-7-x\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ systemctl <span class=\"built_in\">enable</span> sshd.service <span class=\"comment\"># 开机自启sshd</span></div><div class=\"line\">$ systemctl <span class=\"built_in\">disable</span> sshd.service <span class=\"comment\"># 开机关闭自启sshd</span></div><div class=\"line\">$ systemctl start sshd.service <span class=\"comment\"># 启动sshd</span></div><div class=\"line\">$ systemctl restart sshd.service <span class=\"comment\"># 重启</span></div><div class=\"line\">$ systemctl stop sshd.service <span class=\"comment\"># 停止</span></div><div class=\"line\">$ systemctl reload sshd.service <span class=\"comment\"># 重新加载</span></div><div class=\"line\">$ systemctl status sshd.service <span class=\"comment\"># 查看启动状态</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本篇介绍如何在 CentOS 系统中怎样启动sshd服务，如何开机自启</p>\n</blockquote>\n<h2 id=\"命令概况\"><a href=\"#命令概况\" class=\"headerlink\" title=\"命令概况\"></a>命令概况</h2><p>CentOS &lt; 7.x<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">service <span class=\"built_in\">command</span> <span class=\"comment\"># 使用service命令做start|stop|restart sshd</span></div><div class=\"line\">chkconfig <span class=\"built_in\">command</span> <span class=\"comment\"># turn on or off 机器自启sshd</span></div></pre></td></tr></table></figure></p>\n<p>CentOS &gt;= 7.x<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl <span class=\"built_in\">command</span> <span class=\"comment\"># 管理 start|stop|start 自启sshd</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"CentOS-lt-7-x\"><a href=\"#CentOS-lt-7-x\" class=\"headerlink\" title=\"CentOS &lt; 7.x\"></a>CentOS &lt; 7.x</h2><h3 id=\"chkconfig\"><a href=\"#chkconfig\" class=\"headerlink\" title=\"chkconfig\"></a>chkconfig</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chkconfig sshd on <span class=\"comment\"># 开机自启sshd</span></div><div class=\"line\">$ chkconfig sshd off <span class=\"comment\"># 开机关闭自启sshd</span></div><div class=\"line\">$ chkconfig --list sshd <span class=\"comment\"># 查看每个运行级别类型中服务的当前状态</span></div></pre></td></tr></table></figure>\n<h3 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ service sshd start | stop | restart</div><div class=\"line\">or </div><div class=\"line\">$ /etc/init.d/sshd start | stop | restart</div></pre></td></tr></table></figure>\n<h2 id=\"CentOS-gt-7-x\"><a href=\"#CentOS-gt-7-x\" class=\"headerlink\" title=\"CentOS &gt;= 7.x\"></a>CentOS &gt;= 7.x</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ systemctl <span class=\"built_in\">enable</span> sshd.service <span class=\"comment\"># 开机自启sshd</span></div><div class=\"line\">$ systemctl <span class=\"built_in\">disable</span> sshd.service <span class=\"comment\"># 开机关闭自启sshd</span></div><div class=\"line\">$ systemctl start sshd.service <span class=\"comment\"># 启动sshd</span></div><div class=\"line\">$ systemctl restart sshd.service <span class=\"comment\"># 重启</span></div><div class=\"line\">$ systemctl stop sshd.service <span class=\"comment\"># 停止</span></div><div class=\"line\">$ systemctl reload sshd.service <span class=\"comment\"># 重新加载</span></div><div class=\"line\">$ systemctl status sshd.service <span class=\"comment\"># 查看启动状态</span></div></pre></td></tr></table></figure>\n"},{"title":"Linux 远程文件传输 SFTP 和 SCP","date":"2017-08-21T16:00:00.000Z","_content":"\n\n> 熟悉linux的朋友都知道 SSH 可以登录远程服务器进行工作，但是如果想从远程服务器下载文件或上传到服务器呢，ssh就做不到了，这时候我们可以用sftp和scp完成任务，这两个指令也是使用 SSH 的通道（Port 22），只是模拟 FTP 与复制的操作而已。下面我们一一介绍.\n\n## SFTP\n\nSFTP 登陆主机和 SSH 一样，也是用 用户名@主机名的方式连接\n```bash\n$ sftp root@localhost\nroot@localhost's password: # 输入密码\nsftp> exit # 输入FTP 相关命令\n```\n\n进入主机后，就与一般 FTP 模式下操作方式一样了！下面是具体可用命令:\n### 远程服务器\n```bash\n# 切换某个目录\n$ cd PATH\n\n# 列出当前目录文件名\n$ ls \n\n# 建立目录\n$ mkdir DIR\n\n# 删除目录\n$ rmdir DIR\n\n# 显示当前目录\n$ pwd\n\n# 更改文件或目录的属组\n$ chgrp groupname PATH\n\n# 更改文件或目录的属主\n$ chown username PATH\n\n# 更改文件或目录的权限\n$ chmod 664 PATH\n\n# 建立连接文件\n$ ln oldname newname\n\n# 删除文件或目录\n$ rm PATH\n\n# 更改文件或目录名称\n$ rename oldname newname\n\n# 离开远程主机\n$ exit | bye | quit\n```\n\n### 本机\n都在普通命令前加上l(L的小写)\n```bash\n# 切换某个目录\n$ lcd PATH\n\n# 列出当前目录文件名\n$ lls \n\n# 建立目录\n$ lmkdir DIR\n\n\n# 显示当前目录\n$ lpwd\n```\n\n### 上传下载操作\n\n```bash\n# 将文件由本机上传到远程主机\n$ put [本机目录或文件] [远程]\n$ put [本机目录或文件] \n# 如果用第二种格式，则文件会上传到远程主机当前目录下\n\n# 将文件由远程主机下载到本地\n$ get [远程目录或文件] [本地]\n$ get [远程目录或文件]\n# 如果用第二种格式，则文件会下载到本地当前目录下\n\nput 和 get 都可以使用通配符 如: get * ,put *.pem\n```\n\n就整体而言，如果不考虑图形接口，SFTP 在 Linux 中完全可以取代 FTP 了，因为所有功能都已经涵盖\n\n\n## 文件异地直接复制: SCP\n\n通常使用 SFTP 是因为可能还不知道服务器上面存在文件的信息，如果已经知道服务器上的文件名和地址，那么最简单的文件传输方式 SCP 指令\n\n```bash\n$ scp [-pr] [-l 速率] file [账号@]主机:目录名 # 上传\n$ scp [-pr] [-l 速率] [账号@主机]:file 目录名 # 下载\n\n# 参数\n-p : 保留文件原有的权限信息\n-r : 复制来源为目录时,可以复制整个目录(包含子目录)\n-l : 可以限制传输的速率,单位为 Kbits/s , 例如 [-l 800 ] 代表传输速率 100Kbytes/s\n```","source":"_posts/linux-2017-08-22-sftp-scp.md","raw":"---\ntitle: Linux 远程文件传输 SFTP 和 SCP \ndate: 2017-08-22\ntags:\n---\n\n\n> 熟悉linux的朋友都知道 SSH 可以登录远程服务器进行工作，但是如果想从远程服务器下载文件或上传到服务器呢，ssh就做不到了，这时候我们可以用sftp和scp完成任务，这两个指令也是使用 SSH 的通道（Port 22），只是模拟 FTP 与复制的操作而已。下面我们一一介绍.\n\n## SFTP\n\nSFTP 登陆主机和 SSH 一样，也是用 用户名@主机名的方式连接\n```bash\n$ sftp root@localhost\nroot@localhost's password: # 输入密码\nsftp> exit # 输入FTP 相关命令\n```\n\n进入主机后，就与一般 FTP 模式下操作方式一样了！下面是具体可用命令:\n### 远程服务器\n```bash\n# 切换某个目录\n$ cd PATH\n\n# 列出当前目录文件名\n$ ls \n\n# 建立目录\n$ mkdir DIR\n\n# 删除目录\n$ rmdir DIR\n\n# 显示当前目录\n$ pwd\n\n# 更改文件或目录的属组\n$ chgrp groupname PATH\n\n# 更改文件或目录的属主\n$ chown username PATH\n\n# 更改文件或目录的权限\n$ chmod 664 PATH\n\n# 建立连接文件\n$ ln oldname newname\n\n# 删除文件或目录\n$ rm PATH\n\n# 更改文件或目录名称\n$ rename oldname newname\n\n# 离开远程主机\n$ exit | bye | quit\n```\n\n### 本机\n都在普通命令前加上l(L的小写)\n```bash\n# 切换某个目录\n$ lcd PATH\n\n# 列出当前目录文件名\n$ lls \n\n# 建立目录\n$ lmkdir DIR\n\n\n# 显示当前目录\n$ lpwd\n```\n\n### 上传下载操作\n\n```bash\n# 将文件由本机上传到远程主机\n$ put [本机目录或文件] [远程]\n$ put [本机目录或文件] \n# 如果用第二种格式，则文件会上传到远程主机当前目录下\n\n# 将文件由远程主机下载到本地\n$ get [远程目录或文件] [本地]\n$ get [远程目录或文件]\n# 如果用第二种格式，则文件会下载到本地当前目录下\n\nput 和 get 都可以使用通配符 如: get * ,put *.pem\n```\n\n就整体而言，如果不考虑图形接口，SFTP 在 Linux 中完全可以取代 FTP 了，因为所有功能都已经涵盖\n\n\n## 文件异地直接复制: SCP\n\n通常使用 SFTP 是因为可能还不知道服务器上面存在文件的信息，如果已经知道服务器上的文件名和地址，那么最简单的文件传输方式 SCP 指令\n\n```bash\n$ scp [-pr] [-l 速率] file [账号@]主机:目录名 # 上传\n$ scp [-pr] [-l 速率] [账号@主机]:file 目录名 # 下载\n\n# 参数\n-p : 保留文件原有的权限信息\n-r : 复制来源为目录时,可以复制整个目录(包含子目录)\n-l : 可以限制传输的速率,单位为 Kbits/s , 例如 [-l 800 ] 代表传输速率 100Kbytes/s\n```","slug":"linux-2017-08-22-sftp-scp","published":1,"updated":"2017-09-15T15:01:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8u000ekjxvyirxao52","content":"<blockquote>\n<p>熟悉linux的朋友都知道 SSH 可以登录远程服务器进行工作，但是如果想从远程服务器下载文件或上传到服务器呢，ssh就做不到了，这时候我们可以用sftp和scp完成任务，这两个指令也是使用 SSH 的通道（Port 22），只是模拟 FTP 与复制的操作而已。下面我们一一介绍.</p>\n</blockquote>\n<h2><span id=\"sftp\">SFTP</span><a href=\"#sftp\" class=\"header-anchor\"></a></h2><p>SFTP 登陆主机和 SSH 一样，也是用 用户名@主机名的方式连接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sftp root@localhost</div><div class=\"line\">root@localhost<span class=\"string\">'s password: # 输入密码</span></div><div class=\"line\"><span class=\"string\">sftp&gt; exit # 输入FTP 相关命令</span></div></pre></td></tr></table></figure></p>\n<p>进入主机后，就与一般 FTP 模式下操作方式一样了！下面是具体可用命令:</p>\n<h3><span id=\"yuan-cheng-fu-wu-qi\">远程服务器</span><a href=\"#yuan-cheng-fu-wu-qi\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 切换某个目录</span></div><div class=\"line\">$ <span class=\"built_in\">cd</span> PATH</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 列出当前目录文件名</span></div><div class=\"line\">$ ls </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 建立目录</span></div><div class=\"line\">$ mkdir DIR</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除目录</span></div><div class=\"line\">$ rmdir DIR</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示当前目录</span></div><div class=\"line\">$ <span class=\"built_in\">pwd</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 更改文件或目录的属组</span></div><div class=\"line\">$ chgrp groupname PATH</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 更改文件或目录的属主</span></div><div class=\"line\">$ chown username PATH</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 更改文件或目录的权限</span></div><div class=\"line\">$ chmod 664 PATH</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 建立连接文件</span></div><div class=\"line\">$ ln oldname newname</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除文件或目录</span></div><div class=\"line\">$ rm PATH</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 更改文件或目录名称</span></div><div class=\"line\">$ rename oldname newname</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 离开远程主机</span></div><div class=\"line\">$ <span class=\"built_in\">exit</span> | <span class=\"built_in\">bye</span> | quit</div></pre></td></tr></table></figure>\n<h3><span id=\"ben-ji\">本机</span><a href=\"#ben-ji\" class=\"header-anchor\"></a></h3><p>都在普通命令前加上l(L的小写)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 切换某个目录</span></div><div class=\"line\">$ lcd PATH</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 列出当前目录文件名</span></div><div class=\"line\">$ lls </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 建立目录</span></div><div class=\"line\">$ lmkdir DIR</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示当前目录</span></div><div class=\"line\">$ lpwd</div></pre></td></tr></table></figure></p>\n<h3><span id=\"shang-chuan-xia-zai-cao-zuo\">上传下载操作</span><a href=\"#shang-chuan-xia-zai-cao-zuo\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 将文件由本机上传到远程主机</span></div><div class=\"line\">$ put [本机目录或文件] [远程]</div><div class=\"line\">$ put [本机目录或文件] </div><div class=\"line\"><span class=\"comment\"># 如果用第二种格式，则文件会上传到远程主机当前目录下</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将文件由远程主机下载到本地</span></div><div class=\"line\">$ get [远程目录或文件] [本地]</div><div class=\"line\">$ get [远程目录或文件]</div><div class=\"line\"><span class=\"comment\"># 如果用第二种格式，则文件会下载到本地当前目录下</span></div><div class=\"line\"></div><div class=\"line\">put 和 get 都可以使用通配符 如: get * ,put *.pem</div></pre></td></tr></table></figure>\n<p>就整体而言，如果不考虑图形接口，SFTP 在 Linux 中完全可以取代 FTP 了，因为所有功能都已经涵盖</p>\n<h2><span id=\"wen-jian-yi-di-zhi-jie-fu-zhi-scp\">文件异地直接复制: SCP</span><a href=\"#wen-jian-yi-di-zhi-jie-fu-zhi-scp\" class=\"header-anchor\"></a></h2><p>通常使用 SFTP 是因为可能还不知道服务器上面存在文件的信息，如果已经知道服务器上的文件名和地址，那么最简单的文件传输方式 SCP 指令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ scp [-pr] [-l 速率] file [账号@]主机:目录名 <span class=\"comment\"># 上传</span></div><div class=\"line\">$ scp [-pr] [-l 速率] [账号@主机]:file 目录名 <span class=\"comment\"># 下载</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 参数</span></div><div class=\"line\">-p : 保留文件原有的权限信息</div><div class=\"line\">-r : 复制来源为目录时,可以复制整个目录(包含子目录)</div><div class=\"line\">-l : 可以限制传输的速率,单位为 Kbits/s , 例如 [-l 800 ] 代表传输速率 100Kbytes/s</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>熟悉linux的朋友都知道 SSH 可以登录远程服务器进行工作，但是如果想从远程服务器下载文件或上传到服务器呢，ssh就做不到了，这时候我们可以用sftp和scp完成任务，这两个指令也是使用 SSH 的通道（Port 22），只是模拟 FTP 与复制的操作而已。下面我们一一介绍.</p>\n</blockquote>\n<h2 id=\"SFTP\"><a href=\"#SFTP\" class=\"headerlink\" title=\"SFTP\"></a>SFTP</h2><p>SFTP 登陆主机和 SSH 一样，也是用 用户名@主机名的方式连接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sftp root@localhost</div><div class=\"line\">root@localhost<span class=\"string\">'s password: # 输入密码</span></div><div class=\"line\"><span class=\"string\">sftp&gt; exit # 输入FTP 相关命令</span></div></pre></td></tr></table></figure></p>\n<p>进入主机后，就与一般 FTP 模式下操作方式一样了！下面是具体可用命令:</p>\n<h3 id=\"远程服务器\"><a href=\"#远程服务器\" class=\"headerlink\" title=\"远程服务器\"></a>远程服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 切换某个目录</span></div><div class=\"line\">$ <span class=\"built_in\">cd</span> PATH</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 列出当前目录文件名</span></div><div class=\"line\">$ ls </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 建立目录</span></div><div class=\"line\">$ mkdir DIR</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除目录</span></div><div class=\"line\">$ rmdir DIR</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示当前目录</span></div><div class=\"line\">$ <span class=\"built_in\">pwd</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 更改文件或目录的属组</span></div><div class=\"line\">$ chgrp groupname PATH</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 更改文件或目录的属主</span></div><div class=\"line\">$ chown username PATH</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 更改文件或目录的权限</span></div><div class=\"line\">$ chmod 664 PATH</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 建立连接文件</span></div><div class=\"line\">$ ln oldname newname</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除文件或目录</span></div><div class=\"line\">$ rm PATH</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 更改文件或目录名称</span></div><div class=\"line\">$ rename oldname newname</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 离开远程主机</span></div><div class=\"line\">$ <span class=\"built_in\">exit</span> | <span class=\"built_in\">bye</span> | quit</div></pre></td></tr></table></figure>\n<h3 id=\"本机\"><a href=\"#本机\" class=\"headerlink\" title=\"本机\"></a>本机</h3><p>都在普通命令前加上l(L的小写)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 切换某个目录</span></div><div class=\"line\">$ lcd PATH</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 列出当前目录文件名</span></div><div class=\"line\">$ lls </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 建立目录</span></div><div class=\"line\">$ lmkdir DIR</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 显示当前目录</span></div><div class=\"line\">$ lpwd</div></pre></td></tr></table></figure></p>\n<h3 id=\"上传下载操作\"><a href=\"#上传下载操作\" class=\"headerlink\" title=\"上传下载操作\"></a>上传下载操作</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 将文件由本机上传到远程主机</span></div><div class=\"line\">$ put [本机目录或文件] [远程]</div><div class=\"line\">$ put [本机目录或文件] </div><div class=\"line\"><span class=\"comment\"># 如果用第二种格式，则文件会上传到远程主机当前目录下</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将文件由远程主机下载到本地</span></div><div class=\"line\">$ get [远程目录或文件] [本地]</div><div class=\"line\">$ get [远程目录或文件]</div><div class=\"line\"><span class=\"comment\"># 如果用第二种格式，则文件会下载到本地当前目录下</span></div><div class=\"line\"></div><div class=\"line\">put 和 get 都可以使用通配符 如: get * ,put *.pem</div></pre></td></tr></table></figure>\n<p>就整体而言，如果不考虑图形接口，SFTP 在 Linux 中完全可以取代 FTP 了，因为所有功能都已经涵盖</p>\n<h2 id=\"文件异地直接复制-SCP\"><a href=\"#文件异地直接复制-SCP\" class=\"headerlink\" title=\"文件异地直接复制: SCP\"></a>文件异地直接复制: SCP</h2><p>通常使用 SFTP 是因为可能还不知道服务器上面存在文件的信息，如果已经知道服务器上的文件名和地址，那么最简单的文件传输方式 SCP 指令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ scp [-pr] [-l 速率] file [账号@]主机:目录名 <span class=\"comment\"># 上传</span></div><div class=\"line\">$ scp [-pr] [-l 速率] [账号@主机]:file 目录名 <span class=\"comment\"># 下载</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 参数</span></div><div class=\"line\">-p : 保留文件原有的权限信息</div><div class=\"line\">-r : 复制来源为目录时,可以复制整个目录(包含子目录)</div><div class=\"line\">-l : 可以限制传输的速率,单位为 Kbits/s , 例如 [-l 800 ] 代表传输速率 100Kbytes/s</div></pre></td></tr></table></figure>"},{"title":"Linux 硬链接与软连接的增删查","date":"2017-08-27T16:00:00.000Z","_content":"\n\n原文:http://www.cnblogs.com/xiaochaohuashengmi/archive/2011/10/05/2199534.html\n\n> 链接是一种在共享文件和访问它的用户的若干目录项之间建立联系的一种方法。Linux中包括两种链接：硬链接(Hard Link)和软链接(Soft Link),软链接又称为符号链接（Symbolic link）。符号连接相当于Windows下的快捷方式。\n\n## 硬链接\n\n硬链接说白了是一个指针，指向文件索引节点，系统并不为它重新分配inode。可以用:ln命令来建立硬链接。\n\n```bash\n语法：\nln [options] existing_file new_file     # existing_file 是待创建链接的文件，new_file 是要创建的连接文件\nln [options] existing_file new_file     \n\n-f 建立时将同名文件删除\n-i 如果有同名文件询问是否替换\n```\n\n尽管硬链接节省空间，也是Linux系统整合文件系统的传统方式，但是存在一下不足之处：\n- 不可以在不同文件系统的文件间建立链接\n- 只有超级用户才可以为目录创建硬链接。\n\n## 软连接\n\n软链接克服了硬链接的不足，没有任何文件系统的限制，任何用户可以创建指向目录的符号链接。因而现在更为广泛使用，它具有更大的灵活性，甚至可以跨越不同机器、不同网络对文件进行链接。\n\n```bash\nln -s existing_file new_file            # 需要加上-s即可\n```\n\n## 删除\n\n```bash\nrm -rf new_file     # 直接rm掉链接文件即可\n```\n\n","source":"_posts/linux-2017-08-28-ln.md","raw":"---\ntitle: Linux 硬链接与软连接的增删查\ndate: 2017-08-28\ntags:\n---\n\n\n原文:http://www.cnblogs.com/xiaochaohuashengmi/archive/2011/10/05/2199534.html\n\n> 链接是一种在共享文件和访问它的用户的若干目录项之间建立联系的一种方法。Linux中包括两种链接：硬链接(Hard Link)和软链接(Soft Link),软链接又称为符号链接（Symbolic link）。符号连接相当于Windows下的快捷方式。\n\n## 硬链接\n\n硬链接说白了是一个指针，指向文件索引节点，系统并不为它重新分配inode。可以用:ln命令来建立硬链接。\n\n```bash\n语法：\nln [options] existing_file new_file     # existing_file 是待创建链接的文件，new_file 是要创建的连接文件\nln [options] existing_file new_file     \n\n-f 建立时将同名文件删除\n-i 如果有同名文件询问是否替换\n```\n\n尽管硬链接节省空间，也是Linux系统整合文件系统的传统方式，但是存在一下不足之处：\n- 不可以在不同文件系统的文件间建立链接\n- 只有超级用户才可以为目录创建硬链接。\n\n## 软连接\n\n软链接克服了硬链接的不足，没有任何文件系统的限制，任何用户可以创建指向目录的符号链接。因而现在更为广泛使用，它具有更大的灵活性，甚至可以跨越不同机器、不同网络对文件进行链接。\n\n```bash\nln -s existing_file new_file            # 需要加上-s即可\n```\n\n## 删除\n\n```bash\nrm -rf new_file     # 直接rm掉链接文件即可\n```\n\n","slug":"linux-2017-08-28-ln","published":1,"updated":"2017-09-15T15:02:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8u000fkjxvi70b3z8h","content":"<p>原文:<a href=\"http://www.cnblogs.com/xiaochaohuashengmi/archive/2011/10/05/2199534.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/xiaochaohuashengmi/archive/2011/10/05/2199534.html</a></p>\n<blockquote>\n<p>链接是一种在共享文件和访问它的用户的若干目录项之间建立联系的一种方法。Linux中包括两种链接：硬链接(Hard Link)和软链接(Soft Link),软链接又称为符号链接（Symbolic link）。符号连接相当于Windows下的快捷方式。</p>\n</blockquote>\n<h2><span id=\"ying-lian-jie\">硬链接</span><a href=\"#ying-lian-jie\" class=\"header-anchor\"></a></h2><p>硬链接说白了是一个指针，指向文件索引节点，系统并不为它重新分配inode。可以用:ln命令来建立硬链接。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">语法：</div><div class=\"line\">ln [options] existing_file new_file     <span class=\"comment\"># existing_file 是待创建链接的文件，new_file 是要创建的连接文件</span></div><div class=\"line\">ln [options] existing_file new_file     </div><div class=\"line\"></div><div class=\"line\">-f 建立时将同名文件删除</div><div class=\"line\">-i 如果有同名文件询问是否替换</div></pre></td></tr></table></figure>\n<p>尽管硬链接节省空间，也是Linux系统整合文件系统的传统方式，但是存在一下不足之处：</p>\n<ul>\n<li>不可以在不同文件系统的文件间建立链接</li>\n<li>只有超级用户才可以为目录创建硬链接。</li>\n</ul>\n<h2><span id=\"ruan-lian-jie\">软连接</span><a href=\"#ruan-lian-jie\" class=\"header-anchor\"></a></h2><p>软链接克服了硬链接的不足，没有任何文件系统的限制，任何用户可以创建指向目录的符号链接。因而现在更为广泛使用，它具有更大的灵活性，甚至可以跨越不同机器、不同网络对文件进行链接。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln -s existing_file new_file            <span class=\"comment\"># 需要加上-s即可</span></div></pre></td></tr></table></figure>\n<h2><span id=\"shan-chu\">删除</span><a href=\"#shan-chu\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm -rf new_file     <span class=\"comment\"># 直接rm掉链接文件即可</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>原文:<a href=\"http://www.cnblogs.com/xiaochaohuashengmi/archive/2011/10/05/2199534.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/xiaochaohuashengmi/archive/2011/10/05/2199534.html</a></p>\n<blockquote>\n<p>链接是一种在共享文件和访问它的用户的若干目录项之间建立联系的一种方法。Linux中包括两种链接：硬链接(Hard Link)和软链接(Soft Link),软链接又称为符号链接（Symbolic link）。符号连接相当于Windows下的快捷方式。</p>\n</blockquote>\n<h2 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h2><p>硬链接说白了是一个指针，指向文件索引节点，系统并不为它重新分配inode。可以用:ln命令来建立硬链接。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">语法：</div><div class=\"line\">ln [options] existing_file new_file     <span class=\"comment\"># existing_file 是待创建链接的文件，new_file 是要创建的连接文件</span></div><div class=\"line\">ln [options] existing_file new_file     </div><div class=\"line\"></div><div class=\"line\">-f 建立时将同名文件删除</div><div class=\"line\">-i 如果有同名文件询问是否替换</div></pre></td></tr></table></figure>\n<p>尽管硬链接节省空间，也是Linux系统整合文件系统的传统方式，但是存在一下不足之处：</p>\n<ul>\n<li>不可以在不同文件系统的文件间建立链接</li>\n<li>只有超级用户才可以为目录创建硬链接。</li>\n</ul>\n<h2 id=\"软连接\"><a href=\"#软连接\" class=\"headerlink\" title=\"软连接\"></a>软连接</h2><p>软链接克服了硬链接的不足，没有任何文件系统的限制，任何用户可以创建指向目录的符号链接。因而现在更为广泛使用，它具有更大的灵活性，甚至可以跨越不同机器、不同网络对文件进行链接。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln -s existing_file new_file            <span class=\"comment\"># 需要加上-s即可</span></div></pre></td></tr></table></figure>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm -rf new_file     <span class=\"comment\"># 直接rm掉链接文件即可</span></div></pre></td></tr></table></figure>\n"},{"title":"Linux SSH 登陆远程服务器和无密码操作","date":"2017-08-22T16:00:00.000Z","_content":"\n[TOC]\n\n[原文](http://cn.linux.vbird.org/linux_server/0310telnetssh.php#new_serverkey)\n\n## 使用\n\n```bash\n$ ssh [-f] [-o 参数项目] [-p 非正规埠口] [账号@]IP [指令]\n\n选项与参数：\n-f ： 需要配合后面的 [指令] ，不登入远程主机直接发送一个指令过去而已；\n-o 参数项目：主要的参数项目有：\n\tConnectTimeout=秒数 ：联机等待的秒数，减少等待的时间\n\tStrictHostKeyChecking=[yes|no|ask]：预设是 ask，若要让 public key\n           主动加入 known_hosts ，则可以设定为 no 即可。\n-p ：如果你的 sshd 服务启动在非正规的埠口 (22)，需使用此项目；\n[指令] ：不登入远程主机，直接发送指令过去。但与 -f 意义不太相同。\n\n```\n\n使用root用户登录远程主机\n```bash\n$ ssh root@server\n```\n\n如果本机用户和想要登录的用户相同则可以直接输入地址登陆(但不建议这样做)\n```bash\n$ ssh server\n```\n\n登入对方主机执行过指令后立刻离开的方式\n```bash\n$ ssh student@127.0.0.1 find / &> ~/find1.log\n\n# 此时你会发现怎么画面卡住了？这是因为上头的指令会造成，你已经登入远程主机，\n# 但是执行的指令尚未跑完，因此你会在等待当中。那如何指定系统自己跑？\n```\n\n与上题相同，但是让对方主机自己跑该指令，你立刻回到近端主机继续工作\n```bash\n$ ssh -f student@127.0.0.1 find / &> ~/find1.log\n# 此时你会立刻注销 127.0.0.1 ，但 find 指令会自己在远程服务器跑喔！\n```\n\n删除掉 known_hosts 后，重新使用 root 联机到本机，且自动加上公钥记录\n```bash\n$ rm ~/.ssh/known_hosts\n$ ssh -o StrictHostKeyChecking=no root@localhost\n\nWarning: Permanently added 'localhost' (RSA) to the list of known hosts.\nroot@localhost's password:\n# 如上所示，不会问你 yes 或 no 啦！直接会写入 ~/.ssh/known_hosts 当中！\n```\n\n## sshd 服务器细部设定\n基本上，所有的 sshd 服务器详细设定都放在 /etc/ssh/sshd_config 里面！不过，每个 Linux distribution 的预设设定都不太相同，所以我们有必要来了解一下整个设定值的意义为何才好！ 同时请注意，在预设的档案内，只要是预设有出现且被批注的设定值 (设定值前面加 #)，即为『默认值！』，你可以依据它来修改的哩。\n```bash\n$ vim /etc/ssh/sshd_config\n\n# 1. 关于 SSH Server 的整体设定，包含使用的 port 啦，以及使用的密码演算方式\n# Port 22\n# SSH 预设使用 22 这个port，也可以使用多个port，即重复使用 port 这个设定项目！\n# 例如想要开放 sshd 在 22 与 443 ，则多加一行内容为：『 Port 443 』\n# 然后重新启动 sshd 这样就好了！不过，不建议修改 port number 啦！\n\nProtocol 2\n# 选择的 SSH 协议版本，可以是 1 也可以是 2 ，CentOS 5.x 预设是仅支援 V2。\n# 如果想要支持旧版 V1 ，就得要使用『 Protocol 2,1 』才行。\n\n# ListenAddress 0.0.0.0\n# 监听的主机适配器！举个例子来说，如果你有两个 IP，分别是 192.168.1.100 及 \n# 192.168.100.254，假设你只想要让 192.168.1.100 可以监听 sshd ，那就这样写：\n# 『 ListenAddress 192.168.1.100 』默认值是监听所有接口的 SSH 要求\n\n# PidFile /var/run/sshd.pid\n# 可以放置 SSHD 这个 PID 的档案！上述为默认值\n\n# LoginGraceTime 2m\n# 当使用者连上 SSH server 之后，会出现输入密码的画面，在该画面中，\n# 在多久时间内没有成功连上 SSH server 就强迫断线！若无单位则默认时间为秒！\n\n# Compression delayed\n# 指定何时开始使用压缩数据模式进行传输。有 yes, no 与登入后才将数据压缩 (delayed)\n\n# 2. 说明主机的 Private Key 放置的档案，预设使用下面的档案即可！\n# HostKey /etc/ssh/ssh_host_key        # SSH version 1 使用的私钥\n# HostKey /etc/ssh/ssh_host_rsa_key    # SSH version 2 使用的 RSA 私钥\n# HostKey /etc/ssh/ssh_host_dsa_key    # SSH version 2 使用的 DSA 私钥\n# 还记得我们在主机的 SSH 联机流程里面谈到的，这里就是 Host Key ～\n\n# 3. 关于登录文件的讯息数据放置与 daemon 的名称！\nSyslogFacility AUTHPRIV\n# 当有人使用 SSH 登入系统的时候，SSH 会记录信息，这个信息要记录在什么 daemon name\n# 底下？预设是以 AUTH 来设定的，即是 /var/log/secure 里面！什么？忘记了！\n# 回到 Linux 基础去翻一下。其他可用的 daemon name 为：DAEMON,USER,AUTH,\n# LOCAL0,LOCAL1,LOCAL2,LOCAL3,LOCAL4,LOCAL5,\n\n# LogLevel INFO\n# 登录记录的等级！嘿嘿！任何讯息！同样的，忘记了就回去参考！\n\n# 4. 安全设定项目！极重要！\n# 4.1 登入设定部分\n# PermitRootLogin yes\n# 是否允许 root 登入！预设是允许的，但是建议设定成 no！\n\n# StrictModes yes\n# 是否让 sshd 去检查用户家目录或相关档案的权限数据，\n# 这是为了担心使用者将某些重要档案的权限设错，可能会导致一些问题所致。\n# 例如使用者的 ~.ssh/ 权限设错时，某些特殊情况下会不许用户登入\n\n# PubkeyAuthentication yes\n# AuthorizedKeysFile      .ssh/authorized_keys\n# 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。\n# 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内\n\nPasswordAuthentication yes\n# 密码验证当然是需要的！所以这里写 yes 啰！\n\n# PermitEmptyPasswords no\n# 若上面那一项如果设定为 yes 的话，这一项就最好设定为 no ，\n# 这个项目在是否允许以空的密码登入！当然不许！\n\n# 4.2 认证部分\n# RhostsAuthentication no\n# 本机系统不使用 .rhosts，因为仅使用 .rhosts太不安全了，所以这里一定要设定为 no\n\n# IgnoreRhosts yes\n# 是否取消使用 ~/.ssh/.rhosts 来做为认证！当然是！\n\n# RhostsRSAAuthentication no #\n# 这个选项是专门给 version 1 用的，使用 rhosts 档案在 /etc/hosts.equiv\n# 配合 RSA 演算方式来进行认证！不要使用啊！\n\n# HostbasedAuthentication no\n# 这个项目与上面的项目类似，不过是给 version 2 使用的！\n\n# IgnoreUserKnownHosts no\n# 是否忽略家目录内的 ~/.ssh/known_hosts 这个档案所记录的主机内容？\n# 当然不要忽略，所以这里就是 no 啦！\n\nChallengeResponseAuthentication no\n# 允许任何的密码认证！所以，任何 login.conf 规定的认证方式，均可适用！\n# 但目前我们比较喜欢使用 PAM 模块帮忙管理认证，因此这个选项可以设定为 no 喔！\n\nUsePAM yes\n# 利用 PAM 管理使用者认证有很多好处，可以记录与管理。\n# 所以这里我们建议你使用 UsePAM 且 ChallengeResponseAuthentication 设定为 no \n　\n# 4.3 与 Kerberos 有关的参数设定！因为我们没有 Kerberos 主机，所以底下不用设定！\n# KerberosAuthentication no\n# KerberosOrLocalPasswd yes\n# KerberosTicketCleanup yes\n# KerberosTgtPassing no\n　\n# 4.4 底下是有关在 X-Window 底下使用的相关设定！\nX11Forwarding yes\n# X11DisplayOffset 10\n# X11UseLocalhost yes\n# 比较重要的是 X11Forwarding 项目，他可以让窗口的数据透过 ssh 信道来传送喔！\n# 在本章后面比较进阶的 ssh 使用方法中会谈到。\n\n# 4.5 登入后的项目：\n# PrintMotd yes\n# 登入后是否显示出一些信息呢？例如上次登入的时间、地点等等，预设是 yes\n# 亦即是打印出 /etc/motd 这个档案的内容。但是，如果为了安全，可以考虑改为 no ！\n\n# PrintLastLog yes\n# 显示上次登入的信息！可以啊！预设也是 yes ！\n\n# TCPKeepAlive yes\n# 当达成联机后，服务器会一直传送 TCP 封包给客户端藉以判断对方式否一直存在联机。\n# 不过，如果联机时中间的路由器暂时停止服务几秒钟，也会让联机中断喔！\n# 在这个情况下，任何一端死掉后，SSH可以立刻知道！而不会有僵尸程序的发生！\n# 但如果你的网络或路由器常常不稳定，那么可以设定为 no 的啦！\n\nUsePrivilegeSeparation yes\n# 是否权限较低的程序来提供用户操作。我们知道 sshd 启动在 port 22 ，\n# 因此启动的程序是属于 root 的身份。那么当 student 登入后，这个设定值\n# 会让 sshd 产生一个属于 sutdent 的 sshd 程序来使用，对系统较安全\n\nMaxStartups 10\n# 同时允许几个尚未登入的联机画面？当我们连上 SSH ，但是尚未输入密码时，\n# 这个时候就是我们所谓的联机画面啦！在这个联机画面中，为了保护主机，\n# 所以需要设定最大值，预设最多十个联机画面，而已经建立联机的不计算在这十个当中\n\n# 4.6 关于用户抵挡的设定项目：\nDenyUsers *\n# 设定受抵挡的使用者名称，如果是全部的使用者，那就是全部挡吧！\n# 若是部分使用者，可以将该账号填入！例如下列！\nDenyUsers test\n\nDenyGroups test\n# 与 DenyUsers 相同！仅抵挡几个群组而已！\n\n# 5. 关于 SFTP 服务与其他的设定项目！\nSubsystem       sftp    /usr/lib/ssh/sftp-server\n# UseDNS yes\n# 一般来说，为了要判断客户端来源是正常合法的，因此会使用 DNS 去反查客户端的主机名\n# 不过如果是在内网互连，这项目设定为 no 会让联机达成速度比较快。\n```\n基本上，CentOS 预设的 sshd 服务已经算是挺安全的了，不过还不够！建议你 (1)将 root 的登入权限取消； (2)将 ssh 版本设定为 2 。其他的设定值就请你依照自己的喜好来设定了。 通常不建议进行随便修改啦！另外，如果你修改过上面这个档案(/etc/ssh/sshd_config)，那么就必需要重新启动一次 sshd 这个 daemon 才行！亦即是：\n```bash\n$ /etc/init.d/sshd restart\n```\n\n## 制作不用密码可立即登入的 ssh 用户\n\n三个步骤\n```bash\n1、客户端建立两把钥匙：想一想，在密钥系统中，是公钥比较重要还是私钥比较重要？ 当然是私钥比较重要！因此私钥才是解密的关键啊！所以啰，这两把钥匙当然得在发起联机的客户端建置才对。利用的指令为 ssh-keygen 这个命令；\n\n2、客户端放置好私钥档案：将 Private Key 放在 Client 上面的家目录，亦即 $HOME/.ssh/ ， 并且得要注意权限喔！\n\n3、将公钥放置服务器端的正确目录与文件名去：最后，将那把 Public Key 放在任何一个你想要用来登入的服务器端的某 User 的家目录内之 .ssh/ 里面的认证档案即可完成整个程序。\n```\n\n### 1. 客户端建立两把钥匙\n\n建立的方法很简单，在 clientlinux.centos.vbird 这部主机上面以 vbirdtsai 的身份来建立两把钥匙即可。 不过，需要注意的是，我们有多种密码算法，如果不指定特殊的算法，则默认以 RSA 算法来处理：\n```bash\n$ ssh-keygen [-t rsa|dsa] <==可选 rsa 或 dsa\n$ ssh-keygen  <==用预设的方法建立密钥\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/wxnacy/.ssh/id_rsa): <==按 enter\nCreated directory '/home/wxnacy/.ssh'. <==此目录若不存在则会主动建立\nEnter passphrase (empty for no passphrase): <==按 Enter 不给密码\nEnter same passphrase again: <==再输入一次 Enter 吧！\nYour identification has been saved in /home/wxnacy/.ssh/id_rsa. <==私钥档\nYour public key has been saved in /home/wxnacy/.ssh/id_rsa.pub. <==公钥档\nThe key fingerprint is:\n0f:d3:e7:1a:1c:bd:5c:03:f1:19:f1:22:df:9b:cc:08 wxnacy\n\n$ ls -ld ~/.ssh; ls -l ~/.ssh\ndrwx------. 2 wxnacy wxnacy 4096 2017-07-25 12:58 /home/wxnacy/.ssh\n-rw-------. 1 wxnacy wxnacy 1675 2017-07-25 12:58 id_rsa      <==私钥档\n-rw-r--r--. 1 wxnacy wxnacy  416 2017-07-25 12:58 id_rsa.pub  <==公钥档\n```\n请注意上面喔，我的身份是 wxnacy ，所以当我执行 ssh-keygen 时，才会在我的家目录底下的 .ssh/ 这个目录里面产生所需要的两把 Keys ，分别是私钥 (id_rsa) 与公钥 (id_rsa.pub)。 ~/.ssh/ 目录必须要是 700 的权限才行！另外一个要特别注意的就是那个 id_rsa 的档案权限啦！他必须要是 -rw------- 且属于 vbirdtsai 自己才行！否则在未来密钥比对的过程当中，可能会被判定为危险而无法成功的以公私钥成对档案的机制来达成联机喔。 其实，建立私钥后预设的权限与文件名放置位置都是正确的，你只要检查过没问题即可。\n\n### 2. 将公钥档案数据上传到服务器上\n\n那如何上传呢？最简单的方法当然就是使用 scp 嘛\n```bash\n$ scp ~/.ssh/id_rsa.pub root@192.168.100.254:~\n```\n\n### 3. 将公钥放置服务器端的正确目录与文件名\n\n还记得 sshd_config 里面谈到的 AuthorizedKeysFile 这个设定值吧？该设定值就是在指定公钥数据应该要放置的文件名啰！所以，我们必须要到服务器端的 dmtsai 这个用户身份下， 将刚刚上传的 id_rsa.pub 数据附加到 authorized_keys 这个档案内才行。作法有点像这样\n\n```bash\n# 1. 建立 ~/.ssh 档案，注意权限需要为 700 喔！\n$ ls -ld .ssh\nls: .ssh: 没有此一档案或目录\n# 由于可能是新建的用户，因此这个目录不存在。不存在才作底下建立目录的行为\n\n$ mkdir .ssh; chmod 700 .ssh\n$ ls -ld .ssh\ndrwx------. 2 dmtsai dmtsai 4096 Jul 25 13:06 .ssh\n# 权限设定中，务必是 700 且属于使用者本人的账号与群组才行！\n\n# 2. 将公钥档案内的数据使用 cat 转存到 authorized_keys 内\n$ ls -l *pub\n-rw-r--r--. 1 dmtsai dmtsai 416 Jul 25 13:05 id_rsa.pub <==确实有存在\n\n$ cat id_rsa.pub >> .ssh/authorized_keys\n$ chmod 644 .ssh/authorized_keys\n$ ls -l .ssh\n-rw-r--r--. 1 dmtsai dmtsai 416 Jul 25 13:07 authorized_keys\n# 这个档案的权限设定中，就得要是 644 才可以！不可以搞混了！\n```\n接下来在用 ssh 登陆下就不再需要密码了\n\n\n","source":"_posts/linux-2017-08-23-ssh.md","raw":"---\ntitle: Linux SSH 登陆远程服务器和无密码操作\ndate: 2017-08-23\ntags:\n---\n\n[TOC]\n\n[原文](http://cn.linux.vbird.org/linux_server/0310telnetssh.php#new_serverkey)\n\n## 使用\n\n```bash\n$ ssh [-f] [-o 参数项目] [-p 非正规埠口] [账号@]IP [指令]\n\n选项与参数：\n-f ： 需要配合后面的 [指令] ，不登入远程主机直接发送一个指令过去而已；\n-o 参数项目：主要的参数项目有：\n\tConnectTimeout=秒数 ：联机等待的秒数，减少等待的时间\n\tStrictHostKeyChecking=[yes|no|ask]：预设是 ask，若要让 public key\n           主动加入 known_hosts ，则可以设定为 no 即可。\n-p ：如果你的 sshd 服务启动在非正规的埠口 (22)，需使用此项目；\n[指令] ：不登入远程主机，直接发送指令过去。但与 -f 意义不太相同。\n\n```\n\n使用root用户登录远程主机\n```bash\n$ ssh root@server\n```\n\n如果本机用户和想要登录的用户相同则可以直接输入地址登陆(但不建议这样做)\n```bash\n$ ssh server\n```\n\n登入对方主机执行过指令后立刻离开的方式\n```bash\n$ ssh student@127.0.0.1 find / &> ~/find1.log\n\n# 此时你会发现怎么画面卡住了？这是因为上头的指令会造成，你已经登入远程主机，\n# 但是执行的指令尚未跑完，因此你会在等待当中。那如何指定系统自己跑？\n```\n\n与上题相同，但是让对方主机自己跑该指令，你立刻回到近端主机继续工作\n```bash\n$ ssh -f student@127.0.0.1 find / &> ~/find1.log\n# 此时你会立刻注销 127.0.0.1 ，但 find 指令会自己在远程服务器跑喔！\n```\n\n删除掉 known_hosts 后，重新使用 root 联机到本机，且自动加上公钥记录\n```bash\n$ rm ~/.ssh/known_hosts\n$ ssh -o StrictHostKeyChecking=no root@localhost\n\nWarning: Permanently added 'localhost' (RSA) to the list of known hosts.\nroot@localhost's password:\n# 如上所示，不会问你 yes 或 no 啦！直接会写入 ~/.ssh/known_hosts 当中！\n```\n\n## sshd 服务器细部设定\n基本上，所有的 sshd 服务器详细设定都放在 /etc/ssh/sshd_config 里面！不过，每个 Linux distribution 的预设设定都不太相同，所以我们有必要来了解一下整个设定值的意义为何才好！ 同时请注意，在预设的档案内，只要是预设有出现且被批注的设定值 (设定值前面加 #)，即为『默认值！』，你可以依据它来修改的哩。\n```bash\n$ vim /etc/ssh/sshd_config\n\n# 1. 关于 SSH Server 的整体设定，包含使用的 port 啦，以及使用的密码演算方式\n# Port 22\n# SSH 预设使用 22 这个port，也可以使用多个port，即重复使用 port 这个设定项目！\n# 例如想要开放 sshd 在 22 与 443 ，则多加一行内容为：『 Port 443 』\n# 然后重新启动 sshd 这样就好了！不过，不建议修改 port number 啦！\n\nProtocol 2\n# 选择的 SSH 协议版本，可以是 1 也可以是 2 ，CentOS 5.x 预设是仅支援 V2。\n# 如果想要支持旧版 V1 ，就得要使用『 Protocol 2,1 』才行。\n\n# ListenAddress 0.0.0.0\n# 监听的主机适配器！举个例子来说，如果你有两个 IP，分别是 192.168.1.100 及 \n# 192.168.100.254，假设你只想要让 192.168.1.100 可以监听 sshd ，那就这样写：\n# 『 ListenAddress 192.168.1.100 』默认值是监听所有接口的 SSH 要求\n\n# PidFile /var/run/sshd.pid\n# 可以放置 SSHD 这个 PID 的档案！上述为默认值\n\n# LoginGraceTime 2m\n# 当使用者连上 SSH server 之后，会出现输入密码的画面，在该画面中，\n# 在多久时间内没有成功连上 SSH server 就强迫断线！若无单位则默认时间为秒！\n\n# Compression delayed\n# 指定何时开始使用压缩数据模式进行传输。有 yes, no 与登入后才将数据压缩 (delayed)\n\n# 2. 说明主机的 Private Key 放置的档案，预设使用下面的档案即可！\n# HostKey /etc/ssh/ssh_host_key        # SSH version 1 使用的私钥\n# HostKey /etc/ssh/ssh_host_rsa_key    # SSH version 2 使用的 RSA 私钥\n# HostKey /etc/ssh/ssh_host_dsa_key    # SSH version 2 使用的 DSA 私钥\n# 还记得我们在主机的 SSH 联机流程里面谈到的，这里就是 Host Key ～\n\n# 3. 关于登录文件的讯息数据放置与 daemon 的名称！\nSyslogFacility AUTHPRIV\n# 当有人使用 SSH 登入系统的时候，SSH 会记录信息，这个信息要记录在什么 daemon name\n# 底下？预设是以 AUTH 来设定的，即是 /var/log/secure 里面！什么？忘记了！\n# 回到 Linux 基础去翻一下。其他可用的 daemon name 为：DAEMON,USER,AUTH,\n# LOCAL0,LOCAL1,LOCAL2,LOCAL3,LOCAL4,LOCAL5,\n\n# LogLevel INFO\n# 登录记录的等级！嘿嘿！任何讯息！同样的，忘记了就回去参考！\n\n# 4. 安全设定项目！极重要！\n# 4.1 登入设定部分\n# PermitRootLogin yes\n# 是否允许 root 登入！预设是允许的，但是建议设定成 no！\n\n# StrictModes yes\n# 是否让 sshd 去检查用户家目录或相关档案的权限数据，\n# 这是为了担心使用者将某些重要档案的权限设错，可能会导致一些问题所致。\n# 例如使用者的 ~.ssh/ 权限设错时，某些特殊情况下会不许用户登入\n\n# PubkeyAuthentication yes\n# AuthorizedKeysFile      .ssh/authorized_keys\n# 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。\n# 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内\n\nPasswordAuthentication yes\n# 密码验证当然是需要的！所以这里写 yes 啰！\n\n# PermitEmptyPasswords no\n# 若上面那一项如果设定为 yes 的话，这一项就最好设定为 no ，\n# 这个项目在是否允许以空的密码登入！当然不许！\n\n# 4.2 认证部分\n# RhostsAuthentication no\n# 本机系统不使用 .rhosts，因为仅使用 .rhosts太不安全了，所以这里一定要设定为 no\n\n# IgnoreRhosts yes\n# 是否取消使用 ~/.ssh/.rhosts 来做为认证！当然是！\n\n# RhostsRSAAuthentication no #\n# 这个选项是专门给 version 1 用的，使用 rhosts 档案在 /etc/hosts.equiv\n# 配合 RSA 演算方式来进行认证！不要使用啊！\n\n# HostbasedAuthentication no\n# 这个项目与上面的项目类似，不过是给 version 2 使用的！\n\n# IgnoreUserKnownHosts no\n# 是否忽略家目录内的 ~/.ssh/known_hosts 这个档案所记录的主机内容？\n# 当然不要忽略，所以这里就是 no 啦！\n\nChallengeResponseAuthentication no\n# 允许任何的密码认证！所以，任何 login.conf 规定的认证方式，均可适用！\n# 但目前我们比较喜欢使用 PAM 模块帮忙管理认证，因此这个选项可以设定为 no 喔！\n\nUsePAM yes\n# 利用 PAM 管理使用者认证有很多好处，可以记录与管理。\n# 所以这里我们建议你使用 UsePAM 且 ChallengeResponseAuthentication 设定为 no \n　\n# 4.3 与 Kerberos 有关的参数设定！因为我们没有 Kerberos 主机，所以底下不用设定！\n# KerberosAuthentication no\n# KerberosOrLocalPasswd yes\n# KerberosTicketCleanup yes\n# KerberosTgtPassing no\n　\n# 4.4 底下是有关在 X-Window 底下使用的相关设定！\nX11Forwarding yes\n# X11DisplayOffset 10\n# X11UseLocalhost yes\n# 比较重要的是 X11Forwarding 项目，他可以让窗口的数据透过 ssh 信道来传送喔！\n# 在本章后面比较进阶的 ssh 使用方法中会谈到。\n\n# 4.5 登入后的项目：\n# PrintMotd yes\n# 登入后是否显示出一些信息呢？例如上次登入的时间、地点等等，预设是 yes\n# 亦即是打印出 /etc/motd 这个档案的内容。但是，如果为了安全，可以考虑改为 no ！\n\n# PrintLastLog yes\n# 显示上次登入的信息！可以啊！预设也是 yes ！\n\n# TCPKeepAlive yes\n# 当达成联机后，服务器会一直传送 TCP 封包给客户端藉以判断对方式否一直存在联机。\n# 不过，如果联机时中间的路由器暂时停止服务几秒钟，也会让联机中断喔！\n# 在这个情况下，任何一端死掉后，SSH可以立刻知道！而不会有僵尸程序的发生！\n# 但如果你的网络或路由器常常不稳定，那么可以设定为 no 的啦！\n\nUsePrivilegeSeparation yes\n# 是否权限较低的程序来提供用户操作。我们知道 sshd 启动在 port 22 ，\n# 因此启动的程序是属于 root 的身份。那么当 student 登入后，这个设定值\n# 会让 sshd 产生一个属于 sutdent 的 sshd 程序来使用，对系统较安全\n\nMaxStartups 10\n# 同时允许几个尚未登入的联机画面？当我们连上 SSH ，但是尚未输入密码时，\n# 这个时候就是我们所谓的联机画面啦！在这个联机画面中，为了保护主机，\n# 所以需要设定最大值，预设最多十个联机画面，而已经建立联机的不计算在这十个当中\n\n# 4.6 关于用户抵挡的设定项目：\nDenyUsers *\n# 设定受抵挡的使用者名称，如果是全部的使用者，那就是全部挡吧！\n# 若是部分使用者，可以将该账号填入！例如下列！\nDenyUsers test\n\nDenyGroups test\n# 与 DenyUsers 相同！仅抵挡几个群组而已！\n\n# 5. 关于 SFTP 服务与其他的设定项目！\nSubsystem       sftp    /usr/lib/ssh/sftp-server\n# UseDNS yes\n# 一般来说，为了要判断客户端来源是正常合法的，因此会使用 DNS 去反查客户端的主机名\n# 不过如果是在内网互连，这项目设定为 no 会让联机达成速度比较快。\n```\n基本上，CentOS 预设的 sshd 服务已经算是挺安全的了，不过还不够！建议你 (1)将 root 的登入权限取消； (2)将 ssh 版本设定为 2 。其他的设定值就请你依照自己的喜好来设定了。 通常不建议进行随便修改啦！另外，如果你修改过上面这个档案(/etc/ssh/sshd_config)，那么就必需要重新启动一次 sshd 这个 daemon 才行！亦即是：\n```bash\n$ /etc/init.d/sshd restart\n```\n\n## 制作不用密码可立即登入的 ssh 用户\n\n三个步骤\n```bash\n1、客户端建立两把钥匙：想一想，在密钥系统中，是公钥比较重要还是私钥比较重要？ 当然是私钥比较重要！因此私钥才是解密的关键啊！所以啰，这两把钥匙当然得在发起联机的客户端建置才对。利用的指令为 ssh-keygen 这个命令；\n\n2、客户端放置好私钥档案：将 Private Key 放在 Client 上面的家目录，亦即 $HOME/.ssh/ ， 并且得要注意权限喔！\n\n3、将公钥放置服务器端的正确目录与文件名去：最后，将那把 Public Key 放在任何一个你想要用来登入的服务器端的某 User 的家目录内之 .ssh/ 里面的认证档案即可完成整个程序。\n```\n\n### 1. 客户端建立两把钥匙\n\n建立的方法很简单，在 clientlinux.centos.vbird 这部主机上面以 vbirdtsai 的身份来建立两把钥匙即可。 不过，需要注意的是，我们有多种密码算法，如果不指定特殊的算法，则默认以 RSA 算法来处理：\n```bash\n$ ssh-keygen [-t rsa|dsa] <==可选 rsa 或 dsa\n$ ssh-keygen  <==用预设的方法建立密钥\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/wxnacy/.ssh/id_rsa): <==按 enter\nCreated directory '/home/wxnacy/.ssh'. <==此目录若不存在则会主动建立\nEnter passphrase (empty for no passphrase): <==按 Enter 不给密码\nEnter same passphrase again: <==再输入一次 Enter 吧！\nYour identification has been saved in /home/wxnacy/.ssh/id_rsa. <==私钥档\nYour public key has been saved in /home/wxnacy/.ssh/id_rsa.pub. <==公钥档\nThe key fingerprint is:\n0f:d3:e7:1a:1c:bd:5c:03:f1:19:f1:22:df:9b:cc:08 wxnacy\n\n$ ls -ld ~/.ssh; ls -l ~/.ssh\ndrwx------. 2 wxnacy wxnacy 4096 2017-07-25 12:58 /home/wxnacy/.ssh\n-rw-------. 1 wxnacy wxnacy 1675 2017-07-25 12:58 id_rsa      <==私钥档\n-rw-r--r--. 1 wxnacy wxnacy  416 2017-07-25 12:58 id_rsa.pub  <==公钥档\n```\n请注意上面喔，我的身份是 wxnacy ，所以当我执行 ssh-keygen 时，才会在我的家目录底下的 .ssh/ 这个目录里面产生所需要的两把 Keys ，分别是私钥 (id_rsa) 与公钥 (id_rsa.pub)。 ~/.ssh/ 目录必须要是 700 的权限才行！另外一个要特别注意的就是那个 id_rsa 的档案权限啦！他必须要是 -rw------- 且属于 vbirdtsai 自己才行！否则在未来密钥比对的过程当中，可能会被判定为危险而无法成功的以公私钥成对档案的机制来达成联机喔。 其实，建立私钥后预设的权限与文件名放置位置都是正确的，你只要检查过没问题即可。\n\n### 2. 将公钥档案数据上传到服务器上\n\n那如何上传呢？最简单的方法当然就是使用 scp 嘛\n```bash\n$ scp ~/.ssh/id_rsa.pub root@192.168.100.254:~\n```\n\n### 3. 将公钥放置服务器端的正确目录与文件名\n\n还记得 sshd_config 里面谈到的 AuthorizedKeysFile 这个设定值吧？该设定值就是在指定公钥数据应该要放置的文件名啰！所以，我们必须要到服务器端的 dmtsai 这个用户身份下， 将刚刚上传的 id_rsa.pub 数据附加到 authorized_keys 这个档案内才行。作法有点像这样\n\n```bash\n# 1. 建立 ~/.ssh 档案，注意权限需要为 700 喔！\n$ ls -ld .ssh\nls: .ssh: 没有此一档案或目录\n# 由于可能是新建的用户，因此这个目录不存在。不存在才作底下建立目录的行为\n\n$ mkdir .ssh; chmod 700 .ssh\n$ ls -ld .ssh\ndrwx------. 2 dmtsai dmtsai 4096 Jul 25 13:06 .ssh\n# 权限设定中，务必是 700 且属于使用者本人的账号与群组才行！\n\n# 2. 将公钥档案内的数据使用 cat 转存到 authorized_keys 内\n$ ls -l *pub\n-rw-r--r--. 1 dmtsai dmtsai 416 Jul 25 13:05 id_rsa.pub <==确实有存在\n\n$ cat id_rsa.pub >> .ssh/authorized_keys\n$ chmod 644 .ssh/authorized_keys\n$ ls -l .ssh\n-rw-r--r--. 1 dmtsai dmtsai 416 Jul 25 13:07 authorized_keys\n# 这个档案的权限设定中，就得要是 644 才可以！不可以搞混了！\n```\n接下来在用 ssh 登陆下就不再需要密码了\n\n\n","slug":"linux-2017-08-23-ssh","published":1,"updated":"2017-09-15T15:02:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8v000gkjxvcpgcaw5l","content":"<p>[TOC]</p>\n<p><a href=\"http://cn.linux.vbird.org/linux_server/0310telnetssh.php#new_serverkey\" target=\"_blank\" rel=\"external\">原文</a></p>\n<h2><span id=\"shi-yong\">使用</span><a href=\"#shi-yong\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh [-f] [-o 参数项目] [-p 非正规埠口] [账号@]IP [指令]</div><div class=\"line\"></div><div class=\"line\">选项与参数：</div><div class=\"line\">-f ： 需要配合后面的 [指令] ，不登入远程主机直接发送一个指令过去而已；</div><div class=\"line\">-o 参数项目：主要的参数项目有：</div><div class=\"line\">\tConnectTimeout=秒数 ：联机等待的秒数，减少等待的时间</div><div class=\"line\">\tStrictHostKeyChecking=[yes|no|ask]：预设是 ask，若要让 public key</div><div class=\"line\">           主动加入 known_hosts ，则可以设定为 no 即可。</div><div class=\"line\">-p ：如果你的 sshd 服务启动在非正规的埠口 (22)，需使用此项目；</div><div class=\"line\">[指令] ：不登入远程主机，直接发送指令过去。但与 -f 意义不太相同。</div></pre></td></tr></table></figure>\n<p>使用root用户登录远程主机<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh root@server</div></pre></td></tr></table></figure></p>\n<p>如果本机用户和想要登录的用户相同则可以直接输入地址登陆(但不建议这样做)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh server</div></pre></td></tr></table></figure></p>\n<p>登入对方主机执行过指令后立刻离开的方式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh student@127.0.0.1 find / &amp;&gt; ~/find1.log</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 此时你会发现怎么画面卡住了？这是因为上头的指令会造成，你已经登入远程主机，</span></div><div class=\"line\"><span class=\"comment\"># 但是执行的指令尚未跑完，因此你会在等待当中。那如何指定系统自己跑？</span></div></pre></td></tr></table></figure></p>\n<p>与上题相同，但是让对方主机自己跑该指令，你立刻回到近端主机继续工作<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -f student@127.0.0.1 find / &amp;&gt; ~/find1.log</div><div class=\"line\"><span class=\"comment\"># 此时你会立刻注销 127.0.0.1 ，但 find 指令会自己在远程服务器跑喔！</span></div></pre></td></tr></table></figure></p>\n<p>删除掉 known_hosts 后，重新使用 root 联机到本机，且自动加上公钥记录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rm ~/.ssh/known_hosts</div><div class=\"line\">$ ssh -o StrictHostKeyChecking=no root@localhost</div><div class=\"line\"></div><div class=\"line\">Warning: Permanently added <span class=\"string\">'localhost'</span> (RSA) to the list of known hosts.</div><div class=\"line\">root@localhost<span class=\"string\">'s password:</span></div><div class=\"line\"><span class=\"string\"># 如上所示，不会问你 yes 或 no 啦！直接会写入 ~/.ssh/known_hosts 当中！</span></div></pre></td></tr></table></figure></p>\n<h2><span id=\"sshd-fu-wu-qi-xi-bu-she-ding\">sshd 服务器细部设定</span><a href=\"#sshd-fu-wu-qi-xi-bu-she-ding\" class=\"header-anchor\"></a></h2><p>基本上，所有的 sshd 服务器详细设定都放在 /etc/ssh/sshd_config 里面！不过，每个 Linux distribution 的预设设定都不太相同，所以我们有必要来了解一下整个设定值的意义为何才好！ 同时请注意，在预设的档案内，只要是预设有出现且被批注的设定值 (设定值前面加 #)，即为『默认值！』，你可以依据它来修改的哩。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim /etc/ssh/sshd_config</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 1. 关于 SSH Server 的整体设定，包含使用的 port 啦，以及使用的密码演算方式</span></div><div class=\"line\"><span class=\"comment\"># Port 22</span></div><div class=\"line\"><span class=\"comment\"># SSH 预设使用 22 这个port，也可以使用多个port，即重复使用 port 这个设定项目！</span></div><div class=\"line\"><span class=\"comment\"># 例如想要开放 sshd 在 22 与 443 ，则多加一行内容为：『 Port 443 』</span></div><div class=\"line\"><span class=\"comment\"># 然后重新启动 sshd 这样就好了！不过，不建议修改 port number 啦！</span></div><div class=\"line\"></div><div class=\"line\">Protocol 2</div><div class=\"line\"><span class=\"comment\"># 选择的 SSH 协议版本，可以是 1 也可以是 2 ，CentOS 5.x 预设是仅支援 V2。</span></div><div class=\"line\"><span class=\"comment\"># 如果想要支持旧版 V1 ，就得要使用『 Protocol 2,1 』才行。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ListenAddress 0.0.0.0</span></div><div class=\"line\"><span class=\"comment\"># 监听的主机适配器！举个例子来说，如果你有两个 IP，分别是 192.168.1.100 及 </span></div><div class=\"line\"><span class=\"comment\"># 192.168.100.254，假设你只想要让 192.168.1.100 可以监听 sshd ，那就这样写：</span></div><div class=\"line\"><span class=\"comment\"># 『 ListenAddress 192.168.1.100 』默认值是监听所有接口的 SSH 要求</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># PidFile /var/run/sshd.pid</span></div><div class=\"line\"><span class=\"comment\"># 可以放置 SSHD 这个 PID 的档案！上述为默认值</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># LoginGraceTime 2m</span></div><div class=\"line\"><span class=\"comment\"># 当使用者连上 SSH server 之后，会出现输入密码的画面，在该画面中，</span></div><div class=\"line\"><span class=\"comment\"># 在多久时间内没有成功连上 SSH server 就强迫断线！若无单位则默认时间为秒！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Compression delayed</span></div><div class=\"line\"><span class=\"comment\"># 指定何时开始使用压缩数据模式进行传输。有 yes, no 与登入后才将数据压缩 (delayed)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 2. 说明主机的 Private Key 放置的档案，预设使用下面的档案即可！</span></div><div class=\"line\"><span class=\"comment\"># HostKey /etc/ssh/ssh_host_key        # SSH version 1 使用的私钥</span></div><div class=\"line\"><span class=\"comment\"># HostKey /etc/ssh/ssh_host_rsa_key    # SSH version 2 使用的 RSA 私钥</span></div><div class=\"line\"><span class=\"comment\"># HostKey /etc/ssh/ssh_host_dsa_key    # SSH version 2 使用的 DSA 私钥</span></div><div class=\"line\"><span class=\"comment\"># 还记得我们在主机的 SSH 联机流程里面谈到的，这里就是 Host Key ～</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 3. 关于登录文件的讯息数据放置与 daemon 的名称！</span></div><div class=\"line\">SyslogFacility AUTHPRIV</div><div class=\"line\"><span class=\"comment\"># 当有人使用 SSH 登入系统的时候，SSH 会记录信息，这个信息要记录在什么 daemon name</span></div><div class=\"line\"><span class=\"comment\"># 底下？预设是以 AUTH 来设定的，即是 /var/log/secure 里面！什么？忘记了！</span></div><div class=\"line\"><span class=\"comment\"># 回到 Linux 基础去翻一下。其他可用的 daemon name 为：DAEMON,USER,AUTH,</span></div><div class=\"line\"><span class=\"comment\"># LOCAL0,LOCAL1,LOCAL2,LOCAL3,LOCAL4,LOCAL5,</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># LogLevel INFO</span></div><div class=\"line\"><span class=\"comment\"># 登录记录的等级！嘿嘿！任何讯息！同样的，忘记了就回去参考！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 4. 安全设定项目！极重要！</span></div><div class=\"line\"><span class=\"comment\"># 4.1 登入设定部分</span></div><div class=\"line\"><span class=\"comment\"># PermitRootLogin yes</span></div><div class=\"line\"><span class=\"comment\"># 是否允许 root 登入！预设是允许的，但是建议设定成 no！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># StrictModes yes</span></div><div class=\"line\"><span class=\"comment\"># 是否让 sshd 去检查用户家目录或相关档案的权限数据，</span></div><div class=\"line\"><span class=\"comment\"># 这是为了担心使用者将某些重要档案的权限设错，可能会导致一些问题所致。</span></div><div class=\"line\"><span class=\"comment\"># 例如使用者的 ~.ssh/ 权限设错时，某些特殊情况下会不许用户登入</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># PubkeyAuthentication yes</span></div><div class=\"line\"><span class=\"comment\"># AuthorizedKeysFile      .ssh/authorized_keys</span></div><div class=\"line\"><span class=\"comment\"># 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。</span></div><div class=\"line\"><span class=\"comment\"># 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内</span></div><div class=\"line\"></div><div class=\"line\">PasswordAuthentication yes</div><div class=\"line\"><span class=\"comment\"># 密码验证当然是需要的！所以这里写 yes 啰！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># PermitEmptyPasswords no</span></div><div class=\"line\"><span class=\"comment\"># 若上面那一项如果设定为 yes 的话，这一项就最好设定为 no ，</span></div><div class=\"line\"><span class=\"comment\"># 这个项目在是否允许以空的密码登入！当然不许！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 4.2 认证部分</span></div><div class=\"line\"><span class=\"comment\"># RhostsAuthentication no</span></div><div class=\"line\"><span class=\"comment\"># 本机系统不使用 .rhosts，因为仅使用 .rhosts太不安全了，所以这里一定要设定为 no</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># IgnoreRhosts yes</span></div><div class=\"line\"><span class=\"comment\"># 是否取消使用 ~/.ssh/.rhosts 来做为认证！当然是！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># RhostsRSAAuthentication no #</span></div><div class=\"line\"><span class=\"comment\"># 这个选项是专门给 version 1 用的，使用 rhosts 档案在 /etc/hosts.equiv</span></div><div class=\"line\"><span class=\"comment\"># 配合 RSA 演算方式来进行认证！不要使用啊！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># HostbasedAuthentication no</span></div><div class=\"line\"><span class=\"comment\"># 这个项目与上面的项目类似，不过是给 version 2 使用的！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># IgnoreUserKnownHosts no</span></div><div class=\"line\"><span class=\"comment\"># 是否忽略家目录内的 ~/.ssh/known_hosts 这个档案所记录的主机内容？</span></div><div class=\"line\"><span class=\"comment\"># 当然不要忽略，所以这里就是 no 啦！</span></div><div class=\"line\"></div><div class=\"line\">ChallengeResponseAuthentication no</div><div class=\"line\"><span class=\"comment\"># 允许任何的密码认证！所以，任何 login.conf 规定的认证方式，均可适用！</span></div><div class=\"line\"><span class=\"comment\"># 但目前我们比较喜欢使用 PAM 模块帮忙管理认证，因此这个选项可以设定为 no 喔！</span></div><div class=\"line\"></div><div class=\"line\">UsePAM yes</div><div class=\"line\"><span class=\"comment\"># 利用 PAM 管理使用者认证有很多好处，可以记录与管理。</span></div><div class=\"line\"><span class=\"comment\"># 所以这里我们建议你使用 UsePAM 且 ChallengeResponseAuthentication 设定为 no </span></div><div class=\"line\">　</div><div class=\"line\"><span class=\"comment\"># 4.3 与 Kerberos 有关的参数设定！因为我们没有 Kerberos 主机，所以底下不用设定！</span></div><div class=\"line\"><span class=\"comment\"># KerberosAuthentication no</span></div><div class=\"line\"><span class=\"comment\"># KerberosOrLocalPasswd yes</span></div><div class=\"line\"><span class=\"comment\"># KerberosTicketCleanup yes</span></div><div class=\"line\"><span class=\"comment\"># KerberosTgtPassing no</span></div><div class=\"line\">　</div><div class=\"line\"><span class=\"comment\"># 4.4 底下是有关在 X-Window 底下使用的相关设定！</span></div><div class=\"line\">X11Forwarding yes</div><div class=\"line\"><span class=\"comment\"># X11DisplayOffset 10</span></div><div class=\"line\"><span class=\"comment\"># X11UseLocalhost yes</span></div><div class=\"line\"><span class=\"comment\"># 比较重要的是 X11Forwarding 项目，他可以让窗口的数据透过 ssh 信道来传送喔！</span></div><div class=\"line\"><span class=\"comment\"># 在本章后面比较进阶的 ssh 使用方法中会谈到。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 4.5 登入后的项目：</span></div><div class=\"line\"><span class=\"comment\"># PrintMotd yes</span></div><div class=\"line\"><span class=\"comment\"># 登入后是否显示出一些信息呢？例如上次登入的时间、地点等等，预设是 yes</span></div><div class=\"line\"><span class=\"comment\"># 亦即是打印出 /etc/motd 这个档案的内容。但是，如果为了安全，可以考虑改为 no ！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># PrintLastLog yes</span></div><div class=\"line\"><span class=\"comment\"># 显示上次登入的信息！可以啊！预设也是 yes ！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># TCPKeepAlive yes</span></div><div class=\"line\"><span class=\"comment\"># 当达成联机后，服务器会一直传送 TCP 封包给客户端藉以判断对方式否一直存在联机。</span></div><div class=\"line\"><span class=\"comment\"># 不过，如果联机时中间的路由器暂时停止服务几秒钟，也会让联机中断喔！</span></div><div class=\"line\"><span class=\"comment\"># 在这个情况下，任何一端死掉后，SSH可以立刻知道！而不会有僵尸程序的发生！</span></div><div class=\"line\"><span class=\"comment\"># 但如果你的网络或路由器常常不稳定，那么可以设定为 no 的啦！</span></div><div class=\"line\"></div><div class=\"line\">UsePrivilegeSeparation yes</div><div class=\"line\"><span class=\"comment\"># 是否权限较低的程序来提供用户操作。我们知道 sshd 启动在 port 22 ，</span></div><div class=\"line\"><span class=\"comment\"># 因此启动的程序是属于 root 的身份。那么当 student 登入后，这个设定值</span></div><div class=\"line\"><span class=\"comment\"># 会让 sshd 产生一个属于 sutdent 的 sshd 程序来使用，对系统较安全</span></div><div class=\"line\"></div><div class=\"line\">MaxStartups 10</div><div class=\"line\"><span class=\"comment\"># 同时允许几个尚未登入的联机画面？当我们连上 SSH ，但是尚未输入密码时，</span></div><div class=\"line\"><span class=\"comment\"># 这个时候就是我们所谓的联机画面啦！在这个联机画面中，为了保护主机，</span></div><div class=\"line\"><span class=\"comment\"># 所以需要设定最大值，预设最多十个联机画面，而已经建立联机的不计算在这十个当中</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 4.6 关于用户抵挡的设定项目：</span></div><div class=\"line\">DenyUsers *</div><div class=\"line\"><span class=\"comment\"># 设定受抵挡的使用者名称，如果是全部的使用者，那就是全部挡吧！</span></div><div class=\"line\"><span class=\"comment\"># 若是部分使用者，可以将该账号填入！例如下列！</span></div><div class=\"line\">DenyUsers <span class=\"built_in\">test</span></div><div class=\"line\"></div><div class=\"line\">DenyGroups <span class=\"built_in\">test</span></div><div class=\"line\"><span class=\"comment\"># 与 DenyUsers 相同！仅抵挡几个群组而已！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 5. 关于 SFTP 服务与其他的设定项目！</span></div><div class=\"line\">Subsystem       sftp    /usr/lib/ssh/sftp-server</div><div class=\"line\"><span class=\"comment\"># UseDNS yes</span></div><div class=\"line\"><span class=\"comment\"># 一般来说，为了要判断客户端来源是正常合法的，因此会使用 DNS 去反查客户端的主机名</span></div><div class=\"line\"><span class=\"comment\"># 不过如果是在内网互连，这项目设定为 no 会让联机达成速度比较快。</span></div></pre></td></tr></table></figure></p>\n<p>基本上，CentOS 预设的 sshd 服务已经算是挺安全的了，不过还不够！建议你 (1)将 root 的登入权限取消； (2)将 ssh 版本设定为 2 。其他的设定值就请你依照自己的喜好来设定了。 通常不建议进行随便修改啦！另外，如果你修改过上面这个档案(/etc/ssh/sshd_config)，那么就必需要重新启动一次 sshd 这个 daemon 才行！亦即是：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ /etc/init.d/sshd restart</div></pre></td></tr></table></figure></p>\n<h2><span id=\"zhi-zuo-bu-yong-mi-ma-ke-li-ji-deng-ru-de-ssh-yong-hu\">制作不用密码可立即登入的 ssh 用户</span><a href=\"#zhi-zuo-bu-yong-mi-ma-ke-li-ji-deng-ru-de-ssh-yong-hu\" class=\"header-anchor\"></a></h2><p>三个步骤<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1、客户端建立两把钥匙：想一想，在密钥系统中，是公钥比较重要还是私钥比较重要？ 当然是私钥比较重要！因此私钥才是解密的关键啊！所以啰，这两把钥匙当然得在发起联机的客户端建置才对。利用的指令为 ssh-keygen 这个命令；</div><div class=\"line\"></div><div class=\"line\">2、客户端放置好私钥档案：将 Private Key 放在 Client 上面的家目录，亦即 <span class=\"variable\">$HOME</span>/.ssh/ ， 并且得要注意权限喔！</div><div class=\"line\"></div><div class=\"line\">3、将公钥放置服务器端的正确目录与文件名去：最后，将那把 Public Key 放在任何一个你想要用来登入的服务器端的某 User 的家目录内之 .ssh/ 里面的认证档案即可完成整个程序。</div></pre></td></tr></table></figure></p>\n<h3><span id=\"1-ke-hu-duan-jian-li-liang-ba-yao-chi\">1. 客户端建立两把钥匙</span><a href=\"#1-ke-hu-duan-jian-li-liang-ba-yao-chi\" class=\"header-anchor\"></a></h3><p>建立的方法很简单，在 clientlinux.centos.vbird 这部主机上面以 vbirdtsai 的身份来建立两把钥匙即可。 不过，需要注意的是，我们有多种密码算法，如果不指定特殊的算法，则默认以 RSA 算法来处理：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen [-t rsa|dsa] &lt;==可选 rsa 或 dsa</div><div class=\"line\">$ ssh-keygen  &lt;==用预设的方法建立密钥</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/home/wxnacy/.ssh/id_rsa): &lt;==按 enter</div><div class=\"line\">Created directory <span class=\"string\">'/home/wxnacy/.ssh'</span>. &lt;==此目录若不存在则会主动建立</div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): &lt;==按 Enter 不给密码</div><div class=\"line\">Enter same passphrase again: &lt;==再输入一次 Enter 吧！</div><div class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /home/wxnacy/.ssh/id_rsa. &lt;==私钥档</div><div class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /home/wxnacy/.ssh/id_rsa.pub. &lt;==公钥档</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">0f:d3:e7:1a:1c:bd:5c:03:f1:19:f1:22:df:9b:cc:08 wxnacy</div><div class=\"line\"></div><div class=\"line\">$ ls -ld ~/.ssh; ls -l ~/.ssh</div><div class=\"line\">drwx------. 2 wxnacy wxnacy 4096 2017-07-25 12:58 /home/wxnacy/.ssh</div><div class=\"line\">-rw-------. 1 wxnacy wxnacy 1675 2017-07-25 12:58 id_rsa      &lt;==私钥档</div><div class=\"line\">-rw-r--r--. 1 wxnacy wxnacy  416 2017-07-25 12:58 id_rsa.pub  &lt;==公钥档</div></pre></td></tr></table></figure></p>\n<p>请注意上面喔，我的身份是 wxnacy ，所以当我执行 ssh-keygen 时，才会在我的家目录底下的 .ssh/ 这个目录里面产生所需要的两把 Keys ，分别是私钥 (id_rsa) 与公钥 (id_rsa.pub)。 ~/.ssh/ 目录必须要是 700 的权限才行！另外一个要特别注意的就是那个 id_rsa 的档案权限啦！他必须要是 -rw——- 且属于 vbirdtsai 自己才行！否则在未来密钥比对的过程当中，可能会被判定为危险而无法成功的以公私钥成对档案的机制来达成联机喔。 其实，建立私钥后预设的权限与文件名放置位置都是正确的，你只要检查过没问题即可。</p>\n<h3><span id=\"2-jiang-gong-yao-dang-an-shu-ju-shang-chuan-dao-fu-wu-qi-shang\">2. 将公钥档案数据上传到服务器上</span><a href=\"#2-jiang-gong-yao-dang-an-shu-ju-shang-chuan-dao-fu-wu-qi-shang\" class=\"header-anchor\"></a></h3><p>那如何上传呢？最简单的方法当然就是使用 scp 嘛<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ scp ~/.ssh/id_rsa.pub root@192.168.100.254:~</div></pre></td></tr></table></figure></p>\n<h3><span id=\"3-jiang-gong-yao-fang-zhi-fu-wu-qi-duan-de-zheng-que-mu-lu-yu-wen-jian-ming\">3. 将公钥放置服务器端的正确目录与文件名</span><a href=\"#3-jiang-gong-yao-fang-zhi-fu-wu-qi-duan-de-zheng-que-mu-lu-yu-wen-jian-ming\" class=\"header-anchor\"></a></h3><p>还记得 sshd_config 里面谈到的 AuthorizedKeysFile 这个设定值吧？该设定值就是在指定公钥数据应该要放置的文件名啰！所以，我们必须要到服务器端的 dmtsai 这个用户身份下， 将刚刚上传的 id_rsa.pub 数据附加到 authorized_keys 这个档案内才行。作法有点像这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 1. 建立 ~/.ssh 档案，注意权限需要为 700 喔！</span></div><div class=\"line\">$ ls -ld .ssh</div><div class=\"line\">ls: .ssh: 没有此一档案或目录</div><div class=\"line\"><span class=\"comment\"># 由于可能是新建的用户，因此这个目录不存在。不存在才作底下建立目录的行为</span></div><div class=\"line\"></div><div class=\"line\">$ mkdir .ssh; chmod 700 .ssh</div><div class=\"line\">$ ls -ld .ssh</div><div class=\"line\">drwx------. 2 dmtsai dmtsai 4096 Jul 25 13:06 .ssh</div><div class=\"line\"><span class=\"comment\"># 权限设定中，务必是 700 且属于使用者本人的账号与群组才行！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 2. 将公钥档案内的数据使用 cat 转存到 authorized_keys 内</span></div><div class=\"line\">$ ls -l *pub</div><div class=\"line\">-rw-r--r--. 1 dmtsai dmtsai 416 Jul 25 13:05 id_rsa.pub &lt;==确实有存在</div><div class=\"line\"></div><div class=\"line\">$ cat id_rsa.pub &gt;&gt; .ssh/authorized_keys</div><div class=\"line\">$ chmod 644 .ssh/authorized_keys</div><div class=\"line\">$ ls -l .ssh</div><div class=\"line\">-rw-r--r--. 1 dmtsai dmtsai 416 Jul 25 13:07 authorized_keys</div><div class=\"line\"><span class=\"comment\"># 这个档案的权限设定中，就得要是 644 才可以！不可以搞混了！</span></div></pre></td></tr></table></figure>\n<p>接下来在用 ssh 登陆下就不再需要密码了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<p><a href=\"http://cn.linux.vbird.org/linux_server/0310telnetssh.php#new_serverkey\" target=\"_blank\" rel=\"external\">原文</a></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh [-f] [-o 参数项目] [-p 非正规埠口] [账号@]IP [指令]</div><div class=\"line\"></div><div class=\"line\">选项与参数：</div><div class=\"line\">-f ： 需要配合后面的 [指令] ，不登入远程主机直接发送一个指令过去而已；</div><div class=\"line\">-o 参数项目：主要的参数项目有：</div><div class=\"line\">\tConnectTimeout=秒数 ：联机等待的秒数，减少等待的时间</div><div class=\"line\">\tStrictHostKeyChecking=[yes|no|ask]：预设是 ask，若要让 public key</div><div class=\"line\">           主动加入 known_hosts ，则可以设定为 no 即可。</div><div class=\"line\">-p ：如果你的 sshd 服务启动在非正规的埠口 (22)，需使用此项目；</div><div class=\"line\">[指令] ：不登入远程主机，直接发送指令过去。但与 -f 意义不太相同。</div></pre></td></tr></table></figure>\n<p>使用root用户登录远程主机<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh root@server</div></pre></td></tr></table></figure></p>\n<p>如果本机用户和想要登录的用户相同则可以直接输入地址登陆(但不建议这样做)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh server</div></pre></td></tr></table></figure></p>\n<p>登入对方主机执行过指令后立刻离开的方式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh student@127.0.0.1 find / &amp;&gt; ~/find1.log</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 此时你会发现怎么画面卡住了？这是因为上头的指令会造成，你已经登入远程主机，</span></div><div class=\"line\"><span class=\"comment\"># 但是执行的指令尚未跑完，因此你会在等待当中。那如何指定系统自己跑？</span></div></pre></td></tr></table></figure></p>\n<p>与上题相同，但是让对方主机自己跑该指令，你立刻回到近端主机继续工作<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -f student@127.0.0.1 find / &amp;&gt; ~/find1.log</div><div class=\"line\"><span class=\"comment\"># 此时你会立刻注销 127.0.0.1 ，但 find 指令会自己在远程服务器跑喔！</span></div></pre></td></tr></table></figure></p>\n<p>删除掉 known_hosts 后，重新使用 root 联机到本机，且自动加上公钥记录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rm ~/.ssh/known_hosts</div><div class=\"line\">$ ssh -o StrictHostKeyChecking=no root@localhost</div><div class=\"line\"></div><div class=\"line\">Warning: Permanently added <span class=\"string\">'localhost'</span> (RSA) to the list of known hosts.</div><div class=\"line\">root@localhost<span class=\"string\">'s password:</span></div><div class=\"line\"><span class=\"string\"># 如上所示，不会问你 yes 或 no 啦！直接会写入 ~/.ssh/known_hosts 当中！</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"sshd-服务器细部设定\"><a href=\"#sshd-服务器细部设定\" class=\"headerlink\" title=\"sshd 服务器细部设定\"></a>sshd 服务器细部设定</h2><p>基本上，所有的 sshd 服务器详细设定都放在 /etc/ssh/sshd_config 里面！不过，每个 Linux distribution 的预设设定都不太相同，所以我们有必要来了解一下整个设定值的意义为何才好！ 同时请注意，在预设的档案内，只要是预设有出现且被批注的设定值 (设定值前面加 #)，即为『默认值！』，你可以依据它来修改的哩。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim /etc/ssh/sshd_config</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 1. 关于 SSH Server 的整体设定，包含使用的 port 啦，以及使用的密码演算方式</span></div><div class=\"line\"><span class=\"comment\"># Port 22</span></div><div class=\"line\"><span class=\"comment\"># SSH 预设使用 22 这个port，也可以使用多个port，即重复使用 port 这个设定项目！</span></div><div class=\"line\"><span class=\"comment\"># 例如想要开放 sshd 在 22 与 443 ，则多加一行内容为：『 Port 443 』</span></div><div class=\"line\"><span class=\"comment\"># 然后重新启动 sshd 这样就好了！不过，不建议修改 port number 啦！</span></div><div class=\"line\"></div><div class=\"line\">Protocol 2</div><div class=\"line\"><span class=\"comment\"># 选择的 SSH 协议版本，可以是 1 也可以是 2 ，CentOS 5.x 预设是仅支援 V2。</span></div><div class=\"line\"><span class=\"comment\"># 如果想要支持旧版 V1 ，就得要使用『 Protocol 2,1 』才行。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ListenAddress 0.0.0.0</span></div><div class=\"line\"><span class=\"comment\"># 监听的主机适配器！举个例子来说，如果你有两个 IP，分别是 192.168.1.100 及 </span></div><div class=\"line\"><span class=\"comment\"># 192.168.100.254，假设你只想要让 192.168.1.100 可以监听 sshd ，那就这样写：</span></div><div class=\"line\"><span class=\"comment\"># 『 ListenAddress 192.168.1.100 』默认值是监听所有接口的 SSH 要求</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># PidFile /var/run/sshd.pid</span></div><div class=\"line\"><span class=\"comment\"># 可以放置 SSHD 这个 PID 的档案！上述为默认值</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># LoginGraceTime 2m</span></div><div class=\"line\"><span class=\"comment\"># 当使用者连上 SSH server 之后，会出现输入密码的画面，在该画面中，</span></div><div class=\"line\"><span class=\"comment\"># 在多久时间内没有成功连上 SSH server 就强迫断线！若无单位则默认时间为秒！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Compression delayed</span></div><div class=\"line\"><span class=\"comment\"># 指定何时开始使用压缩数据模式进行传输。有 yes, no 与登入后才将数据压缩 (delayed)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 2. 说明主机的 Private Key 放置的档案，预设使用下面的档案即可！</span></div><div class=\"line\"><span class=\"comment\"># HostKey /etc/ssh/ssh_host_key        # SSH version 1 使用的私钥</span></div><div class=\"line\"><span class=\"comment\"># HostKey /etc/ssh/ssh_host_rsa_key    # SSH version 2 使用的 RSA 私钥</span></div><div class=\"line\"><span class=\"comment\"># HostKey /etc/ssh/ssh_host_dsa_key    # SSH version 2 使用的 DSA 私钥</span></div><div class=\"line\"><span class=\"comment\"># 还记得我们在主机的 SSH 联机流程里面谈到的，这里就是 Host Key ～</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 3. 关于登录文件的讯息数据放置与 daemon 的名称！</span></div><div class=\"line\">SyslogFacility AUTHPRIV</div><div class=\"line\"><span class=\"comment\"># 当有人使用 SSH 登入系统的时候，SSH 会记录信息，这个信息要记录在什么 daemon name</span></div><div class=\"line\"><span class=\"comment\"># 底下？预设是以 AUTH 来设定的，即是 /var/log/secure 里面！什么？忘记了！</span></div><div class=\"line\"><span class=\"comment\"># 回到 Linux 基础去翻一下。其他可用的 daemon name 为：DAEMON,USER,AUTH,</span></div><div class=\"line\"><span class=\"comment\"># LOCAL0,LOCAL1,LOCAL2,LOCAL3,LOCAL4,LOCAL5,</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># LogLevel INFO</span></div><div class=\"line\"><span class=\"comment\"># 登录记录的等级！嘿嘿！任何讯息！同样的，忘记了就回去参考！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 4. 安全设定项目！极重要！</span></div><div class=\"line\"><span class=\"comment\"># 4.1 登入设定部分</span></div><div class=\"line\"><span class=\"comment\"># PermitRootLogin yes</span></div><div class=\"line\"><span class=\"comment\"># 是否允许 root 登入！预设是允许的，但是建议设定成 no！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># StrictModes yes</span></div><div class=\"line\"><span class=\"comment\"># 是否让 sshd 去检查用户家目录或相关档案的权限数据，</span></div><div class=\"line\"><span class=\"comment\"># 这是为了担心使用者将某些重要档案的权限设错，可能会导致一些问题所致。</span></div><div class=\"line\"><span class=\"comment\"># 例如使用者的 ~.ssh/ 权限设错时，某些特殊情况下会不许用户登入</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># PubkeyAuthentication yes</span></div><div class=\"line\"><span class=\"comment\"># AuthorizedKeysFile      .ssh/authorized_keys</span></div><div class=\"line\"><span class=\"comment\"># 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。</span></div><div class=\"line\"><span class=\"comment\"># 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内</span></div><div class=\"line\"></div><div class=\"line\">PasswordAuthentication yes</div><div class=\"line\"><span class=\"comment\"># 密码验证当然是需要的！所以这里写 yes 啰！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># PermitEmptyPasswords no</span></div><div class=\"line\"><span class=\"comment\"># 若上面那一项如果设定为 yes 的话，这一项就最好设定为 no ，</span></div><div class=\"line\"><span class=\"comment\"># 这个项目在是否允许以空的密码登入！当然不许！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 4.2 认证部分</span></div><div class=\"line\"><span class=\"comment\"># RhostsAuthentication no</span></div><div class=\"line\"><span class=\"comment\"># 本机系统不使用 .rhosts，因为仅使用 .rhosts太不安全了，所以这里一定要设定为 no</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># IgnoreRhosts yes</span></div><div class=\"line\"><span class=\"comment\"># 是否取消使用 ~/.ssh/.rhosts 来做为认证！当然是！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># RhostsRSAAuthentication no #</span></div><div class=\"line\"><span class=\"comment\"># 这个选项是专门给 version 1 用的，使用 rhosts 档案在 /etc/hosts.equiv</span></div><div class=\"line\"><span class=\"comment\"># 配合 RSA 演算方式来进行认证！不要使用啊！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># HostbasedAuthentication no</span></div><div class=\"line\"><span class=\"comment\"># 这个项目与上面的项目类似，不过是给 version 2 使用的！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># IgnoreUserKnownHosts no</span></div><div class=\"line\"><span class=\"comment\"># 是否忽略家目录内的 ~/.ssh/known_hosts 这个档案所记录的主机内容？</span></div><div class=\"line\"><span class=\"comment\"># 当然不要忽略，所以这里就是 no 啦！</span></div><div class=\"line\"></div><div class=\"line\">ChallengeResponseAuthentication no</div><div class=\"line\"><span class=\"comment\"># 允许任何的密码认证！所以，任何 login.conf 规定的认证方式，均可适用！</span></div><div class=\"line\"><span class=\"comment\"># 但目前我们比较喜欢使用 PAM 模块帮忙管理认证，因此这个选项可以设定为 no 喔！</span></div><div class=\"line\"></div><div class=\"line\">UsePAM yes</div><div class=\"line\"><span class=\"comment\"># 利用 PAM 管理使用者认证有很多好处，可以记录与管理。</span></div><div class=\"line\"><span class=\"comment\"># 所以这里我们建议你使用 UsePAM 且 ChallengeResponseAuthentication 设定为 no </span></div><div class=\"line\">　</div><div class=\"line\"><span class=\"comment\"># 4.3 与 Kerberos 有关的参数设定！因为我们没有 Kerberos 主机，所以底下不用设定！</span></div><div class=\"line\"><span class=\"comment\"># KerberosAuthentication no</span></div><div class=\"line\"><span class=\"comment\"># KerberosOrLocalPasswd yes</span></div><div class=\"line\"><span class=\"comment\"># KerberosTicketCleanup yes</span></div><div class=\"line\"><span class=\"comment\"># KerberosTgtPassing no</span></div><div class=\"line\">　</div><div class=\"line\"><span class=\"comment\"># 4.4 底下是有关在 X-Window 底下使用的相关设定！</span></div><div class=\"line\">X11Forwarding yes</div><div class=\"line\"><span class=\"comment\"># X11DisplayOffset 10</span></div><div class=\"line\"><span class=\"comment\"># X11UseLocalhost yes</span></div><div class=\"line\"><span class=\"comment\"># 比较重要的是 X11Forwarding 项目，他可以让窗口的数据透过 ssh 信道来传送喔！</span></div><div class=\"line\"><span class=\"comment\"># 在本章后面比较进阶的 ssh 使用方法中会谈到。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 4.5 登入后的项目：</span></div><div class=\"line\"><span class=\"comment\"># PrintMotd yes</span></div><div class=\"line\"><span class=\"comment\"># 登入后是否显示出一些信息呢？例如上次登入的时间、地点等等，预设是 yes</span></div><div class=\"line\"><span class=\"comment\"># 亦即是打印出 /etc/motd 这个档案的内容。但是，如果为了安全，可以考虑改为 no ！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># PrintLastLog yes</span></div><div class=\"line\"><span class=\"comment\"># 显示上次登入的信息！可以啊！预设也是 yes ！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># TCPKeepAlive yes</span></div><div class=\"line\"><span class=\"comment\"># 当达成联机后，服务器会一直传送 TCP 封包给客户端藉以判断对方式否一直存在联机。</span></div><div class=\"line\"><span class=\"comment\"># 不过，如果联机时中间的路由器暂时停止服务几秒钟，也会让联机中断喔！</span></div><div class=\"line\"><span class=\"comment\"># 在这个情况下，任何一端死掉后，SSH可以立刻知道！而不会有僵尸程序的发生！</span></div><div class=\"line\"><span class=\"comment\"># 但如果你的网络或路由器常常不稳定，那么可以设定为 no 的啦！</span></div><div class=\"line\"></div><div class=\"line\">UsePrivilegeSeparation yes</div><div class=\"line\"><span class=\"comment\"># 是否权限较低的程序来提供用户操作。我们知道 sshd 启动在 port 22 ，</span></div><div class=\"line\"><span class=\"comment\"># 因此启动的程序是属于 root 的身份。那么当 student 登入后，这个设定值</span></div><div class=\"line\"><span class=\"comment\"># 会让 sshd 产生一个属于 sutdent 的 sshd 程序来使用，对系统较安全</span></div><div class=\"line\"></div><div class=\"line\">MaxStartups 10</div><div class=\"line\"><span class=\"comment\"># 同时允许几个尚未登入的联机画面？当我们连上 SSH ，但是尚未输入密码时，</span></div><div class=\"line\"><span class=\"comment\"># 这个时候就是我们所谓的联机画面啦！在这个联机画面中，为了保护主机，</span></div><div class=\"line\"><span class=\"comment\"># 所以需要设定最大值，预设最多十个联机画面，而已经建立联机的不计算在这十个当中</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 4.6 关于用户抵挡的设定项目：</span></div><div class=\"line\">DenyUsers *</div><div class=\"line\"><span class=\"comment\"># 设定受抵挡的使用者名称，如果是全部的使用者，那就是全部挡吧！</span></div><div class=\"line\"><span class=\"comment\"># 若是部分使用者，可以将该账号填入！例如下列！</span></div><div class=\"line\">DenyUsers <span class=\"built_in\">test</span></div><div class=\"line\"></div><div class=\"line\">DenyGroups <span class=\"built_in\">test</span></div><div class=\"line\"><span class=\"comment\"># 与 DenyUsers 相同！仅抵挡几个群组而已！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 5. 关于 SFTP 服务与其他的设定项目！</span></div><div class=\"line\">Subsystem       sftp    /usr/lib/ssh/sftp-server</div><div class=\"line\"><span class=\"comment\"># UseDNS yes</span></div><div class=\"line\"><span class=\"comment\"># 一般来说，为了要判断客户端来源是正常合法的，因此会使用 DNS 去反查客户端的主机名</span></div><div class=\"line\"><span class=\"comment\"># 不过如果是在内网互连，这项目设定为 no 会让联机达成速度比较快。</span></div></pre></td></tr></table></figure></p>\n<p>基本上，CentOS 预设的 sshd 服务已经算是挺安全的了，不过还不够！建议你 (1)将 root 的登入权限取消； (2)将 ssh 版本设定为 2 。其他的设定值就请你依照自己的喜好来设定了。 通常不建议进行随便修改啦！另外，如果你修改过上面这个档案(/etc/ssh/sshd_config)，那么就必需要重新启动一次 sshd 这个 daemon 才行！亦即是：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ /etc/init.d/sshd restart</div></pre></td></tr></table></figure></p>\n<h2 id=\"制作不用密码可立即登入的-ssh-用户\"><a href=\"#制作不用密码可立即登入的-ssh-用户\" class=\"headerlink\" title=\"制作不用密码可立即登入的 ssh 用户\"></a>制作不用密码可立即登入的 ssh 用户</h2><p>三个步骤<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1、客户端建立两把钥匙：想一想，在密钥系统中，是公钥比较重要还是私钥比较重要？ 当然是私钥比较重要！因此私钥才是解密的关键啊！所以啰，这两把钥匙当然得在发起联机的客户端建置才对。利用的指令为 ssh-keygen 这个命令；</div><div class=\"line\"></div><div class=\"line\">2、客户端放置好私钥档案：将 Private Key 放在 Client 上面的家目录，亦即 <span class=\"variable\">$HOME</span>/.ssh/ ， 并且得要注意权限喔！</div><div class=\"line\"></div><div class=\"line\">3、将公钥放置服务器端的正确目录与文件名去：最后，将那把 Public Key 放在任何一个你想要用来登入的服务器端的某 User 的家目录内之 .ssh/ 里面的认证档案即可完成整个程序。</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-客户端建立两把钥匙\"><a href=\"#1-客户端建立两把钥匙\" class=\"headerlink\" title=\"1. 客户端建立两把钥匙\"></a>1. 客户端建立两把钥匙</h3><p>建立的方法很简单，在 clientlinux.centos.vbird 这部主机上面以 vbirdtsai 的身份来建立两把钥匙即可。 不过，需要注意的是，我们有多种密码算法，如果不指定特殊的算法，则默认以 RSA 算法来处理：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen [-t rsa|dsa] &lt;==可选 rsa 或 dsa</div><div class=\"line\">$ ssh-keygen  &lt;==用预设的方法建立密钥</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/home/wxnacy/.ssh/id_rsa): &lt;==按 enter</div><div class=\"line\">Created directory <span class=\"string\">'/home/wxnacy/.ssh'</span>. &lt;==此目录若不存在则会主动建立</div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): &lt;==按 Enter 不给密码</div><div class=\"line\">Enter same passphrase again: &lt;==再输入一次 Enter 吧！</div><div class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /home/wxnacy/.ssh/id_rsa. &lt;==私钥档</div><div class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /home/wxnacy/.ssh/id_rsa.pub. &lt;==公钥档</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">0f:d3:e7:1a:1c:bd:5c:03:f1:19:f1:22:df:9b:cc:08 wxnacy</div><div class=\"line\"></div><div class=\"line\">$ ls -ld ~/.ssh; ls -l ~/.ssh</div><div class=\"line\">drwx------. 2 wxnacy wxnacy 4096 2017-07-25 12:58 /home/wxnacy/.ssh</div><div class=\"line\">-rw-------. 1 wxnacy wxnacy 1675 2017-07-25 12:58 id_rsa      &lt;==私钥档</div><div class=\"line\">-rw-r--r--. 1 wxnacy wxnacy  416 2017-07-25 12:58 id_rsa.pub  &lt;==公钥档</div></pre></td></tr></table></figure></p>\n<p>请注意上面喔，我的身份是 wxnacy ，所以当我执行 ssh-keygen 时，才会在我的家目录底下的 .ssh/ 这个目录里面产生所需要的两把 Keys ，分别是私钥 (id_rsa) 与公钥 (id_rsa.pub)。 ~/.ssh/ 目录必须要是 700 的权限才行！另外一个要特别注意的就是那个 id_rsa 的档案权限啦！他必须要是 -rw——- 且属于 vbirdtsai 自己才行！否则在未来密钥比对的过程当中，可能会被判定为危险而无法成功的以公私钥成对档案的机制来达成联机喔。 其实，建立私钥后预设的权限与文件名放置位置都是正确的，你只要检查过没问题即可。</p>\n<h3 id=\"2-将公钥档案数据上传到服务器上\"><a href=\"#2-将公钥档案数据上传到服务器上\" class=\"headerlink\" title=\"2. 将公钥档案数据上传到服务器上\"></a>2. 将公钥档案数据上传到服务器上</h3><p>那如何上传呢？最简单的方法当然就是使用 scp 嘛<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ scp ~/.ssh/id_rsa.pub root@192.168.100.254:~</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-将公钥放置服务器端的正确目录与文件名\"><a href=\"#3-将公钥放置服务器端的正确目录与文件名\" class=\"headerlink\" title=\"3. 将公钥放置服务器端的正确目录与文件名\"></a>3. 将公钥放置服务器端的正确目录与文件名</h3><p>还记得 sshd_config 里面谈到的 AuthorizedKeysFile 这个设定值吧？该设定值就是在指定公钥数据应该要放置的文件名啰！所以，我们必须要到服务器端的 dmtsai 这个用户身份下， 将刚刚上传的 id_rsa.pub 数据附加到 authorized_keys 这个档案内才行。作法有点像这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 1. 建立 ~/.ssh 档案，注意权限需要为 700 喔！</span></div><div class=\"line\">$ ls -ld .ssh</div><div class=\"line\">ls: .ssh: 没有此一档案或目录</div><div class=\"line\"><span class=\"comment\"># 由于可能是新建的用户，因此这个目录不存在。不存在才作底下建立目录的行为</span></div><div class=\"line\"></div><div class=\"line\">$ mkdir .ssh; chmod 700 .ssh</div><div class=\"line\">$ ls -ld .ssh</div><div class=\"line\">drwx------. 2 dmtsai dmtsai 4096 Jul 25 13:06 .ssh</div><div class=\"line\"><span class=\"comment\"># 权限设定中，务必是 700 且属于使用者本人的账号与群组才行！</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 2. 将公钥档案内的数据使用 cat 转存到 authorized_keys 内</span></div><div class=\"line\">$ ls -l *pub</div><div class=\"line\">-rw-r--r--. 1 dmtsai dmtsai 416 Jul 25 13:05 id_rsa.pub &lt;==确实有存在</div><div class=\"line\"></div><div class=\"line\">$ cat id_rsa.pub &gt;&gt; .ssh/authorized_keys</div><div class=\"line\">$ chmod 644 .ssh/authorized_keys</div><div class=\"line\">$ ls -l .ssh</div><div class=\"line\">-rw-r--r--. 1 dmtsai dmtsai 416 Jul 25 13:07 authorized_keys</div><div class=\"line\"><span class=\"comment\"># 这个档案的权限设定中，就得要是 644 才可以！不可以搞混了！</span></div></pre></td></tr></table></figure>\n<p>接下来在用 ssh 登陆下就不再需要密码了</p>\n"},{"title":"Linux 使用管道命令 grep","date":"2017-09-10T16:00:00.000Z","_content":"\n\n> 文件搜索用 find，文本搜索用 grep\n\n```bash\n$ grep [-aicv..] [--color=auto] '搜寻字符串' filename\n```\n\n- **-a** 不要忽略二进制数据。\n- **-A&lt;显示列数&gt;** 除了显示符合范本样式的那一行之外，并显示该行之后的内容。\n- **-b** 在显示符合范本样式的那一行之外，并显示该行之前的内容。\n- **-c** 计算符合范本样式的列数。\n- **-C&lt;显示列数&gt;或-&lt;显示列数&gt;**  除了显示符合范本样式的那一列之外，并显示该列之前后的内容。\n- **-d&lt;进行动作&gt;** 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。\n- **-e&lt;范本样式&gt;** 指定字符串作为查找文件内容的范本样式。\n- **-E** 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。\n- **-f&lt;范本文件&gt;** 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。\n- **-F** 将范本样式视为固定字符串的列表。\n- **-G** 将范本样式视为普通的表示法来使用。\n- **-h** 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。\n- **-H** 在显示符合范本样式的那一列之前，标示该列的文件名称。\n- **-i** 胡列字符大小写的差别。\n- **-l** 列出文件内容符合指定的范本样式的文件名称。\n- **-L** 列出文件内容不符合指定的范本样式的文件名称。\n- **-n** 在显示符合范本样式的那一列之前，标示出该列的编号。\n- **-q** 不显示任何信息。\n- **-R/-r **此参数的效果和指定&ldquo;-d recurse&rdquo;参数相同。\n- **-s** 不显示错误信息。\n- **-v** 反转查找。\n- **w** 只显示全字符合的列。\n- **-x** 只显示全列符合的列。\n- **-y** 此参数效果跟&ldquo;-i&rdquo;相同。\n- **-o** 只输出文件中匹配到的部分\n","source":"_posts/linux-2017-09-11-grep.md","raw":"---\ntitle: Linux 使用管道命令 grep\ndate: 2017-09-11\ntags:\n---\n\n\n> 文件搜索用 find，文本搜索用 grep\n\n```bash\n$ grep [-aicv..] [--color=auto] '搜寻字符串' filename\n```\n\n- **-a** 不要忽略二进制数据。\n- **-A&lt;显示列数&gt;** 除了显示符合范本样式的那一行之外，并显示该行之后的内容。\n- **-b** 在显示符合范本样式的那一行之外，并显示该行之前的内容。\n- **-c** 计算符合范本样式的列数。\n- **-C&lt;显示列数&gt;或-&lt;显示列数&gt;**  除了显示符合范本样式的那一列之外，并显示该列之前后的内容。\n- **-d&lt;进行动作&gt;** 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。\n- **-e&lt;范本样式&gt;** 指定字符串作为查找文件内容的范本样式。\n- **-E** 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。\n- **-f&lt;范本文件&gt;** 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。\n- **-F** 将范本样式视为固定字符串的列表。\n- **-G** 将范本样式视为普通的表示法来使用。\n- **-h** 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。\n- **-H** 在显示符合范本样式的那一列之前，标示该列的文件名称。\n- **-i** 胡列字符大小写的差别。\n- **-l** 列出文件内容符合指定的范本样式的文件名称。\n- **-L** 列出文件内容不符合指定的范本样式的文件名称。\n- **-n** 在显示符合范本样式的那一列之前，标示出该列的编号。\n- **-q** 不显示任何信息。\n- **-R/-r **此参数的效果和指定&ldquo;-d recurse&rdquo;参数相同。\n- **-s** 不显示错误信息。\n- **-v** 反转查找。\n- **w** 只显示全字符合的列。\n- **-x** 只显示全列符合的列。\n- **-y** 此参数效果跟&ldquo;-i&rdquo;相同。\n- **-o** 只输出文件中匹配到的部分\n","slug":"linux-2017-09-11-grep","published":1,"updated":"2017-09-15T15:03:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8w000hkjxvzus6r76x","content":"<blockquote>\n<p>文件搜索用 find，文本搜索用 grep</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ grep [-aicv..] [--color=auto] <span class=\"string\">'搜寻字符串'</span> filename</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>-a</strong> 不要忽略二进制数据。</li>\n<li><strong>-A&lt;显示列数&gt;</strong> 除了显示符合范本样式的那一行之外，并显示该行之后的内容。</li>\n<li><strong>-b</strong> 在显示符合范本样式的那一行之外，并显示该行之前的内容。</li>\n<li><strong>-c</strong> 计算符合范本样式的列数。</li>\n<li><strong>-C&lt;显示列数&gt;或-&lt;显示列数&gt;</strong>  除了显示符合范本样式的那一列之外，并显示该列之前后的内容。</li>\n<li><strong>-d&lt;进行动作&gt;</strong> 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。</li>\n<li><strong>-e&lt;范本样式&gt;</strong> 指定字符串作为查找文件内容的范本样式。</li>\n<li><strong>-E</strong> 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。</li>\n<li><strong>-f&lt;范本文件&gt;</strong> 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。</li>\n<li><strong>-F</strong> 将范本样式视为固定字符串的列表。</li>\n<li><strong>-G</strong> 将范本样式视为普通的表示法来使用。</li>\n<li><strong>-h</strong> 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。</li>\n<li><strong>-H</strong> 在显示符合范本样式的那一列之前，标示该列的文件名称。</li>\n<li><strong>-i</strong> 胡列字符大小写的差别。</li>\n<li><strong>-l</strong> 列出文件内容符合指定的范本样式的文件名称。</li>\n<li><strong>-L</strong> 列出文件内容不符合指定的范本样式的文件名称。</li>\n<li><strong>-n</strong> 在显示符合范本样式的那一列之前，标示出该列的编号。</li>\n<li><strong>-q</strong> 不显示任何信息。</li>\n<li><strong>-R/-r </strong>此参数的效果和指定&ldquo;-d recurse&rdquo;参数相同。</li>\n<li><strong>-s</strong> 不显示错误信息。</li>\n<li><strong>-v</strong> 反转查找。</li>\n<li><strong>w</strong> 只显示全字符合的列。</li>\n<li><strong>-x</strong> 只显示全列符合的列。</li>\n<li><strong>-y</strong> 此参数效果跟&ldquo;-i&rdquo;相同。</li>\n<li><strong>-o</strong> 只输出文件中匹配到的部分</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>文件搜索用 find，文本搜索用 grep</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ grep [-aicv..] [--color=auto] <span class=\"string\">'搜寻字符串'</span> filename</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>-a</strong> 不要忽略二进制数据。</li>\n<li><strong>-A&lt;显示列数&gt;</strong> 除了显示符合范本样式的那一行之外，并显示该行之后的内容。</li>\n<li><strong>-b</strong> 在显示符合范本样式的那一行之外，并显示该行之前的内容。</li>\n<li><strong>-c</strong> 计算符合范本样式的列数。</li>\n<li><strong>-C&lt;显示列数&gt;或-&lt;显示列数&gt;</strong>  除了显示符合范本样式的那一列之外，并显示该列之前后的内容。</li>\n<li><strong>-d&lt;进行动作&gt;</strong> 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作。</li>\n<li><strong>-e&lt;范本样式&gt;</strong> 指定字符串作为查找文件内容的范本样式。</li>\n<li><strong>-E</strong> 将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。</li>\n<li><strong>-f&lt;范本文件&gt;</strong> 指定范本文件，其内容有一个或多个范本样式，让grep查找符合范本条件的文件内容，格式为每一列的范本样式。</li>\n<li><strong>-F</strong> 将范本样式视为固定字符串的列表。</li>\n<li><strong>-G</strong> 将范本样式视为普通的表示法来使用。</li>\n<li><strong>-h</strong> 在显示符合范本样式的那一列之前，不标示该列所属的文件名称。</li>\n<li><strong>-H</strong> 在显示符合范本样式的那一列之前，标示该列的文件名称。</li>\n<li><strong>-i</strong> 胡列字符大小写的差别。</li>\n<li><strong>-l</strong> 列出文件内容符合指定的范本样式的文件名称。</li>\n<li><strong>-L</strong> 列出文件内容不符合指定的范本样式的文件名称。</li>\n<li><strong>-n</strong> 在显示符合范本样式的那一列之前，标示出该列的编号。</li>\n<li><strong>-q</strong> 不显示任何信息。</li>\n<li><strong>-R/-r </strong>此参数的效果和指定&ldquo;-d recurse&rdquo;参数相同。</li>\n<li><strong>-s</strong> 不显示错误信息。</li>\n<li><strong>-v</strong> 反转查找。</li>\n<li><strong>w</strong> 只显示全字符合的列。</li>\n<li><strong>-x</strong> 只显示全列符合的列。</li>\n<li><strong>-y</strong> 此参数效果跟&ldquo;-i&rdquo;相同。</li>\n<li><strong>-o</strong> 只输出文件中匹配到的部分</li>\n</ul>\n"},{"title":"Linux 数据流重定向(Redirection)","date":"2017-09-10T16:00:00.000Z","_content":"\n\n[TOC]\n\n## 重定向\n```bash\n标准输入　　(stdin) ：代码为 0 ，使用 < 或 <<\n标准输出　　(stdout)：代码为 1 ，使用 > 或 >>\n标准错误输出(stderr)：代码为 2 ，使用 2> 或 2>>\n```\n\n## 标准输出（stdout）\n*1>* 或 *>* 会将应该输出到屏幕的信息，输入到指定文件中\n```bash\n$ ll > ll.txt       # 此时屏幕不再输出信息，而是输入到 ll.txt 中\n# > 会在每次使用时覆盖相同文件名的内容，如果想要追加内容使用 >>\n```\n\n## 标准输出错误（stderr）\n*2>* 会将错误信息单独输出到指定文件中\n```bash\n$ z                             # 我随便输入了指令\n\npyenv: z: command not found     # 错误信息\n\nThe `z' command exists in these Python versions:\n  2.7.12/envs/env_hamster\n  env_hamster\n\n$ z 2> err.log                  # 使用重定向将错误输出到文件\n```\n如果我们不想将错误单独写到一个文件而是和标准输出一同输出到同一文件中，应该怎么做呢\n\n也可能你在了解到标准输出和错误输出后会想当然的用这种写法\n```bash\n$ z > file.log 2> file.log\n```\n这样是错误的，应该两股数据会交叉写入到同一文件中，造成数据混乱，而正确的写法应该是这样的\n```bash\n$ z > file.log 2>&1\n$ z &> file.log\n# 两种写法均可\n```\n\n### /dev/null 垃圾桶黑洞装置\n假如有些命令的错误是我们预知的而不想显示出，此时该怎么做呢，我们可以让他消失\n```bash\n$ z 2> /dev/null                # 此时我们将看不到输出的错误信息\n```\n\n## 标准输入（stdin）\n了解 stdout 和 stderr 后我们来看下怎么理解标准输入\n```bash\n$ cat > cat.txt\nhello world\ntest\n# 按下 ctrl + d 离开\n```\n这段命令可以使键盘输入内容重定向的文件中，如果我们想使用**某个文件内容**替代**键盘输入**到制定文件中呢，这时候 **<** 就派上用场了\n```bash\n$ cat > cat.txt < ~/.bashrc\n\n$ ll cat.txt ~/.bashrc\n-rw-r--r--  1 wxnacy  staff    42B  8 27 08:14 /Users/wxnacy/.bashrc\n-rw-r--r--  1 wxnacy  staff    42B  9 11 09:50 cat.txt\n```\n通过 **<** 导入的文件我们回它们其实一摸一样，类似复制功能\n\n接下来我们来探讨**<<**，它并不同与标准输出的追加功能，我们先来看另一个例子，当我们使用键盘输入到文件时，如果不想用 ctrl + d 来终止程序，而是其他方式可以吗，我们来试一下\n```bash\n$ cat > cat.txt << \"eof\"\nhello world\neof                             # 输入该关键字，我们不用输入 ctrl + d 即可终止程序\n```\n现在我们可以给 **<<** 下一个定义**结束的输入字符**，当然 eof 不是不变的，我们也可以指定其他字符串\n","source":"_posts/linux-2017-09-11-redirection.md","raw":"---\ntitle: Linux 数据流重定向(Redirection)\ndate: 2017-09-11\ntags:\n---\n\n\n[TOC]\n\n## 重定向\n```bash\n标准输入　　(stdin) ：代码为 0 ，使用 < 或 <<\n标准输出　　(stdout)：代码为 1 ，使用 > 或 >>\n标准错误输出(stderr)：代码为 2 ，使用 2> 或 2>>\n```\n\n## 标准输出（stdout）\n*1>* 或 *>* 会将应该输出到屏幕的信息，输入到指定文件中\n```bash\n$ ll > ll.txt       # 此时屏幕不再输出信息，而是输入到 ll.txt 中\n# > 会在每次使用时覆盖相同文件名的内容，如果想要追加内容使用 >>\n```\n\n## 标准输出错误（stderr）\n*2>* 会将错误信息单独输出到指定文件中\n```bash\n$ z                             # 我随便输入了指令\n\npyenv: z: command not found     # 错误信息\n\nThe `z' command exists in these Python versions:\n  2.7.12/envs/env_hamster\n  env_hamster\n\n$ z 2> err.log                  # 使用重定向将错误输出到文件\n```\n如果我们不想将错误单独写到一个文件而是和标准输出一同输出到同一文件中，应该怎么做呢\n\n也可能你在了解到标准输出和错误输出后会想当然的用这种写法\n```bash\n$ z > file.log 2> file.log\n```\n这样是错误的，应该两股数据会交叉写入到同一文件中，造成数据混乱，而正确的写法应该是这样的\n```bash\n$ z > file.log 2>&1\n$ z &> file.log\n# 两种写法均可\n```\n\n### /dev/null 垃圾桶黑洞装置\n假如有些命令的错误是我们预知的而不想显示出，此时该怎么做呢，我们可以让他消失\n```bash\n$ z 2> /dev/null                # 此时我们将看不到输出的错误信息\n```\n\n## 标准输入（stdin）\n了解 stdout 和 stderr 后我们来看下怎么理解标准输入\n```bash\n$ cat > cat.txt\nhello world\ntest\n# 按下 ctrl + d 离开\n```\n这段命令可以使键盘输入内容重定向的文件中，如果我们想使用**某个文件内容**替代**键盘输入**到制定文件中呢，这时候 **<** 就派上用场了\n```bash\n$ cat > cat.txt < ~/.bashrc\n\n$ ll cat.txt ~/.bashrc\n-rw-r--r--  1 wxnacy  staff    42B  8 27 08:14 /Users/wxnacy/.bashrc\n-rw-r--r--  1 wxnacy  staff    42B  9 11 09:50 cat.txt\n```\n通过 **<** 导入的文件我们回它们其实一摸一样，类似复制功能\n\n接下来我们来探讨**<<**，它并不同与标准输出的追加功能，我们先来看另一个例子，当我们使用键盘输入到文件时，如果不想用 ctrl + d 来终止程序，而是其他方式可以吗，我们来试一下\n```bash\n$ cat > cat.txt << \"eof\"\nhello world\neof                             # 输入该关键字，我们不用输入 ctrl + d 即可终止程序\n```\n现在我们可以给 **<<** 下一个定义**结束的输入字符**，当然 eof 不是不变的，我们也可以指定其他字符串\n","slug":"linux-2017-09-11-redirection","published":1,"updated":"2017-09-15T15:03:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8w000ikjxvmd48q10k","content":"<p>[TOC]</p>\n<h2><span id=\"chong-ding-xiang\">重定向</span><a href=\"#chong-ding-xiang\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">标准输入　　(stdin) ：代码为 0 ，使用 &lt; 或 &lt;&lt;</div><div class=\"line\">标准输出　　(stdout)：代码为 1 ，使用 &gt; 或 &gt;&gt;</div><div class=\"line\">标准错误输出(stderr)：代码为 2 ，使用 2&gt; 或 2&gt;&gt;</div></pre></td></tr></table></figure>\n<h2><span id=\"biao-zhun-shu-chu-stdout\">标准输出（stdout）</span><a href=\"#biao-zhun-shu-chu-stdout\" class=\"header-anchor\"></a></h2><p><em>1&gt;</em> 或 <em>&gt;</em> 会将应该输出到屏幕的信息，输入到指定文件中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ll &gt; ll.txt       <span class=\"comment\"># 此时屏幕不再输出信息，而是输入到 ll.txt 中</span></div><div class=\"line\"><span class=\"comment\"># &gt; 会在每次使用时覆盖相同文件名的内容，如果想要追加内容使用 &gt;&gt;</span></div></pre></td></tr></table></figure></p>\n<h2><span id=\"biao-zhun-shu-chu-cuo-wu-stderr\">标准输出错误（stderr）</span><a href=\"#biao-zhun-shu-chu-cuo-wu-stderr\" class=\"header-anchor\"></a></h2><p><em>2&gt;</em> 会将错误信息单独输出到指定文件中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ z                             <span class=\"comment\"># 我随便输入了指令</span></div><div class=\"line\"></div><div class=\"line\">pyenv: z: <span class=\"built_in\">command</span> not found     <span class=\"comment\"># 错误信息</span></div><div class=\"line\"></div><div class=\"line\">The `z<span class=\"string\">' command exists in these Python versions:</span></div><div class=\"line\"><span class=\"string\">  2.7.12/envs/env_hamster</span></div><div class=\"line\"><span class=\"string\">  env_hamster</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">$ z 2&gt; err.log                  # 使用重定向将错误输出到文件</span></div></pre></td></tr></table></figure></p>\n<p>如果我们不想将错误单独写到一个文件而是和标准输出一同输出到同一文件中，应该怎么做呢</p>\n<p>也可能你在了解到标准输出和错误输出后会想当然的用这种写法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ z &gt; file.log 2&gt; file.log</div></pre></td></tr></table></figure></p>\n<p>这样是错误的，应该两股数据会交叉写入到同一文件中，造成数据混乱，而正确的写法应该是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ z &gt; file.log 2&gt;&amp;1</div><div class=\"line\">$ z &amp;&gt; file.log</div><div class=\"line\"><span class=\"comment\"># 两种写法均可</span></div></pre></td></tr></table></figure></p>\n<h3><span id=\"dev-null-la-ji-tong-hei-dong-zhuang-zhi\">/dev/null 垃圾桶黑洞装置</span><a href=\"#dev-null-la-ji-tong-hei-dong-zhuang-zhi\" class=\"header-anchor\"></a></h3><p>假如有些命令的错误是我们预知的而不想显示出，此时该怎么做呢，我们可以让他消失<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ z 2&gt; /dev/null                <span class=\"comment\"># 此时我们将看不到输出的错误信息</span></div></pre></td></tr></table></figure></p>\n<h2><span id=\"biao-zhun-shu-ru-stdin\">标准输入（stdin）</span><a href=\"#biao-zhun-shu-ru-stdin\" class=\"header-anchor\"></a></h2><p>了解 stdout 和 stderr 后我们来看下怎么理解标准输入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat &gt; cat.txt</div><div class=\"line\">hello world</div><div class=\"line\"><span class=\"built_in\">test</span></div><div class=\"line\"><span class=\"comment\"># 按下 ctrl + d 离开</span></div></pre></td></tr></table></figure></p>\n<p>这段命令可以使键盘输入内容重定向的文件中，如果我们想使用<strong>某个文件内容</strong>替代<strong>键盘输入</strong>到制定文件中呢，这时候 <strong>&lt;</strong> 就派上用场了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat &gt; cat.txt &lt; ~/.bashrc</div><div class=\"line\"></div><div class=\"line\">$ ll cat.txt ~/.bashrc</div><div class=\"line\">-rw-r--r--  1 wxnacy  staff    42B  8 27 08:14 /Users/wxnacy/.bashrc</div><div class=\"line\">-rw-r--r--  1 wxnacy  staff    42B  9 11 09:50 cat.txt</div></pre></td></tr></table></figure></p>\n<p>通过 <strong>&lt;</strong> 导入的文件我们回它们其实一摸一样，类似复制功能</p>\n<p>接下来我们来探讨<strong>&lt;&lt;</strong>，它并不同与标准输出的追加功能，我们先来看另一个例子，当我们使用键盘输入到文件时，如果不想用 ctrl + d 来终止程序，而是其他方式可以吗，我们来试一下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat &gt; cat.txt &lt;&lt; <span class=\"string\">\"eof\"</span></div><div class=\"line\">hello world</div><div class=\"line\">eof                             <span class=\"comment\"># 输入该关键字，我们不用输入 ctrl + d 即可终止程序</span></div></pre></td></tr></table></figure></p>\n<p>现在我们可以给 <strong>&lt;&lt;</strong> 下一个定义<strong>结束的输入字符</strong>，当然 eof 不是不变的，我们也可以指定其他字符串</p>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">标准输入　　(stdin) ：代码为 0 ，使用 &lt; 或 &lt;&lt;</div><div class=\"line\">标准输出　　(stdout)：代码为 1 ，使用 &gt; 或 &gt;&gt;</div><div class=\"line\">标准错误输出(stderr)：代码为 2 ，使用 2&gt; 或 2&gt;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"标准输出（stdout）\"><a href=\"#标准输出（stdout）\" class=\"headerlink\" title=\"标准输出（stdout）\"></a>标准输出（stdout）</h2><p><em>1&gt;</em> 或 <em>&gt;</em> 会将应该输出到屏幕的信息，输入到指定文件中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ll &gt; ll.txt       <span class=\"comment\"># 此时屏幕不再输出信息，而是输入到 ll.txt 中</span></div><div class=\"line\"><span class=\"comment\"># &gt; 会在每次使用时覆盖相同文件名的内容，如果想要追加内容使用 &gt;&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"标准输出错误（stderr）\"><a href=\"#标准输出错误（stderr）\" class=\"headerlink\" title=\"标准输出错误（stderr）\"></a>标准输出错误（stderr）</h2><p><em>2&gt;</em> 会将错误信息单独输出到指定文件中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ z                             <span class=\"comment\"># 我随便输入了指令</span></div><div class=\"line\"></div><div class=\"line\">pyenv: z: <span class=\"built_in\">command</span> not found     <span class=\"comment\"># 错误信息</span></div><div class=\"line\"></div><div class=\"line\">The `z<span class=\"string\">' command exists in these Python versions:</span></div><div class=\"line\"><span class=\"string\">  2.7.12/envs/env_hamster</span></div><div class=\"line\"><span class=\"string\">  env_hamster</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">$ z 2&gt; err.log                  # 使用重定向将错误输出到文件</span></div></pre></td></tr></table></figure></p>\n<p>如果我们不想将错误单独写到一个文件而是和标准输出一同输出到同一文件中，应该怎么做呢</p>\n<p>也可能你在了解到标准输出和错误输出后会想当然的用这种写法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ z &gt; file.log 2&gt; file.log</div></pre></td></tr></table></figure></p>\n<p>这样是错误的，应该两股数据会交叉写入到同一文件中，造成数据混乱，而正确的写法应该是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ z &gt; file.log 2&gt;&amp;1</div><div class=\"line\">$ z &amp;&gt; file.log</div><div class=\"line\"><span class=\"comment\"># 两种写法均可</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"dev-null-垃圾桶黑洞装置\"><a href=\"#dev-null-垃圾桶黑洞装置\" class=\"headerlink\" title=\"/dev/null 垃圾桶黑洞装置\"></a>/dev/null 垃圾桶黑洞装置</h3><p>假如有些命令的错误是我们预知的而不想显示出，此时该怎么做呢，我们可以让他消失<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ z 2&gt; /dev/null                <span class=\"comment\"># 此时我们将看不到输出的错误信息</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"标准输入（stdin）\"><a href=\"#标准输入（stdin）\" class=\"headerlink\" title=\"标准输入（stdin）\"></a>标准输入（stdin）</h2><p>了解 stdout 和 stderr 后我们来看下怎么理解标准输入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat &gt; cat.txt</div><div class=\"line\">hello world</div><div class=\"line\"><span class=\"built_in\">test</span></div><div class=\"line\"><span class=\"comment\"># 按下 ctrl + d 离开</span></div></pre></td></tr></table></figure></p>\n<p>这段命令可以使键盘输入内容重定向的文件中，如果我们想使用<strong>某个文件内容</strong>替代<strong>键盘输入</strong>到制定文件中呢，这时候 <strong>&lt;</strong> 就派上用场了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat &gt; cat.txt &lt; ~/.bashrc</div><div class=\"line\"></div><div class=\"line\">$ ll cat.txt ~/.bashrc</div><div class=\"line\">-rw-r--r--  1 wxnacy  staff    42B  8 27 08:14 /Users/wxnacy/.bashrc</div><div class=\"line\">-rw-r--r--  1 wxnacy  staff    42B  9 11 09:50 cat.txt</div></pre></td></tr></table></figure></p>\n<p>通过 <strong>&lt;</strong> 导入的文件我们回它们其实一摸一样，类似复制功能</p>\n<p>接下来我们来探讨<strong>&lt;&lt;</strong>，它并不同与标准输出的追加功能，我们先来看另一个例子，当我们使用键盘输入到文件时，如果不想用 ctrl + d 来终止程序，而是其他方式可以吗，我们来试一下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat &gt; cat.txt &lt;&lt; <span class=\"string\">\"eof\"</span></div><div class=\"line\">hello world</div><div class=\"line\">eof                             <span class=\"comment\"># 输入该关键字，我们不用输入 ctrl + d 即可终止程序</span></div></pre></td></tr></table></figure></p>\n<p>现在我们可以给 <strong>&lt;&lt;</strong> 下一个定义<strong>结束的输入字符</strong>，当然 eof 不是不变的，我们也可以指定其他字符串</p>\n"},{"title":"使用 expect 交互免输入密码","date":"2017-09-14T16:00:00.000Z","_content":"\n\n在工作经常会使用 ssh、ftp、 mysql 等命令，但每次输入密码会让事情变的很枯燥，\n重复的事情就要交给脚本去做，这时候我们需要用到 **[expect](http://expect.sourceforge.net/)** ，\n下面我们通过一个例子 *mysql_login* 来说明\n\n```bash\n#!/usr/bin/env expect\nset password xxxxx\nset name root\n\nspawn mysql -u$name -p\nexpect \"*assword:*\"\nsend \"$password\\r\"\ninteract\n```\n上边这段脚本是在登录本地 mysql 时，无需输入密码就自动登录\n```bash\n$ expect mysql_login\n```\n执行代码不能用 *sh file* 而是 *expect mysql_login* ，如果你在文件开头加上 *#!/usr/bin/env expect* 也可以用 *./mysql_login* 来执行\n\n其他语句解释如下：\n\n- **spawn**：spawn是expect的语句，执行命令前都要加这句\n- **expect \"*assword:*\"**：这句意思是交互获取是否返回 password：关键字，因为在执行 mysql 时会返回输入 password 的提示 xxxxxxxx password:\n- **send**：将密码发送出去\n- **interact**：代表执行完留在远程控制台，不加这句执行完后返回本地控制台\n\n你可以仿照这段脚本写其他服务自动登录脚本，但是 ssh 无密码登录我推荐使用[SSH 登陆远程服务器和无密码操作](/linux/2017/08/23/ssh)文章中提到的不对称加密登录方式\n","source":"_posts/linux-2017-09-15-expect.md","raw":"---\ntitle: 使用 expect 交互免输入密码\ndate: 2017-09-15\ntags:\n---\n\n\n在工作经常会使用 ssh、ftp、 mysql 等命令，但每次输入密码会让事情变的很枯燥，\n重复的事情就要交给脚本去做，这时候我们需要用到 **[expect](http://expect.sourceforge.net/)** ，\n下面我们通过一个例子 *mysql_login* 来说明\n\n```bash\n#!/usr/bin/env expect\nset password xxxxx\nset name root\n\nspawn mysql -u$name -p\nexpect \"*assword:*\"\nsend \"$password\\r\"\ninteract\n```\n上边这段脚本是在登录本地 mysql 时，无需输入密码就自动登录\n```bash\n$ expect mysql_login\n```\n执行代码不能用 *sh file* 而是 *expect mysql_login* ，如果你在文件开头加上 *#!/usr/bin/env expect* 也可以用 *./mysql_login* 来执行\n\n其他语句解释如下：\n\n- **spawn**：spawn是expect的语句，执行命令前都要加这句\n- **expect \"*assword:*\"**：这句意思是交互获取是否返回 password：关键字，因为在执行 mysql 时会返回输入 password 的提示 xxxxxxxx password:\n- **send**：将密码发送出去\n- **interact**：代表执行完留在远程控制台，不加这句执行完后返回本地控制台\n\n你可以仿照这段脚本写其他服务自动登录脚本，但是 ssh 无密码登录我推荐使用[SSH 登陆远程服务器和无密码操作](/linux/2017/08/23/ssh)文章中提到的不对称加密登录方式\n","slug":"linux-2017-09-15-expect","published":1,"updated":"2017-09-15T14:17:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8y000jkjxve0n1zm68","content":"<p>在工作经常会使用 ssh、ftp、 mysql 等命令，但每次输入密码会让事情变的很枯燥，<br>重复的事情就要交给脚本去做，这时候我们需要用到 <strong><a href=\"http://expect.sourceforge.net/\" target=\"_blank\" rel=\"external\">expect</a></strong> ，<br>下面我们通过一个例子 <em>mysql_login</em> 来说明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env expect</span></div><div class=\"line\"><span class=\"built_in\">set</span> password xxxxx</div><div class=\"line\"><span class=\"built_in\">set</span> name root</div><div class=\"line\"></div><div class=\"line\">spawn mysql -u<span class=\"variable\">$name</span> -p</div><div class=\"line\">expect <span class=\"string\">\"*assword:*\"</span></div><div class=\"line\">send <span class=\"string\">\"<span class=\"variable\">$password</span>\\r\"</span></div><div class=\"line\">interact</div></pre></td></tr></table></figure>\n<p>上边这段脚本是在登录本地 mysql 时，无需输入密码就自动登录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ expect mysql_login</div></pre></td></tr></table></figure></p>\n<p>执行代码不能用 <em>sh file</em> 而是 <em>expect mysql_login</em> ，如果你在文件开头加上 <em>#!/usr/bin/env expect</em> 也可以用 <em>./mysql_login</em> 来执行</p>\n<p>其他语句解释如下：</p>\n<ul>\n<li><strong>spawn</strong>：spawn是expect的语句，执行命令前都要加这句</li>\n<li><strong>expect “<em>assword:</em>“</strong>：这句意思是交互获取是否返回 password：关键字，因为在执行 mysql 时会返回输入 password 的提示 xxxxxxxx password:</li>\n<li><strong>send</strong>：将密码发送出去</li>\n<li><strong>interact</strong>：代表执行完留在远程控制台，不加这句执行完后返回本地控制台</li>\n</ul>\n<p>你可以仿照这段脚本写其他服务自动登录脚本，但是 ssh 无密码登录我推荐使用<a href=\"/linux/2017/08/23/ssh\">SSH 登陆远程服务器和无密码操作</a>文章中提到的不对称加密登录方式</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在工作经常会使用 ssh、ftp、 mysql 等命令，但每次输入密码会让事情变的很枯燥，<br>重复的事情就要交给脚本去做，这时候我们需要用到 <strong><a href=\"http://expect.sourceforge.net/\" target=\"_blank\" rel=\"external\">expect</a></strong> ，<br>下面我们通过一个例子 <em>mysql_login</em> 来说明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env expect</span></div><div class=\"line\"><span class=\"built_in\">set</span> password xxxxx</div><div class=\"line\"><span class=\"built_in\">set</span> name root</div><div class=\"line\"></div><div class=\"line\">spawn mysql -u<span class=\"variable\">$name</span> -p</div><div class=\"line\">expect <span class=\"string\">\"*assword:*\"</span></div><div class=\"line\">send <span class=\"string\">\"<span class=\"variable\">$password</span>\\r\"</span></div><div class=\"line\">interact</div></pre></td></tr></table></figure>\n<p>上边这段脚本是在登录本地 mysql 时，无需输入密码就自动登录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ expect mysql_login</div></pre></td></tr></table></figure></p>\n<p>执行代码不能用 <em>sh file</em> 而是 <em>expect mysql_login</em> ，如果你在文件开头加上 <em>#!/usr/bin/env expect</em> 也可以用 <em>./mysql_login</em> 来执行</p>\n<p>其他语句解释如下：</p>\n<ul>\n<li><strong>spawn</strong>：spawn是expect的语句，执行命令前都要加这句</li>\n<li><strong>expect “<em>assword:</em>“</strong>：这句意思是交互获取是否返回 password：关键字，因为在执行 mysql 时会返回输入 password 的提示 xxxxxxxx password:</li>\n<li><strong>send</strong>：将密码发送出去</li>\n<li><strong>interact</strong>：代表执行完留在远程控制台，不加这句执行完后返回本地控制台</li>\n</ul>\n<p>你可以仿照这段脚本写其他服务自动登录脚本，但是 ssh 无密码登录我推荐使用<a href=\"/linux/2017/08/23/ssh\">SSH 登陆远程服务器和无密码操作</a>文章中提到的不对称加密登录方式</p>\n"},{"title":"Mac 开发人员装机必备","date":"2017-08-22T16:00:00.000Z","_content":"\n<!-- TOC -->\n\n## 操作设置\n- **打开三指拖动**：[教程](https://support.apple.com/zh-cn/HT204609)\n- **打开轻点来点按**：设置==》触控板==》光标与点按\n- **修改修饰键**：[教程](https://support.apple.com/kb/PH7099?locale=zh_CN&viewlocale=zh_CN)\n\n## 软件\n- Chrome\n- [iTerm2](https://www.iterm2.com/downloads.html) 终端神器，文件管理编程全部搞定\n- Alfred\n- [SnippetsLab](https://www.renfei.org/snippets-lab/) 随便代码管理从未如此方便\n- Shiftlt\nhttps://github.com/fikovnik/ShiftIt/releases\n- CheatSheet\nhttps://www.mediaatelier.com/CheatSheet/\n- 印象笔记\n- xcode\n\n### 效率\n- [aText](http://xclient.info/s/atext.html?_=27616038f53cd5faaa39e6ab06ffb219#history_versions) 快捷输入神器\n- [LICEcap](https://www.cockos.com/licecap/) 录制gif图片小工具\n\n\n\n## 使用工具\n\n- **Homebrew**： [Mac 包管理神器 HomeBrew](/mac/2017/09/07/homebrew)\n","source":"_posts/mac-2017-08-23-develop-hotapps.md","raw":"---\ntitle: Mac 开发人员装机必备\ndate: 2017-08-23\n---\n\n<!-- TOC -->\n\n## 操作设置\n- **打开三指拖动**：[教程](https://support.apple.com/zh-cn/HT204609)\n- **打开轻点来点按**：设置==》触控板==》光标与点按\n- **修改修饰键**：[教程](https://support.apple.com/kb/PH7099?locale=zh_CN&viewlocale=zh_CN)\n\n## 软件\n- Chrome\n- [iTerm2](https://www.iterm2.com/downloads.html) 终端神器，文件管理编程全部搞定\n- Alfred\n- [SnippetsLab](https://www.renfei.org/snippets-lab/) 随便代码管理从未如此方便\n- Shiftlt\nhttps://github.com/fikovnik/ShiftIt/releases\n- CheatSheet\nhttps://www.mediaatelier.com/CheatSheet/\n- 印象笔记\n- xcode\n\n### 效率\n- [aText](http://xclient.info/s/atext.html?_=27616038f53cd5faaa39e6ab06ffb219#history_versions) 快捷输入神器\n- [LICEcap](https://www.cockos.com/licecap/) 录制gif图片小工具\n\n\n\n## 使用工具\n\n- **Homebrew**： [Mac 包管理神器 HomeBrew](/mac/2017/09/07/homebrew)\n","slug":"mac-2017-08-23-develop-hotapps","published":1,"updated":"2017-09-16T01:07:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko8z000kkjxv8naenq71","content":"<!-- TOC -->\n<h2><span id=\"cao-zuo-she-zhi\">操作设置</span><a href=\"#cao-zuo-she-zhi\" class=\"header-anchor\"></a></h2><ul>\n<li><strong>打开三指拖动</strong>：<a href=\"https://support.apple.com/zh-cn/HT204609\" target=\"_blank\" rel=\"external\">教程</a></li>\n<li><strong>打开轻点来点按</strong>：设置==》触控板==》光标与点按</li>\n<li><strong>修改修饰键</strong>：<a href=\"https://support.apple.com/kb/PH7099?locale=zh_CN&amp;viewlocale=zh_CN\" target=\"_blank\" rel=\"external\">教程</a></li>\n</ul>\n<h2><span id=\"ruan-jian\">软件</span><a href=\"#ruan-jian\" class=\"header-anchor\"></a></h2><ul>\n<li>Chrome</li>\n<li><a href=\"https://www.iterm2.com/downloads.html\" target=\"_blank\" rel=\"external\">iTerm2</a> 终端神器，文件管理编程全部搞定</li>\n<li>Alfred</li>\n<li><a href=\"https://www.renfei.org/snippets-lab/\" target=\"_blank\" rel=\"external\">SnippetsLab</a> 随便代码管理从未如此方便</li>\n<li>Shiftlt<br><a href=\"https://github.com/fikovnik/ShiftIt/releases\" target=\"_blank\" rel=\"external\">https://github.com/fikovnik/ShiftIt/releases</a></li>\n<li>CheatSheet<br><a href=\"https://www.mediaatelier.com/CheatSheet/\" target=\"_blank\" rel=\"external\">https://www.mediaatelier.com/CheatSheet/</a></li>\n<li>印象笔记</li>\n<li>xcode</li>\n</ul>\n<h3><span id=\"xiao-lu\">效率</span><a href=\"#xiao-lu\" class=\"header-anchor\"></a></h3><ul>\n<li><a href=\"http://xclient.info/s/atext.html?_=27616038f53cd5faaa39e6ab06ffb219#history_versions\" target=\"_blank\" rel=\"external\">aText</a> 快捷输入神器</li>\n<li><a href=\"https://www.cockos.com/licecap/\" target=\"_blank\" rel=\"external\">LICEcap</a> 录制gif图片小工具</li>\n</ul>\n<h2><span id=\"shi-yong-gong-ju\">使用工具</span><a href=\"#shi-yong-gong-ju\" class=\"header-anchor\"></a></h2><ul>\n<li><strong>Homebrew</strong>： <a href=\"/mac/2017/09/07/homebrew\">Mac 包管理神器 HomeBrew</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<!-- TOC -->\n<h2 id=\"操作设置\"><a href=\"#操作设置\" class=\"headerlink\" title=\"操作设置\"></a>操作设置</h2><ul>\n<li><strong>打开三指拖动</strong>：<a href=\"https://support.apple.com/zh-cn/HT204609\" target=\"_blank\" rel=\"external\">教程</a></li>\n<li><strong>打开轻点来点按</strong>：设置==》触控板==》光标与点按</li>\n<li><strong>修改修饰键</strong>：<a href=\"https://support.apple.com/kb/PH7099?locale=zh_CN&amp;viewlocale=zh_CN\" target=\"_blank\" rel=\"external\">教程</a></li>\n</ul>\n<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><ul>\n<li>Chrome</li>\n<li><a href=\"https://www.iterm2.com/downloads.html\" target=\"_blank\" rel=\"external\">iTerm2</a> 终端神器，文件管理编程全部搞定</li>\n<li>Alfred</li>\n<li><a href=\"https://www.renfei.org/snippets-lab/\" target=\"_blank\" rel=\"external\">SnippetsLab</a> 随便代码管理从未如此方便</li>\n<li>Shiftlt<br><a href=\"https://github.com/fikovnik/ShiftIt/releases\" target=\"_blank\" rel=\"external\">https://github.com/fikovnik/ShiftIt/releases</a></li>\n<li>CheatSheet<br><a href=\"https://www.mediaatelier.com/CheatSheet/\" target=\"_blank\" rel=\"external\">https://www.mediaatelier.com/CheatSheet/</a></li>\n<li>印象笔记</li>\n<li>xcode</li>\n</ul>\n<h3 id=\"效率\"><a href=\"#效率\" class=\"headerlink\" title=\"效率\"></a>效率</h3><ul>\n<li><a href=\"http://xclient.info/s/atext.html?_=27616038f53cd5faaa39e6ab06ffb219#history_versions\" target=\"_blank\" rel=\"external\">aText</a> 快捷输入神器</li>\n<li><a href=\"https://www.cockos.com/licecap/\" target=\"_blank\" rel=\"external\">LICEcap</a> 录制gif图片小工具</li>\n</ul>\n<h2 id=\"使用工具\"><a href=\"#使用工具\" class=\"headerlink\" title=\"使用工具\"></a>使用工具</h2><ul>\n<li><strong>Homebrew</strong>： <a href=\"/mac/2017/09/07/homebrew\">Mac 包管理神器 HomeBrew</a></li>\n</ul>\n"},{"title":"Mac 包管理神器 HomeBrew","date":"2017-09-06T16:00:00.000Z","_content":"\n> [ HomeBrew ](https://brew.sh/index_zh-cn.html) 使 macOS 更完整\n\n[TOC]\n\n## 安装\n```bash\n$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n安装以后\n```bash\n$ echo 'export PATH=\"/usr/local/bin:$PATH\"' >> ~/.bash_profile\n```\n这样是让 HomeBrew 下载的包优于系统自带的包\n\n## 使用\n### 下载第一个软件包\n\n```bash\n$ brew install wget\n```\n这样在 Mac 中你也可以使用 wget 工具了\n\n```bash\n$ cd /usr/local\n$ ls -l bin | grep 'wget'\nwget -> ../Cellar/wget/1.19.1_1/bin/wget\n```\n通过上边一段命令，我们会发现，HomeBrew 会将软件包下载到单独的目录 /usr/local/Cellar 中，并将文件软链接到 /usr/local/bin 中\n\n### 更多命令\n```bash\n$ brew install wget             # 安装包\n$ brew search wget              # 搜索包（支持正则表达式）eq：brew search /^wg/\n$ brew info wget                # 查看包的信息\n$ brew uninstall wget           # 卸载包\n$ brew switch wget 1.9.1        # 包切换到某一个版本\n$ brew outdated                 # 列出过时的包\n$ brew upgrade wget             # 更新包\n$ brew update                   # 更新 HomeBrew 本身\n$ brew cleanup wget             # 清除缓存\n$ brew list                     # 列出已经安装的包\n$ echo $(brew --prefix wget)    # 输出软件安装路径，/usr/local/opt/wget\n```\n\n### oh-my-zsh 补全\n\n在安装和搜索包时，如果记不住全名可以使用 **oh-my-zsh** 的自动补全功能，但是需要下载相应的包\n```bash\n$ brew install zsh-completions\n```\n\n## Cask\n[github](https://github.com/caskroom/homebrew-cask)\n\n如果你已经厌倦了在新装一个机子时，到处找软件下载地址，在一个一个手动安装，那你可能需要用到 [Cask](https://caskroom.github.io/)，它可以用一条命令就安装好你需要的常规软件\n\n### 安装\n```bash\n$ brew tap caskroom/cask\n```\n\n### 使用\n```bash\n$ brew cask install google-chrome\n```\n是不是很简单，赶快用起来吧\n\n## 路径解释\n- **Cellar**: 文件夹存放的是所有包安装所在路径，包括二进制，文档和配置文件，按照这样Cellar/包名/版本号/的形式来安放。\n- **opt**: 由于版本号随着跟新而改变的，所以需要一个固定不变的路径作为我们访问二进制和文档的路径，这就是opt的作用。\n- **Homebrew**: brew程序所在路径.\n- **bin**: 所有包安装之后二进制都会链接到这个路径下\n- **share**: 所有包安装之后的文档都会链接到这个路径下\n- **etc**: 同上，所有包的配置文件\n- **lib**: 同上，所有包相关库文件\n- **Caskroom**: app文件\n\n","source":"_posts/mac-2017-09-07-homebrew.md","raw":"---\ntitle: Mac 包管理神器 HomeBrew\ndate: 2017-09-07\ntags:\n---\n\n> [ HomeBrew ](https://brew.sh/index_zh-cn.html) 使 macOS 更完整\n\n[TOC]\n\n## 安装\n```bash\n$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n安装以后\n```bash\n$ echo 'export PATH=\"/usr/local/bin:$PATH\"' >> ~/.bash_profile\n```\n这样是让 HomeBrew 下载的包优于系统自带的包\n\n## 使用\n### 下载第一个软件包\n\n```bash\n$ brew install wget\n```\n这样在 Mac 中你也可以使用 wget 工具了\n\n```bash\n$ cd /usr/local\n$ ls -l bin | grep 'wget'\nwget -> ../Cellar/wget/1.19.1_1/bin/wget\n```\n通过上边一段命令，我们会发现，HomeBrew 会将软件包下载到单独的目录 /usr/local/Cellar 中，并将文件软链接到 /usr/local/bin 中\n\n### 更多命令\n```bash\n$ brew install wget             # 安装包\n$ brew search wget              # 搜索包（支持正则表达式）eq：brew search /^wg/\n$ brew info wget                # 查看包的信息\n$ brew uninstall wget           # 卸载包\n$ brew switch wget 1.9.1        # 包切换到某一个版本\n$ brew outdated                 # 列出过时的包\n$ brew upgrade wget             # 更新包\n$ brew update                   # 更新 HomeBrew 本身\n$ brew cleanup wget             # 清除缓存\n$ brew list                     # 列出已经安装的包\n$ echo $(brew --prefix wget)    # 输出软件安装路径，/usr/local/opt/wget\n```\n\n### oh-my-zsh 补全\n\n在安装和搜索包时，如果记不住全名可以使用 **oh-my-zsh** 的自动补全功能，但是需要下载相应的包\n```bash\n$ brew install zsh-completions\n```\n\n## Cask\n[github](https://github.com/caskroom/homebrew-cask)\n\n如果你已经厌倦了在新装一个机子时，到处找软件下载地址，在一个一个手动安装，那你可能需要用到 [Cask](https://caskroom.github.io/)，它可以用一条命令就安装好你需要的常规软件\n\n### 安装\n```bash\n$ brew tap caskroom/cask\n```\n\n### 使用\n```bash\n$ brew cask install google-chrome\n```\n是不是很简单，赶快用起来吧\n\n## 路径解释\n- **Cellar**: 文件夹存放的是所有包安装所在路径，包括二进制，文档和配置文件，按照这样Cellar/包名/版本号/的形式来安放。\n- **opt**: 由于版本号随着跟新而改变的，所以需要一个固定不变的路径作为我们访问二进制和文档的路径，这就是opt的作用。\n- **Homebrew**: brew程序所在路径.\n- **bin**: 所有包安装之后二进制都会链接到这个路径下\n- **share**: 所有包安装之后的文档都会链接到这个路径下\n- **etc**: 同上，所有包的配置文件\n- **lib**: 同上，所有包相关库文件\n- **Caskroom**: app文件\n\n","slug":"mac-2017-09-07-homebrew","published":1,"updated":"2017-09-15T15:04:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko90000lkjxvxqossvuc","content":"<blockquote>\n<p><a href=\"https://brew.sh/index_zh-cn.html\" target=\"_blank\" rel=\"external\"> HomeBrew </a> 使 macOS 更完整</p>\n</blockquote>\n<p>[TOC]</p>\n<h2><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ /usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div></pre></td></tr></table></figure>\n<p>安装以后<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'export PATH=\"/usr/local/bin:$PATH\"'</span> &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure></p>\n<p>这样是让 HomeBrew 下载的包优于系统自带的包</p>\n<h2><span id=\"shi-yong\">使用</span><a href=\"#shi-yong\" class=\"header-anchor\"></a></h2><h3><span id=\"xia-zai-di-yi-ge-ruan-jian-bao\">下载第一个软件包</span><a href=\"#xia-zai-di-yi-ge-ruan-jian-bao\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install wget</div></pre></td></tr></table></figure>\n<p>这样在 Mac 中你也可以使用 wget 工具了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span></div><div class=\"line\">$ ls -l bin | grep <span class=\"string\">'wget'</span></div><div class=\"line\">wget -&gt; ../Cellar/wget/1.19.1_1/bin/wget</div></pre></td></tr></table></figure>\n<p>通过上边一段命令，我们会发现，HomeBrew 会将软件包下载到单独的目录 /usr/local/Cellar 中，并将文件软链接到 /usr/local/bin 中</p>\n<h3><span id=\"geng-duo-ming-ling\">更多命令</span><a href=\"#geng-duo-ming-ling\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install wget             <span class=\"comment\"># 安装包</span></div><div class=\"line\">$ brew search wget              <span class=\"comment\"># 搜索包（支持正则表达式）eq：brew search /^wg/</span></div><div class=\"line\">$ brew info wget                <span class=\"comment\"># 查看包的信息</span></div><div class=\"line\">$ brew uninstall wget           <span class=\"comment\"># 卸载包</span></div><div class=\"line\">$ brew switch wget 1.9.1        <span class=\"comment\"># 包切换到某一个版本</span></div><div class=\"line\">$ brew outdated                 <span class=\"comment\"># 列出过时的包</span></div><div class=\"line\">$ brew upgrade wget             <span class=\"comment\"># 更新包</span></div><div class=\"line\">$ brew update                   <span class=\"comment\"># 更新 HomeBrew 本身</span></div><div class=\"line\">$ brew cleanup wget             <span class=\"comment\"># 清除缓存</span></div><div class=\"line\">$ brew list                     <span class=\"comment\"># 列出已经安装的包</span></div><div class=\"line\">$ <span class=\"built_in\">echo</span> $(brew --prefix wget)    <span class=\"comment\"># 输出软件安装路径，/usr/local/opt/wget</span></div></pre></td></tr></table></figure>\n<h3><span id=\"oh-my-zsh-bu-quan\">oh-my-zsh 补全</span><a href=\"#oh-my-zsh-bu-quan\" class=\"header-anchor\"></a></h3><p>在安装和搜索包时，如果记不住全名可以使用 <strong>oh-my-zsh</strong> 的自动补全功能，但是需要下载相应的包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install zsh-completions</div></pre></td></tr></table></figure></p>\n<h2><span id=\"cask\">Cask</span><a href=\"#cask\" class=\"header-anchor\"></a></h2><p><a href=\"https://github.com/caskroom/homebrew-cask\" target=\"_blank\" rel=\"external\">github</a></p>\n<p>如果你已经厌倦了在新装一个机子时，到处找软件下载地址，在一个一个手动安装，那你可能需要用到 <a href=\"https://caskroom.github.io/\" target=\"_blank\" rel=\"external\">Cask</a>，它可以用一条命令就安装好你需要的常规软件</p>\n<h3><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew tap caskroom/cask</div></pre></td></tr></table></figure>\n<h3><span id=\"shi-yong\">使用</span><a href=\"#shi-yong\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew cask install google-chrome</div></pre></td></tr></table></figure>\n<p>是不是很简单，赶快用起来吧</p>\n<h2><span id=\"lu-jing-jie-shi\">路径解释</span><a href=\"#lu-jing-jie-shi\" class=\"header-anchor\"></a></h2><ul>\n<li><strong>Cellar</strong>: 文件夹存放的是所有包安装所在路径，包括二进制，文档和配置文件，按照这样Cellar/包名/版本号/的形式来安放。</li>\n<li><strong>opt</strong>: 由于版本号随着跟新而改变的，所以需要一个固定不变的路径作为我们访问二进制和文档的路径，这就是opt的作用。</li>\n<li><strong>Homebrew</strong>: brew程序所在路径.</li>\n<li><strong>bin</strong>: 所有包安装之后二进制都会链接到这个路径下</li>\n<li><strong>share</strong>: 所有包安装之后的文档都会链接到这个路径下</li>\n<li><strong>etc</strong>: 同上，所有包的配置文件</li>\n<li><strong>lib</strong>: 同上，所有包相关库文件</li>\n<li><strong>Caskroom</strong>: app文件</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"https://brew.sh/index_zh-cn.html\" target=\"_blank\" rel=\"external\"> HomeBrew </a> 使 macOS 更完整</p>\n</blockquote>\n<p>[TOC]</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ /usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div></pre></td></tr></table></figure>\n<p>安装以后<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'export PATH=\"/usr/local/bin:$PATH\"'</span> &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure></p>\n<p>这样是让 HomeBrew 下载的包优于系统自带的包</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"下载第一个软件包\"><a href=\"#下载第一个软件包\" class=\"headerlink\" title=\"下载第一个软件包\"></a>下载第一个软件包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install wget</div></pre></td></tr></table></figure>\n<p>这样在 Mac 中你也可以使用 wget 工具了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span></div><div class=\"line\">$ ls -l bin | grep <span class=\"string\">'wget'</span></div><div class=\"line\">wget -&gt; ../Cellar/wget/1.19.1_1/bin/wget</div></pre></td></tr></table></figure>\n<p>通过上边一段命令，我们会发现，HomeBrew 会将软件包下载到单独的目录 /usr/local/Cellar 中，并将文件软链接到 /usr/local/bin 中</p>\n<h3 id=\"更多命令\"><a href=\"#更多命令\" class=\"headerlink\" title=\"更多命令\"></a>更多命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install wget             <span class=\"comment\"># 安装包</span></div><div class=\"line\">$ brew search wget              <span class=\"comment\"># 搜索包（支持正则表达式）eq：brew search /^wg/</span></div><div class=\"line\">$ brew info wget                <span class=\"comment\"># 查看包的信息</span></div><div class=\"line\">$ brew uninstall wget           <span class=\"comment\"># 卸载包</span></div><div class=\"line\">$ brew switch wget 1.9.1        <span class=\"comment\"># 包切换到某一个版本</span></div><div class=\"line\">$ brew outdated                 <span class=\"comment\"># 列出过时的包</span></div><div class=\"line\">$ brew upgrade wget             <span class=\"comment\"># 更新包</span></div><div class=\"line\">$ brew update                   <span class=\"comment\"># 更新 HomeBrew 本身</span></div><div class=\"line\">$ brew cleanup wget             <span class=\"comment\"># 清除缓存</span></div><div class=\"line\">$ brew list                     <span class=\"comment\"># 列出已经安装的包</span></div><div class=\"line\">$ <span class=\"built_in\">echo</span> $(brew --prefix wget)    <span class=\"comment\"># 输出软件安装路径，/usr/local/opt/wget</span></div></pre></td></tr></table></figure>\n<h3 id=\"oh-my-zsh-补全\"><a href=\"#oh-my-zsh-补全\" class=\"headerlink\" title=\"oh-my-zsh 补全\"></a>oh-my-zsh 补全</h3><p>在安装和搜索包时，如果记不住全名可以使用 <strong>oh-my-zsh</strong> 的自动补全功能，但是需要下载相应的包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install zsh-completions</div></pre></td></tr></table></figure></p>\n<h2 id=\"Cask\"><a href=\"#Cask\" class=\"headerlink\" title=\"Cask\"></a>Cask</h2><p><a href=\"https://github.com/caskroom/homebrew-cask\" target=\"_blank\" rel=\"external\">github</a></p>\n<p>如果你已经厌倦了在新装一个机子时，到处找软件下载地址，在一个一个手动安装，那你可能需要用到 <a href=\"https://caskroom.github.io/\" target=\"_blank\" rel=\"external\">Cask</a>，它可以用一条命令就安装好你需要的常规软件</p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew tap caskroom/cask</div></pre></td></tr></table></figure>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew cask install google-chrome</div></pre></td></tr></table></figure>\n<p>是不是很简单，赶快用起来吧</p>\n<h2 id=\"路径解释\"><a href=\"#路径解释\" class=\"headerlink\" title=\"路径解释\"></a>路径解释</h2><ul>\n<li><strong>Cellar</strong>: 文件夹存放的是所有包安装所在路径，包括二进制，文档和配置文件，按照这样Cellar/包名/版本号/的形式来安放。</li>\n<li><strong>opt</strong>: 由于版本号随着跟新而改变的，所以需要一个固定不变的路径作为我们访问二进制和文档的路径，这就是opt的作用。</li>\n<li><strong>Homebrew</strong>: brew程序所在路径.</li>\n<li><strong>bin</strong>: 所有包安装之后二进制都会链接到这个路径下</li>\n<li><strong>share</strong>: 所有包安装之后的文档都会链接到这个路径下</li>\n<li><strong>etc</strong>: 同上，所有包的配置文件</li>\n<li><strong>lib</strong>: 同上，所有包相关库文件</li>\n<li><strong>Caskroom</strong>: app文件</li>\n</ul>\n"},{"title":"mac清除DNS缓存","date":"2017-08-09T16:00:00.000Z","_content":"\n原文：[https://support.apple.com/zh-cn/HT202516](https://support.apple.com/zh-cn/HT202516)\n## 关于 DNS 缓存\nOS X 会将已解析的 DNS 查询的本地缓存保留一段时间，保留时间由 DNS 服务器定义。有时可能需要立即还原缓存设置并重新查询 DNS 服务器。例如，如果您是网络或服务器管理员且您的 DNS 服务器上的条目最近有更改，您可能需要执行此操作。\n如果您的 Mac 使用的不是您服务器上的最新 DNS 条目，您可重新启动 Mac 以更新其缓存的信息。如果您需要更新使用 OS X 的服务器上的 DNS 条目但又不能重新启动服务器，请使用以下适用于您所使用的 OS X 版本的命令。\n## OS X Yosemite及更新机型\n在 OS X v10.10.4 或更高版本中，请使用以下“终端”命令来还原 DNS 缓存设置：\n```bash\nsudo killall -HUP mDNSResponder\n```\n在 OS X v10.10 至 v10.10.3 中，请使用以下“终端”命令来还原 DNS 缓存设置：\n```bash\nsudo discoveryutil mdnsflushcache\n```\n## OS X Mavericks、Mountain Lion 和 Lion\n在 OS X v10.9.5 及更低版本中，请使用以下“终端”命令来还原 DNS 缓存设置：\n```bash\nsudo killall -HUP mDNSResponder\n```\n## Mac OS X Snow Leopard\n在 OS X v10.6 至 v10.6.8 中，请使用以下“终端”命令来还原 DNS 缓存设置：\n```bash\nsudo dscacheutil -flushcache\n```\n\n\n","source":"_posts/mac-2017-08-10-clear-dns.md","raw":"---\ntitle: mac清除DNS缓存\ndate: 2017-08-10\ntags:\n---\n\n原文：[https://support.apple.com/zh-cn/HT202516](https://support.apple.com/zh-cn/HT202516)\n## 关于 DNS 缓存\nOS X 会将已解析的 DNS 查询的本地缓存保留一段时间，保留时间由 DNS 服务器定义。有时可能需要立即还原缓存设置并重新查询 DNS 服务器。例如，如果您是网络或服务器管理员且您的 DNS 服务器上的条目最近有更改，您可能需要执行此操作。\n如果您的 Mac 使用的不是您服务器上的最新 DNS 条目，您可重新启动 Mac 以更新其缓存的信息。如果您需要更新使用 OS X 的服务器上的 DNS 条目但又不能重新启动服务器，请使用以下适用于您所使用的 OS X 版本的命令。\n## OS X Yosemite及更新机型\n在 OS X v10.10.4 或更高版本中，请使用以下“终端”命令来还原 DNS 缓存设置：\n```bash\nsudo killall -HUP mDNSResponder\n```\n在 OS X v10.10 至 v10.10.3 中，请使用以下“终端”命令来还原 DNS 缓存设置：\n```bash\nsudo discoveryutil mdnsflushcache\n```\n## OS X Mavericks、Mountain Lion 和 Lion\n在 OS X v10.9.5 及更低版本中，请使用以下“终端”命令来还原 DNS 缓存设置：\n```bash\nsudo killall -HUP mDNSResponder\n```\n## Mac OS X Snow Leopard\n在 OS X v10.6 至 v10.6.8 中，请使用以下“终端”命令来还原 DNS 缓存设置：\n```bash\nsudo dscacheutil -flushcache\n```\n\n\n","slug":"mac-2017-08-10-clear-dns","published":1,"updated":"2017-09-15T14:17:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko91000mkjxvk36k2od6","content":"<p>原文：<a href=\"https://support.apple.com/zh-cn/HT202516\" target=\"_blank\" rel=\"external\">https://support.apple.com/zh-cn/HT202516</a></p>\n<h2><span id=\"guan-yu-dns-huan-cun\">关于 DNS 缓存</span><a href=\"#guan-yu-dns-huan-cun\" class=\"header-anchor\"></a></h2><p>OS X 会将已解析的 DNS 查询的本地缓存保留一段时间，保留时间由 DNS 服务器定义。有时可能需要立即还原缓存设置并重新查询 DNS 服务器。例如，如果您是网络或服务器管理员且您的 DNS 服务器上的条目最近有更改，您可能需要执行此操作。<br>如果您的 Mac 使用的不是您服务器上的最新 DNS 条目，您可重新启动 Mac 以更新其缓存的信息。如果您需要更新使用 OS X 的服务器上的 DNS 条目但又不能重新启动服务器，请使用以下适用于您所使用的 OS X 版本的命令。</p>\n<h2><span id=\"os-x-yosemite-ji-geng-xin-ji-xing\">OS X Yosemite及更新机型</span><a href=\"#os-x-yosemite-ji-geng-xin-ji-xing\" class=\"header-anchor\"></a></h2><p>在 OS X v10.10.4 或更高版本中，请使用以下“终端”命令来还原 DNS 缓存设置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo killall -HUP mDNSResponder</div></pre></td></tr></table></figure></p>\n<p>在 OS X v10.10 至 v10.10.3 中，请使用以下“终端”命令来还原 DNS 缓存设置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo discoveryutil mdnsflushcache</div></pre></td></tr></table></figure></p>\n<h2><span id=\"os-x-mavericks-mountain-lion-he-lion\">OS X Mavericks、Mountain Lion 和 Lion</span><a href=\"#os-x-mavericks-mountain-lion-he-lion\" class=\"header-anchor\"></a></h2><p>在 OS X v10.9.5 及更低版本中，请使用以下“终端”命令来还原 DNS 缓存设置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo killall -HUP mDNSResponder</div></pre></td></tr></table></figure></p>\n<h2><span id=\"mac-os-x-snow-leopard\">Mac OS X Snow Leopard</span><a href=\"#mac-os-x-snow-leopard\" class=\"header-anchor\"></a></h2><p>在 OS X v10.6 至 v10.6.8 中，请使用以下“终端”命令来还原 DNS 缓存设置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo dscacheutil -flushcache</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文：<a href=\"https://support.apple.com/zh-cn/HT202516\" target=\"_blank\" rel=\"external\">https://support.apple.com/zh-cn/HT202516</a></p>\n<h2 id=\"关于-DNS-缓存\"><a href=\"#关于-DNS-缓存\" class=\"headerlink\" title=\"关于 DNS 缓存\"></a>关于 DNS 缓存</h2><p>OS X 会将已解析的 DNS 查询的本地缓存保留一段时间，保留时间由 DNS 服务器定义。有时可能需要立即还原缓存设置并重新查询 DNS 服务器。例如，如果您是网络或服务器管理员且您的 DNS 服务器上的条目最近有更改，您可能需要执行此操作。<br>如果您的 Mac 使用的不是您服务器上的最新 DNS 条目，您可重新启动 Mac 以更新其缓存的信息。如果您需要更新使用 OS X 的服务器上的 DNS 条目但又不能重新启动服务器，请使用以下适用于您所使用的 OS X 版本的命令。</p>\n<h2 id=\"OS-X-Yosemite及更新机型\"><a href=\"#OS-X-Yosemite及更新机型\" class=\"headerlink\" title=\"OS X Yosemite及更新机型\"></a>OS X Yosemite及更新机型</h2><p>在 OS X v10.10.4 或更高版本中，请使用以下“终端”命令来还原 DNS 缓存设置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo killall -HUP mDNSResponder</div></pre></td></tr></table></figure></p>\n<p>在 OS X v10.10 至 v10.10.3 中，请使用以下“终端”命令来还原 DNS 缓存设置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo discoveryutil mdnsflushcache</div></pre></td></tr></table></figure></p>\n<h2 id=\"OS-X-Mavericks、Mountain-Lion-和-Lion\"><a href=\"#OS-X-Mavericks、Mountain-Lion-和-Lion\" class=\"headerlink\" title=\"OS X Mavericks、Mountain Lion 和 Lion\"></a>OS X Mavericks、Mountain Lion 和 Lion</h2><p>在 OS X v10.9.5 及更低版本中，请使用以下“终端”命令来还原 DNS 缓存设置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo killall -HUP mDNSResponder</div></pre></td></tr></table></figure></p>\n<h2 id=\"Mac-OS-X-Snow-Leopard\"><a href=\"#Mac-OS-X-Snow-Leopard\" class=\"headerlink\" title=\"Mac OS X Snow Leopard\"></a>Mac OS X Snow Leopard</h2><p>在 OS X v10.6 至 v10.6.8 中，请使用以下“终端”命令来还原 DNS 缓存设置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo dscacheutil -flushcache</div></pre></td></tr></table></figure></p>\n"},{"title":"漫威电影宇宙合集 更新到《蜘蛛侠：返校季》","date":"2017-08-12T16:00:00.000Z","_content":"\n> 漫威电影宇宙（Marvel Cinematic Universe，缩写为MCU），是以超级英雄电影为中心的共同的架空世界，由漫威影业（Marvel Studios）基于漫威漫画出版物中的角色独立制作的系列电影。它像漫画中的漫威主宇宙一样，是由共同的元素、设定、表演和角色通过跨界作品所建立的。漫威电视（Marvel Television）将宇宙进一步扩大，制作位于该宇宙中的电视剧系列。\n\n## 第一阶段\n\n\n## 美国队长3：内战\n- BD1280超清国英双语中英双字 [迅雷下载](thunder://QUFlZDJrOi8vfGZpbGV8ob5sb2y159OwzOzMw3d3dy5sb2xkeXR0LmNvbaG/w8C5+rbTs6Qzo7rE2tW9LkJEMTI4MLOsx+W5+tOiy6vT79bQ06LLq9fWLm1wNHwzODkyNTA0OTQwfERCN0RFQUNCNTA4QTkwQjQxN0UzMjRGNzhGRTQxNDVCfGg9RzVVR0VZQjdXNlpWQkNKS1ZRWDI2QUVTVjI3T01GSEN8L1pa)\n- BD1280高清国英双语中英双字 [迅雷下载](thunder://QUFlZDJrOi8vfGZpbGV8ob5sb2y159OwzOzMw3d3dy5sb2xkeXR0LmNvbaG/w8C5+rbTs6Qzo7rE2tW9LkJEMTI4MLjfx+W5+tOiy6vT79bQ06LLq9fWLm1wNHwyMjY0NjMwNjMyfDIyRDY0MkUyMjRBODIxNEVDNkNEN0YzNDlCOTkzNDg3fGg9QVNSQUFTSk5OU0VVREFOUjU2M00yTkwyNkxLVUc3WkZ8L1pa)\n\n","source":"_posts/movie-2017-08-13-MCU.md","raw":"---\ntitle: 漫威电影宇宙合集 更新到《蜘蛛侠：返校季》\ndate: 2017-08-13\ntags:\n---\n\n> 漫威电影宇宙（Marvel Cinematic Universe，缩写为MCU），是以超级英雄电影为中心的共同的架空世界，由漫威影业（Marvel Studios）基于漫威漫画出版物中的角色独立制作的系列电影。它像漫画中的漫威主宇宙一样，是由共同的元素、设定、表演和角色通过跨界作品所建立的。漫威电视（Marvel Television）将宇宙进一步扩大，制作位于该宇宙中的电视剧系列。\n\n## 第一阶段\n\n\n## 美国队长3：内战\n- BD1280超清国英双语中英双字 [迅雷下载](thunder://QUFlZDJrOi8vfGZpbGV8ob5sb2y159OwzOzMw3d3dy5sb2xkeXR0LmNvbaG/w8C5+rbTs6Qzo7rE2tW9LkJEMTI4MLOsx+W5+tOiy6vT79bQ06LLq9fWLm1wNHwzODkyNTA0OTQwfERCN0RFQUNCNTA4QTkwQjQxN0UzMjRGNzhGRTQxNDVCfGg9RzVVR0VZQjdXNlpWQkNKS1ZRWDI2QUVTVjI3T01GSEN8L1pa)\n- BD1280高清国英双语中英双字 [迅雷下载](thunder://QUFlZDJrOi8vfGZpbGV8ob5sb2y159OwzOzMw3d3dy5sb2xkeXR0LmNvbaG/w8C5+rbTs6Qzo7rE2tW9LkJEMTI4MLjfx+W5+tOiy6vT79bQ06LLq9fWLm1wNHwyMjY0NjMwNjMyfDIyRDY0MkUyMjRBODIxNEVDNkNEN0YzNDlCOTkzNDg3fGg9QVNSQUFTSk5OU0VVREFOUjU2M00yTkwyNkxLVUc3WkZ8L1pa)\n\n","slug":"movie-2017-08-13-MCU","published":1,"updated":"2017-09-15T15:04:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko91000nkjxv90uaavt7","content":"<blockquote>\n<p>漫威电影宇宙（Marvel Cinematic Universe，缩写为MCU），是以超级英雄电影为中心的共同的架空世界，由漫威影业（Marvel Studios）基于漫威漫画出版物中的角色独立制作的系列电影。它像漫画中的漫威主宇宙一样，是由共同的元素、设定、表演和角色通过跨界作品所建立的。漫威电视（Marvel Television）将宇宙进一步扩大，制作位于该宇宙中的电视剧系列。</p>\n</blockquote>\n<h2><span id=\"di-yi-jie-duan\">第一阶段</span><a href=\"#di-yi-jie-duan\" class=\"header-anchor\"></a></h2><h2><span id=\"mei-guo-dui-chang-3-nei-zhan\">美国队长3：内战</span><a href=\"#mei-guo-dui-chang-3-nei-zhan\" class=\"header-anchor\"></a></h2><ul>\n<li>BD1280超清国英双语中英双字 <a href=\"thunder://QUFlZDJrOi8vfGZpbGV8ob5sb2y159OwzOzMw3d3dy5sb2xkeXR0LmNvbaG/w8C5+rbTs6Qzo7rE2tW9LkJEMTI4MLOsx+W5+tOiy6vT79bQ06LLq9fWLm1wNHwzODkyNTA0OTQwfERCN0RFQUNCNTA4QTkwQjQxN0UzMjRGNzhGRTQxNDVCfGg9RzVVR0VZQjdXNlpWQkNKS1ZRWDI2QUVTVjI3T01GSEN8L1pa\" target=\"_blank\" rel=\"external\">迅雷下载</a></li>\n<li>BD1280高清国英双语中英双字 <a href=\"thunder://QUFlZDJrOi8vfGZpbGV8ob5sb2y159OwzOzMw3d3dy5sb2xkeXR0LmNvbaG/w8C5+rbTs6Qzo7rE2tW9LkJEMTI4MLjfx+W5+tOiy6vT79bQ06LLq9fWLm1wNHwyMjY0NjMwNjMyfDIyRDY0MkUyMjRBODIxNEVDNkNEN0YzNDlCOTkzNDg3fGg9QVNSQUFTSk5OU0VVREFOUjU2M00yTkwyNkxLVUc3WkZ8L1pa\" target=\"_blank\" rel=\"external\">迅雷下载</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>漫威电影宇宙（Marvel Cinematic Universe，缩写为MCU），是以超级英雄电影为中心的共同的架空世界，由漫威影业（Marvel Studios）基于漫威漫画出版物中的角色独立制作的系列电影。它像漫画中的漫威主宇宙一样，是由共同的元素、设定、表演和角色通过跨界作品所建立的。漫威电视（Marvel Television）将宇宙进一步扩大，制作位于该宇宙中的电视剧系列。</p>\n</blockquote>\n<h2 id=\"第一阶段\"><a href=\"#第一阶段\" class=\"headerlink\" title=\"第一阶段\"></a>第一阶段</h2><h2 id=\"美国队长3：内战\"><a href=\"#美国队长3：内战\" class=\"headerlink\" title=\"美国队长3：内战\"></a>美国队长3：内战</h2><ul>\n<li>BD1280超清国英双语中英双字 <a href=\"thunder://QUFlZDJrOi8vfGZpbGV8ob5sb2y159OwzOzMw3d3dy5sb2xkeXR0LmNvbaG/w8C5+rbTs6Qzo7rE2tW9LkJEMTI4MLOsx+W5+tOiy6vT79bQ06LLq9fWLm1wNHwzODkyNTA0OTQwfERCN0RFQUNCNTA4QTkwQjQxN0UzMjRGNzhGRTQxNDVCfGg9RzVVR0VZQjdXNlpWQkNKS1ZRWDI2QUVTVjI3T01GSEN8L1pa\" target=\"_blank\" rel=\"external\">迅雷下载</a></li>\n<li>BD1280高清国英双语中英双字 <a href=\"thunder://QUFlZDJrOi8vfGZpbGV8ob5sb2y159OwzOzMw3d3dy5sb2xkeXR0LmNvbaG/w8C5+rbTs6Qzo7rE2tW9LkJEMTI4MLjfx+W5+tOiy6vT79bQ06LLq9fWLm1wNHwyMjY0NjMwNjMyfDIyRDY0MkUyMjRBODIxNEVDNkNEN0YzNDlCOTkzNDg3fGg9QVNSQUFTSk5OU0VVREFOUjU2M00yTkwyNkxLVUc3WkZ8L1pa\" target=\"_blank\" rel=\"external\">迅雷下载</a></li>\n</ul>\n"},{"title":"Mysql 基础命令","date":"2017-08-05T16:00:00.000Z","_content":"\n[TOC]\n## 数据库\n###  创建库\n```mysql\ncreate database name character utf8mb4;\n```\n\n## 表结构\n### 创建表\n```mysql\ndrop table if exists `user`;\ncreate table `user`(\n    id int(11) not null auto_increment,\n    name varchar(32) not null comment '姓名',\n    mobile varchar(11) not null default '' comment '手机号',\n    ext JSON default null comment '扩展信息',\n    create_ts timestamp not null default current_timestamp comment '创建时间',\n    update_ts timestamp not null default current_timestamp on update current_timestamp comment '修改时间',\n    primary key(`id`)\n) engine=InnoDB default charset=utf8mb4 comment '用户表';\n```\n\n### 查看列\n```mysql\ndesc table_name\n```\n### 修改表名\n```mysql\nalter table table_name rename to new_name;\n```\n### 添加列\n```mysql\nalter table table_name add column col_name varchar(11) not null ...;\n```\n### 删除列\n```mysql\nalter table table_name drop column col_name;\n```\n### 修改列名\n```mysql\nalter table table_name change old_name new_name int(11)...;\n```\n### 修改列属性\n```mysql\nalter table table_name modify col_name int(11) not null...;\n```\n### 查看列属性\n```mysql\nshow columns from table_name;\nshow full columns from table_name; # 全部信息\n```\n\n- **Field** ：字段名\n- **Type**：字段类型\n- **Collation**：字符集（mysql 5.0以上有）\n- **Null** ：是否可以为NULL\n- **Key**：索引（PRI,unique,index)\n- **Default**：缺省值\n- **Extra**：额外（是否 auto_increment)\n- **Privileges**：权限\n- **Comment**：备注（mysql 5.0以上有)\n\n## 查询\n\n### 去掉重复数据\n```mysql\nselect distinct name from user;\n```\n需要注意亮点，第一，`distinct` 必须放到查询字段最前边。第二，如果查询的字段很多，必须所有字段都相同才会过滤\n\n","source":"_posts/mysql-2017-08-06-basic_cmd.md","raw":"---\ntitle: Mysql 基础命令\ndate: 2017-08-06\ntags:\n---\n\n[TOC]\n## 数据库\n###  创建库\n```mysql\ncreate database name character utf8mb4;\n```\n\n## 表结构\n### 创建表\n```mysql\ndrop table if exists `user`;\ncreate table `user`(\n    id int(11) not null auto_increment,\n    name varchar(32) not null comment '姓名',\n    mobile varchar(11) not null default '' comment '手机号',\n    ext JSON default null comment '扩展信息',\n    create_ts timestamp not null default current_timestamp comment '创建时间',\n    update_ts timestamp not null default current_timestamp on update current_timestamp comment '修改时间',\n    primary key(`id`)\n) engine=InnoDB default charset=utf8mb4 comment '用户表';\n```\n\n### 查看列\n```mysql\ndesc table_name\n```\n### 修改表名\n```mysql\nalter table table_name rename to new_name;\n```\n### 添加列\n```mysql\nalter table table_name add column col_name varchar(11) not null ...;\n```\n### 删除列\n```mysql\nalter table table_name drop column col_name;\n```\n### 修改列名\n```mysql\nalter table table_name change old_name new_name int(11)...;\n```\n### 修改列属性\n```mysql\nalter table table_name modify col_name int(11) not null...;\n```\n### 查看列属性\n```mysql\nshow columns from table_name;\nshow full columns from table_name; # 全部信息\n```\n\n- **Field** ：字段名\n- **Type**：字段类型\n- **Collation**：字符集（mysql 5.0以上有）\n- **Null** ：是否可以为NULL\n- **Key**：索引（PRI,unique,index)\n- **Default**：缺省值\n- **Extra**：额外（是否 auto_increment)\n- **Privileges**：权限\n- **Comment**：备注（mysql 5.0以上有)\n\n## 查询\n\n### 去掉重复数据\n```mysql\nselect distinct name from user;\n```\n需要注意亮点，第一，`distinct` 必须放到查询字段最前边。第二，如果查询的字段很多，必须所有字段都相同才会过滤\n\n","slug":"mysql-2017-08-06-basic-cmd","published":1,"updated":"2017-09-15T15:04:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko92000okjxvcsrix953","content":"<p>[TOC]</p>\n<h2><span id=\"shu-ju-ku\">数据库</span><a href=\"#shu-ju-ku\" class=\"header-anchor\"></a></h2><h3><span id=\"chuang-jian-ku\">创建库</span><a href=\"#chuang-jian-ku\" class=\"header-anchor\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">create database name character utf8mb4;</div></pre></td></tr></table></figure>\n<h2><span id=\"biao-jie-gou\">表结构</span><a href=\"#biao-jie-gou\" class=\"header-anchor\"></a></h2><h3><span id=\"chuang-jian-biao\">创建表</span><a href=\"#chuang-jian-biao\" class=\"header-anchor\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `user`;</div><div class=\"line\">create table `user`(</div><div class=\"line\">    id int(11) not null auto_increment,</div><div class=\"line\">    name varchar(32) not null comment &apos;姓名&apos;,</div><div class=\"line\">    mobile varchar(11) not null default &apos;&apos; comment &apos;手机号&apos;,</div><div class=\"line\">    ext JSON default null comment &apos;扩展信息&apos;,</div><div class=\"line\">    create_ts timestamp not null default current_timestamp comment &apos;创建时间&apos;,</div><div class=\"line\">    update_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;,</div><div class=\"line\">    primary key(`id`)</div><div class=\"line\">) engine=InnoDB default charset=utf8mb4 comment &apos;用户表&apos;;</div></pre></td></tr></table></figure>\n<h3><span id=\"cha-kan-lie\">查看列</span><a href=\"#cha-kan-lie\" class=\"header-anchor\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">desc table_name</div></pre></td></tr></table></figure>\n<h3><span id=\"xiu-gai-biao-ming\">修改表名</span><a href=\"#xiu-gai-biao-ming\" class=\"header-anchor\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table table_name rename to new_name;</div></pre></td></tr></table></figure>\n<h3><span id=\"tian-jia-lie\">添加列</span><a href=\"#tian-jia-lie\" class=\"header-anchor\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table table_name add column col_name varchar(11) not null ...;</div></pre></td></tr></table></figure>\n<h3><span id=\"shan-chu-lie\">删除列</span><a href=\"#shan-chu-lie\" class=\"header-anchor\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table table_name drop column col_name;</div></pre></td></tr></table></figure>\n<h3><span id=\"xiu-gai-lie-ming\">修改列名</span><a href=\"#xiu-gai-lie-ming\" class=\"header-anchor\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table table_name change old_name new_name int(11)...;</div></pre></td></tr></table></figure>\n<h3><span id=\"xiu-gai-lie-shu-xing\">修改列属性</span><a href=\"#xiu-gai-lie-shu-xing\" class=\"header-anchor\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table table_name modify col_name int(11) not null...;</div></pre></td></tr></table></figure>\n<h3><span id=\"cha-kan-lie-shu-xing\">查看列属性</span><a href=\"#cha-kan-lie-shu-xing\" class=\"header-anchor\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">show columns from table_name;</div><div class=\"line\">show full columns from table_name; # 全部信息</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>Field</strong> ：字段名</li>\n<li><strong>Type</strong>：字段类型</li>\n<li><strong>Collation</strong>：字符集（mysql 5.0以上有）</li>\n<li><strong>Null</strong> ：是否可以为NULL</li>\n<li><strong>Key</strong>：索引（PRI,unique,index)</li>\n<li><strong>Default</strong>：缺省值</li>\n<li><strong>Extra</strong>：额外（是否 auto_increment)</li>\n<li><strong>Privileges</strong>：权限</li>\n<li><strong>Comment</strong>：备注（mysql 5.0以上有)</li>\n</ul>\n<h2><span id=\"cha-xun\">查询</span><a href=\"#cha-xun\" class=\"header-anchor\"></a></h2><h3><span id=\"qu-diao-chong-fu-shu-ju\">去掉重复数据</span><a href=\"#qu-diao-chong-fu-shu-ju\" class=\"header-anchor\"></a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">select distinct name from user;</div></pre></td></tr></table></figure>\n<p>需要注意亮点，第一，<code>distinct</code> 必须放到查询字段最前边。第二，如果查询的字段很多，必须所有字段都相同才会过滤</p>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><h3 id=\"创建库\"><a href=\"#创建库\" class=\"headerlink\" title=\"创建库\"></a>创建库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">create database name character utf8mb4;</div></pre></td></tr></table></figure>\n<h2 id=\"表结构\"><a href=\"#表结构\" class=\"headerlink\" title=\"表结构\"></a>表结构</h2><h3 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `user`;</div><div class=\"line\">create table `user`(</div><div class=\"line\">    id int(11) not null auto_increment,</div><div class=\"line\">    name varchar(32) not null comment &apos;姓名&apos;,</div><div class=\"line\">    mobile varchar(11) not null default &apos;&apos; comment &apos;手机号&apos;,</div><div class=\"line\">    ext JSON default null comment &apos;扩展信息&apos;,</div><div class=\"line\">    create_ts timestamp not null default current_timestamp comment &apos;创建时间&apos;,</div><div class=\"line\">    update_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;,</div><div class=\"line\">    primary key(`id`)</div><div class=\"line\">) engine=InnoDB default charset=utf8mb4 comment &apos;用户表&apos;;</div></pre></td></tr></table></figure>\n<h3 id=\"查看列\"><a href=\"#查看列\" class=\"headerlink\" title=\"查看列\"></a>查看列</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">desc table_name</div></pre></td></tr></table></figure>\n<h3 id=\"修改表名\"><a href=\"#修改表名\" class=\"headerlink\" title=\"修改表名\"></a>修改表名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table table_name rename to new_name;</div></pre></td></tr></table></figure>\n<h3 id=\"添加列\"><a href=\"#添加列\" class=\"headerlink\" title=\"添加列\"></a>添加列</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table table_name add column col_name varchar(11) not null ...;</div></pre></td></tr></table></figure>\n<h3 id=\"删除列\"><a href=\"#删除列\" class=\"headerlink\" title=\"删除列\"></a>删除列</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table table_name drop column col_name;</div></pre></td></tr></table></figure>\n<h3 id=\"修改列名\"><a href=\"#修改列名\" class=\"headerlink\" title=\"修改列名\"></a>修改列名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table table_name change old_name new_name int(11)...;</div></pre></td></tr></table></figure>\n<h3 id=\"修改列属性\"><a href=\"#修改列属性\" class=\"headerlink\" title=\"修改列属性\"></a>修改列属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table table_name modify col_name int(11) not null...;</div></pre></td></tr></table></figure>\n<h3 id=\"查看列属性\"><a href=\"#查看列属性\" class=\"headerlink\" title=\"查看列属性\"></a>查看列属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">show columns from table_name;</div><div class=\"line\">show full columns from table_name; # 全部信息</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>Field</strong> ：字段名</li>\n<li><strong>Type</strong>：字段类型</li>\n<li><strong>Collation</strong>：字符集（mysql 5.0以上有）</li>\n<li><strong>Null</strong> ：是否可以为NULL</li>\n<li><strong>Key</strong>：索引（PRI,unique,index)</li>\n<li><strong>Default</strong>：缺省值</li>\n<li><strong>Extra</strong>：额外（是否 auto_increment)</li>\n<li><strong>Privileges</strong>：权限</li>\n<li><strong>Comment</strong>：备注（mysql 5.0以上有)</li>\n</ul>\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><h3 id=\"去掉重复数据\"><a href=\"#去掉重复数据\" class=\"headerlink\" title=\"去掉重复数据\"></a>去掉重复数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">select distinct name from user;</div></pre></td></tr></table></figure>\n<p>需要注意亮点，第一，<code>distinct</code> 必须放到查询字段最前边。第二，如果查询的字段很多，必须所有字段都相同才会过滤</p>\n"},{"title":"2017-08-07 新建user和user_data表，完善`insert_commet_trigger`","date":"2017-08-06T16:00:00.000Z","_content":"\n> 今天目标新建user、`user_data`表，并完善`insert_commet_trigger`，达到根据判断resource_type来更新video还是user_data的comment_count\n\n专辑：[mysql每天练习](/?p=/doc/mysql/mysql_daily.md)\n- 新建user表\n```mysql\ndrop table if exists `user`;\ncreate table `user`(\n    id int(11) not null auto_increment,\n    name varchar(32) not null comment '姓名',\n    is_del int(1) not null default 0 comment '是否删除',\n    create_ts timestamp not null default current_timestamp comment '创建时间',\n    update_ts timestamp not null default current_timestamp on update current_timestamp comment '修改时间',\n    primary key(`id`)\n)engine=InnoDB default charset=utf8mb4 comment '用户表';\n```\n\n- 新建user_data表\n```mysql\ndrop table if exists `user_data`;\ncreate table `user_data`(\n    user_id int(11) not null,\n    comment_count int(11) not null default 0 comment '评论数量',\n    update_ts timestamp not null default current_timestamp on update current_timestamp comment '最后修改时间',\n    primary key(`user_id`)\n)engine=InnoDB default charset=utf8mb4 comment '用户数据表，记录用户额外数据';\n```\n\n- 重写 `insert_comment_trigger`\n```mysql\ndrop trigger if exists `insert_comment`;\ndelimiter $\ncreate trigger `insert_comment` after insert on comment for each row \nbegin\n    declare count int;\n    if (new.resource_type = 'user') then\n        select count(0) into count from user_data where user_id = new.resource_id;\n        if (count > 0 ) then\n            update user_data set comment_count = comment_count +1  where user_id = new.resource_id;\n        else\n            insert into user_data (user_id,comment_count) values (new.resource_id,1);\n        end if;\n    else\n        update video set comment_count = comment_count +1 where id= new.resource_id;\n    end if; \nend $\ndelimiter ;\n```\n\n- 执行相关语句\n```mysql\ninsert into user(name) values ('wxnacy');\ninsert into comment (resource_id,resource_type,content) values (1,'user','好人');\ninsert into comment (resource_id,resource_type,content) values (1,'user','大好人');\nselect * from user_data;\n```\n执行语句后，user_data中comment_count应该等于2\n\n","source":"_posts/mysql-2017-08-07-item-daily.md","raw":"---\ntitle: 2017-08-07 新建user和user_data表，完善`insert_commet_trigger`\ndate: 2017-08-07\ntags:\n---\n\n> 今天目标新建user、`user_data`表，并完善`insert_commet_trigger`，达到根据判断resource_type来更新video还是user_data的comment_count\n\n专辑：[mysql每天练习](/?p=/doc/mysql/mysql_daily.md)\n- 新建user表\n```mysql\ndrop table if exists `user`;\ncreate table `user`(\n    id int(11) not null auto_increment,\n    name varchar(32) not null comment '姓名',\n    is_del int(1) not null default 0 comment '是否删除',\n    create_ts timestamp not null default current_timestamp comment '创建时间',\n    update_ts timestamp not null default current_timestamp on update current_timestamp comment '修改时间',\n    primary key(`id`)\n)engine=InnoDB default charset=utf8mb4 comment '用户表';\n```\n\n- 新建user_data表\n```mysql\ndrop table if exists `user_data`;\ncreate table `user_data`(\n    user_id int(11) not null,\n    comment_count int(11) not null default 0 comment '评论数量',\n    update_ts timestamp not null default current_timestamp on update current_timestamp comment '最后修改时间',\n    primary key(`user_id`)\n)engine=InnoDB default charset=utf8mb4 comment '用户数据表，记录用户额外数据';\n```\n\n- 重写 `insert_comment_trigger`\n```mysql\ndrop trigger if exists `insert_comment`;\ndelimiter $\ncreate trigger `insert_comment` after insert on comment for each row \nbegin\n    declare count int;\n    if (new.resource_type = 'user') then\n        select count(0) into count from user_data where user_id = new.resource_id;\n        if (count > 0 ) then\n            update user_data set comment_count = comment_count +1  where user_id = new.resource_id;\n        else\n            insert into user_data (user_id,comment_count) values (new.resource_id,1);\n        end if;\n    else\n        update video set comment_count = comment_count +1 where id= new.resource_id;\n    end if; \nend $\ndelimiter ;\n```\n\n- 执行相关语句\n```mysql\ninsert into user(name) values ('wxnacy');\ninsert into comment (resource_id,resource_type,content) values (1,'user','好人');\ninsert into comment (resource_id,resource_type,content) values (1,'user','大好人');\nselect * from user_data;\n```\n执行语句后，user_data中comment_count应该等于2\n\n","slug":"mysql-2017-08-07-item-daily","published":1,"updated":"2017-09-15T15:05:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko93000pkjxvrsm15t6r","content":"<blockquote>\n<p>今天目标新建user、<code>user_data</code>表，并完善<code>insert_commet_trigger</code>，达到根据判断resource_type来更新video还是user_data的comment_count</p>\n</blockquote>\n<p>专辑：<a href=\"/?p=/doc/mysql/mysql_daily.md\">mysql每天练习</a></p>\n<ul>\n<li><p>新建user表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `user`;</div><div class=\"line\">create table `user`(</div><div class=\"line\">    id int(11) not null auto_increment,</div><div class=\"line\">    name varchar(32) not null comment &apos;姓名&apos;,</div><div class=\"line\">    is_del int(1) not null default 0 comment &apos;是否删除&apos;,</div><div class=\"line\">    create_ts timestamp not null default current_timestamp comment &apos;创建时间&apos;,</div><div class=\"line\">    update_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;,</div><div class=\"line\">    primary key(`id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;用户表&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建user_data表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `user_data`;</div><div class=\"line\">create table `user_data`(</div><div class=\"line\">    user_id int(11) not null,</div><div class=\"line\">    comment_count int(11) not null default 0 comment &apos;评论数量&apos;,</div><div class=\"line\">    update_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;最后修改时间&apos;,</div><div class=\"line\">    primary key(`user_id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;用户数据表，记录用户额外数据&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>重写 <code>insert_comment_trigger</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop trigger if exists `insert_comment`;</div><div class=\"line\">delimiter $</div><div class=\"line\">create trigger `insert_comment` after insert on comment for each row </div><div class=\"line\">begin</div><div class=\"line\">    declare count int;</div><div class=\"line\">    if (new.resource_type = &apos;user&apos;) then</div><div class=\"line\">        select count(0) into count from user_data where user_id = new.resource_id;</div><div class=\"line\">        if (count &gt; 0 ) then</div><div class=\"line\">            update user_data set comment_count = comment_count +1  where user_id = new.resource_id;</div><div class=\"line\">        else</div><div class=\"line\">            insert into user_data (user_id,comment_count) values (new.resource_id,1);</div><div class=\"line\">        end if;</div><div class=\"line\">    else</div><div class=\"line\">        update video set comment_count = comment_count +1 where id= new.resource_id;</div><div class=\"line\">    end if; </div><div class=\"line\">end $</div><div class=\"line\">delimiter ;</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行相关语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into user(name) values (&apos;wxnacy&apos;);</div><div class=\"line\">insert into comment (resource_id,resource_type,content) values (1,&apos;user&apos;,&apos;好人&apos;);</div><div class=\"line\">insert into comment (resource_id,resource_type,content) values (1,&apos;user&apos;,&apos;大好人&apos;);</div><div class=\"line\">select * from user_data;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>执行语句后，user_data中comment_count应该等于2</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>今天目标新建user、<code>user_data</code>表，并完善<code>insert_commet_trigger</code>，达到根据判断resource_type来更新video还是user_data的comment_count</p>\n</blockquote>\n<p>专辑：<a href=\"/?p=/doc/mysql/mysql_daily.md\">mysql每天练习</a></p>\n<ul>\n<li><p>新建user表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `user`;</div><div class=\"line\">create table `user`(</div><div class=\"line\">    id int(11) not null auto_increment,</div><div class=\"line\">    name varchar(32) not null comment &apos;姓名&apos;,</div><div class=\"line\">    is_del int(1) not null default 0 comment &apos;是否删除&apos;,</div><div class=\"line\">    create_ts timestamp not null default current_timestamp comment &apos;创建时间&apos;,</div><div class=\"line\">    update_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;,</div><div class=\"line\">    primary key(`id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;用户表&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建user_data表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `user_data`;</div><div class=\"line\">create table `user_data`(</div><div class=\"line\">    user_id int(11) not null,</div><div class=\"line\">    comment_count int(11) not null default 0 comment &apos;评论数量&apos;,</div><div class=\"line\">    update_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;最后修改时间&apos;,</div><div class=\"line\">    primary key(`user_id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;用户数据表，记录用户额外数据&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>重写 <code>insert_comment_trigger</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop trigger if exists `insert_comment`;</div><div class=\"line\">delimiter $</div><div class=\"line\">create trigger `insert_comment` after insert on comment for each row </div><div class=\"line\">begin</div><div class=\"line\">    declare count int;</div><div class=\"line\">    if (new.resource_type = &apos;user&apos;) then</div><div class=\"line\">        select count(0) into count from user_data where user_id = new.resource_id;</div><div class=\"line\">        if (count &gt; 0 ) then</div><div class=\"line\">            update user_data set comment_count = comment_count +1  where user_id = new.resource_id;</div><div class=\"line\">        else</div><div class=\"line\">            insert into user_data (user_id,comment_count) values (new.resource_id,1);</div><div class=\"line\">        end if;</div><div class=\"line\">    else</div><div class=\"line\">        update video set comment_count = comment_count +1 where id= new.resource_id;</div><div class=\"line\">    end if; </div><div class=\"line\">end $</div><div class=\"line\">delimiter ;</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行相关语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into user(name) values (&apos;wxnacy&apos;);</div><div class=\"line\">insert into comment (resource_id,resource_type,content) values (1,&apos;user&apos;,&apos;好人&apos;);</div><div class=\"line\">insert into comment (resource_id,resource_type,content) values (1,&apos;user&apos;,&apos;大好人&apos;);</div><div class=\"line\">select * from user_data;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>执行语句后，user_data中comment_count应该等于2</p>\n"},{"title":"2017-08-06 新建video和comment表，以及`insert_commet_trigger`","date":"2017-08-05T16:00:00.000Z","_content":"\n> 今天的目标是新建一个video视频表和comment评论表，并编写trigger，达到当insert一条评论类型为video的数据到comment中时，video中comment_count字段可以自加一\n\n专辑：[mysql每天练习](/?p=/doc/mysql/mysql_daily.md)\n- 新建video表\n```mysql\ndrop table if exists `video`;\ncreate table `video`(\n    id int(11) not null auto_increment,\n    name varchar(32) not null comment '标题',\n    url varchar(512) not null comment '视频地址',\n    is_del int(1) not null default 0 comment '是否删除',\n    create_ts timestamp not null default current_timestamp comment '创建时间',\n    update_ts timestamp not null default current_timestamp on update current_timestamp comment '修改时间',\n    primary key(`id`)\n)engine=InnoDB default charset=utf8mb4 comment '视频表';\n```\n\n- 添加comment_count字段（不是忘了，就是想练一下add column语句╭(╯^╰)╮）\n```mysql\nalter table video add column comment_count int(11) not null default 0 comment '评论数量';\n```\n\n- 新建comment表\n```mysql\ndrop table if exists `comment`;\ncreate table `comment`(\n    id int(11) not null auto_increment,\n    resource_id int(11) not null comment '被评论资源id',\n    resource_type varchar(16) not null comment '被评论资源类型',\n    content varchar(1024) not null comment '评论内容',\n    is_del int(1) not null default 0 comment '是否删除',\n    create_ts timestamp not null default current_timestamp comment '创建时间',\n    update_ts timestamp not null default current_timestamp on update current_timestamp comment '修改时间',\n    primary key(`id`)\n)engine=InnoDB default charset=utf8mb4 comment '评论表';\n```\n- 新建trigger\n```mysql\ndrop trigger if exists `insert_comment`;\ndelimiter $\ncreate trigger `insert_comment` after insert on comment for each row\nbegin\n    if (new.resource_type = 'video') then \n        update video set comment_count = comment_count +1 where id = new.resource_id;\n    end if;\nend $\ndelimiter ;\n```\n\n- 执行相应操作语句\n\n```mysql\ninsert into video (name,url) values ('蜘蛛侠：返校季','http://woyemeiyou/wangzhi.mp4');\ninsert into comment (resource_id,resource_type,content) values (1,'video','找不到资源');\nselect * from video;\n```\n\n最后结果中video表中的comment_count应该等于1\n\n","source":"_posts/mysql-2017-08-06-item-daily.md","raw":"---\ntitle: 2017-08-06 新建video和comment表，以及`insert_commet_trigger`\ndate: 2017-08-06\ntags:\n---\n\n> 今天的目标是新建一个video视频表和comment评论表，并编写trigger，达到当insert一条评论类型为video的数据到comment中时，video中comment_count字段可以自加一\n\n专辑：[mysql每天练习](/?p=/doc/mysql/mysql_daily.md)\n- 新建video表\n```mysql\ndrop table if exists `video`;\ncreate table `video`(\n    id int(11) not null auto_increment,\n    name varchar(32) not null comment '标题',\n    url varchar(512) not null comment '视频地址',\n    is_del int(1) not null default 0 comment '是否删除',\n    create_ts timestamp not null default current_timestamp comment '创建时间',\n    update_ts timestamp not null default current_timestamp on update current_timestamp comment '修改时间',\n    primary key(`id`)\n)engine=InnoDB default charset=utf8mb4 comment '视频表';\n```\n\n- 添加comment_count字段（不是忘了，就是想练一下add column语句╭(╯^╰)╮）\n```mysql\nalter table video add column comment_count int(11) not null default 0 comment '评论数量';\n```\n\n- 新建comment表\n```mysql\ndrop table if exists `comment`;\ncreate table `comment`(\n    id int(11) not null auto_increment,\n    resource_id int(11) not null comment '被评论资源id',\n    resource_type varchar(16) not null comment '被评论资源类型',\n    content varchar(1024) not null comment '评论内容',\n    is_del int(1) not null default 0 comment '是否删除',\n    create_ts timestamp not null default current_timestamp comment '创建时间',\n    update_ts timestamp not null default current_timestamp on update current_timestamp comment '修改时间',\n    primary key(`id`)\n)engine=InnoDB default charset=utf8mb4 comment '评论表';\n```\n- 新建trigger\n```mysql\ndrop trigger if exists `insert_comment`;\ndelimiter $\ncreate trigger `insert_comment` after insert on comment for each row\nbegin\n    if (new.resource_type = 'video') then \n        update video set comment_count = comment_count +1 where id = new.resource_id;\n    end if;\nend $\ndelimiter ;\n```\n\n- 执行相应操作语句\n\n```mysql\ninsert into video (name,url) values ('蜘蛛侠：返校季','http://woyemeiyou/wangzhi.mp4');\ninsert into comment (resource_id,resource_type,content) values (1,'video','找不到资源');\nselect * from video;\n```\n\n最后结果中video表中的comment_count应该等于1\n\n","slug":"mysql-2017-08-06-item-daily","published":1,"updated":"2017-09-15T15:05:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko93000qkjxvjigi690s","content":"<blockquote>\n<p>今天的目标是新建一个video视频表和comment评论表，并编写trigger，达到当insert一条评论类型为video的数据到comment中时，video中comment_count字段可以自加一</p>\n</blockquote>\n<p>专辑：<a href=\"/?p=/doc/mysql/mysql_daily.md\">mysql每天练习</a></p>\n<ul>\n<li><p>新建video表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `video`;</div><div class=\"line\">create table `video`(</div><div class=\"line\">    id int(11) not null auto_increment,</div><div class=\"line\">    name varchar(32) not null comment &apos;标题&apos;,</div><div class=\"line\">    url varchar(512) not null comment &apos;视频地址&apos;,</div><div class=\"line\">    is_del int(1) not null default 0 comment &apos;是否删除&apos;,</div><div class=\"line\">    create_ts timestamp not null default current_timestamp comment &apos;创建时间&apos;,</div><div class=\"line\">    update_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;,</div><div class=\"line\">    primary key(`id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;视频表&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加comment_count字段（不是忘了，就是想练一下add column语句╭(╯^╰)╮）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table video add column comment_count int(11) not null default 0 comment &apos;评论数量&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建comment表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `comment`;</div><div class=\"line\">create table `comment`(</div><div class=\"line\">    id int(11) not null auto_increment,</div><div class=\"line\">    resource_id int(11) not null comment &apos;被评论资源id&apos;,</div><div class=\"line\">    resource_type varchar(16) not null comment &apos;被评论资源类型&apos;,</div><div class=\"line\">    content varchar(1024) not null comment &apos;评论内容&apos;,</div><div class=\"line\">    is_del int(1) not null default 0 comment &apos;是否删除&apos;,</div><div class=\"line\">    create_ts timestamp not null default current_timestamp comment &apos;创建时间&apos;,</div><div class=\"line\">    update_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;,</div><div class=\"line\">    primary key(`id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;评论表&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建trigger</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop trigger if exists `insert_comment`;</div><div class=\"line\">delimiter $</div><div class=\"line\">create trigger `insert_comment` after insert on comment for each row</div><div class=\"line\">begin</div><div class=\"line\">    if (new.resource_type = &apos;video&apos;) then </div><div class=\"line\">        update video set comment_count = comment_count +1 where id = new.resource_id;</div><div class=\"line\">    end if;</div><div class=\"line\">end $</div><div class=\"line\">delimiter ;</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行相应操作语句</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into video (name,url) values (&apos;蜘蛛侠：返校季&apos;,&apos;http://woyemeiyou/wangzhi.mp4&apos;);</div><div class=\"line\">insert into comment (resource_id,resource_type,content) values (1,&apos;video&apos;,&apos;找不到资源&apos;);</div><div class=\"line\">select * from video;</div></pre></td></tr></table></figure>\n<p>最后结果中video表中的comment_count应该等于1</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>今天的目标是新建一个video视频表和comment评论表，并编写trigger，达到当insert一条评论类型为video的数据到comment中时，video中comment_count字段可以自加一</p>\n</blockquote>\n<p>专辑：<a href=\"/?p=/doc/mysql/mysql_daily.md\">mysql每天练习</a></p>\n<ul>\n<li><p>新建video表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `video`;</div><div class=\"line\">create table `video`(</div><div class=\"line\">    id int(11) not null auto_increment,</div><div class=\"line\">    name varchar(32) not null comment &apos;标题&apos;,</div><div class=\"line\">    url varchar(512) not null comment &apos;视频地址&apos;,</div><div class=\"line\">    is_del int(1) not null default 0 comment &apos;是否删除&apos;,</div><div class=\"line\">    create_ts timestamp not null default current_timestamp comment &apos;创建时间&apos;,</div><div class=\"line\">    update_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;,</div><div class=\"line\">    primary key(`id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;视频表&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加comment_count字段（不是忘了，就是想练一下add column语句╭(╯^╰)╮）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table video add column comment_count int(11) not null default 0 comment &apos;评论数量&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建comment表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `comment`;</div><div class=\"line\">create table `comment`(</div><div class=\"line\">    id int(11) not null auto_increment,</div><div class=\"line\">    resource_id int(11) not null comment &apos;被评论资源id&apos;,</div><div class=\"line\">    resource_type varchar(16) not null comment &apos;被评论资源类型&apos;,</div><div class=\"line\">    content varchar(1024) not null comment &apos;评论内容&apos;,</div><div class=\"line\">    is_del int(1) not null default 0 comment &apos;是否删除&apos;,</div><div class=\"line\">    create_ts timestamp not null default current_timestamp comment &apos;创建时间&apos;,</div><div class=\"line\">    update_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;,</div><div class=\"line\">    primary key(`id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;评论表&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建trigger</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop trigger if exists `insert_comment`;</div><div class=\"line\">delimiter $</div><div class=\"line\">create trigger `insert_comment` after insert on comment for each row</div><div class=\"line\">begin</div><div class=\"line\">    if (new.resource_type = &apos;video&apos;) then </div><div class=\"line\">        update video set comment_count = comment_count +1 where id = new.resource_id;</div><div class=\"line\">    end if;</div><div class=\"line\">end $</div><div class=\"line\">delimiter ;</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行相应操作语句</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into video (name,url) values (&apos;蜘蛛侠：返校季&apos;,&apos;http://woyemeiyou/wangzhi.mp4&apos;);</div><div class=\"line\">insert into comment (resource_id,resource_type,content) values (1,&apos;video&apos;,&apos;找不到资源&apos;);</div><div class=\"line\">select * from video;</div></pre></td></tr></table></figure>\n<p>最后结果中video表中的comment_count应该等于1</p>\n"},{"title":"2017-08-08 新建article表，完善`insert_comment_trigger`","date":"2017-08-07T16:00:00.000Z","_content":"\n> 今天目标创建acticle表，并完善`insert_comment_trigger`，以支持更新article中的comment_count,comment表新增comment_id字段\n\n专辑：[mysql每天练习](/?p=/doc/mysql/mysql_daily.md)\n- 新建article\n```mysql\ndrop table if exists `article`;\ncreate table `article`(\n\tid int(11) not null auto_increment,\n\tname varchar(32) not null comment '标题',\n\turl varchar(512) not null comment '地址',\n\tcomment_count int(11) not null default 0 comment '评论数量',\n\tis_del tinyint(1) not null default 0 comment '是否删除',\n\tcreate_ts timestamp not null default current_timestamp comment '创建时间',\n\tupdate_ts timestamp not null default current_timestamp on update current_timestamp comment '修改时间',\n\tprimary key(`id`)\n)engine=InnoDB default charset=utf8mb4 comment '文章表';\n```\n- 修改`insert_comment`\n```mysql\ndrop trigger if exists `insert_comment`;\ndelimiter $\ncreate trigger `insert_comment` after insert on comment for each row \nbegin\n\tdeclare count int;\n\tif (new.resource_type = 'video') then\n\t\tupdate video set comment_count = comment_count + 1 where id  = new.resource_id;\n\telseif (new.resource_type = 'article') then\n\t\tupdate article set comment_count = comment_count + 1 where id = new.resource_id;\n\telseif (new.resource_type = 'user') then\n\t\tselect count(0) into count from user_data where user_id = new.resource_id;\n\t\tif (count >0) then\n\t\t\tupdate user_data set comment_count = comment_count + 1 where user_id = new.resource_id;\n\t\telse\n\t\t\tinsert into user_data (user_id,comment_count) values (new.resource_id,1);\n\t\tend if;\n\tend if;\nend $\ndelimiter ;\n```\n- 添加字段\n```mysql\nalter table comment add column comment_id int(11) not null default 0 comment '回复的评论注解id';\n```\n- 测试\n```mysql\ninsert into article (name,url) values ('好文章','http://wen.com/wen.html');\ninsert into comment(resource_id,resource_type,content) values(1,'article','好文章');\nselect * from article;\n```\n执行完后，article中comment_count应该等于1\n\n","source":"_posts/mysql-2017-08-08-item-daily.md","raw":"---\ntitle: 2017-08-08 新建article表，完善`insert_comment_trigger`\ndate: 2017-08-08\ntags:\n---\n\n> 今天目标创建acticle表，并完善`insert_comment_trigger`，以支持更新article中的comment_count,comment表新增comment_id字段\n\n专辑：[mysql每天练习](/?p=/doc/mysql/mysql_daily.md)\n- 新建article\n```mysql\ndrop table if exists `article`;\ncreate table `article`(\n\tid int(11) not null auto_increment,\n\tname varchar(32) not null comment '标题',\n\turl varchar(512) not null comment '地址',\n\tcomment_count int(11) not null default 0 comment '评论数量',\n\tis_del tinyint(1) not null default 0 comment '是否删除',\n\tcreate_ts timestamp not null default current_timestamp comment '创建时间',\n\tupdate_ts timestamp not null default current_timestamp on update current_timestamp comment '修改时间',\n\tprimary key(`id`)\n)engine=InnoDB default charset=utf8mb4 comment '文章表';\n```\n- 修改`insert_comment`\n```mysql\ndrop trigger if exists `insert_comment`;\ndelimiter $\ncreate trigger `insert_comment` after insert on comment for each row \nbegin\n\tdeclare count int;\n\tif (new.resource_type = 'video') then\n\t\tupdate video set comment_count = comment_count + 1 where id  = new.resource_id;\n\telseif (new.resource_type = 'article') then\n\t\tupdate article set comment_count = comment_count + 1 where id = new.resource_id;\n\telseif (new.resource_type = 'user') then\n\t\tselect count(0) into count from user_data where user_id = new.resource_id;\n\t\tif (count >0) then\n\t\t\tupdate user_data set comment_count = comment_count + 1 where user_id = new.resource_id;\n\t\telse\n\t\t\tinsert into user_data (user_id,comment_count) values (new.resource_id,1);\n\t\tend if;\n\tend if;\nend $\ndelimiter ;\n```\n- 添加字段\n```mysql\nalter table comment add column comment_id int(11) not null default 0 comment '回复的评论注解id';\n```\n- 测试\n```mysql\ninsert into article (name,url) values ('好文章','http://wen.com/wen.html');\ninsert into comment(resource_id,resource_type,content) values(1,'article','好文章');\nselect * from article;\n```\n执行完后，article中comment_count应该等于1\n\n","slug":"mysql-2017-08-08-item-daily","published":1,"updated":"2017-09-15T15:05:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko95000rkjxv96w1a2oh","content":"<blockquote>\n<p>今天目标创建acticle表，并完善<code>insert_comment_trigger</code>，以支持更新article中的comment_count,comment表新增comment_id字段</p>\n</blockquote>\n<p>专辑：<a href=\"/?p=/doc/mysql/mysql_daily.md\">mysql每天练习</a></p>\n<ul>\n<li><p>新建article</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `article`;</div><div class=\"line\">create table `article`(</div><div class=\"line\">\tid int(11) not null auto_increment,</div><div class=\"line\">\tname varchar(32) not null comment &apos;标题&apos;,</div><div class=\"line\">\turl varchar(512) not null comment &apos;地址&apos;,</div><div class=\"line\">\tcomment_count int(11) not null default 0 comment &apos;评论数量&apos;,</div><div class=\"line\">\tis_del tinyint(1) not null default 0 comment &apos;是否删除&apos;,</div><div class=\"line\">\tcreate_ts timestamp not null default current_timestamp comment &apos;创建时间&apos;,</div><div class=\"line\">\tupdate_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;,</div><div class=\"line\">\tprimary key(`id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;文章表&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>insert_comment</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop trigger if exists `insert_comment`;</div><div class=\"line\">delimiter $</div><div class=\"line\">create trigger `insert_comment` after insert on comment for each row </div><div class=\"line\">begin</div><div class=\"line\">\tdeclare count int;</div><div class=\"line\">\tif (new.resource_type = &apos;video&apos;) then</div><div class=\"line\">\t\tupdate video set comment_count = comment_count + 1 where id  = new.resource_id;</div><div class=\"line\">\telseif (new.resource_type = &apos;article&apos;) then</div><div class=\"line\">\t\tupdate article set comment_count = comment_count + 1 where id = new.resource_id;</div><div class=\"line\">\telseif (new.resource_type = &apos;user&apos;) then</div><div class=\"line\">\t\tselect count(0) into count from user_data where user_id = new.resource_id;</div><div class=\"line\">\t\tif (count &gt;0) then</div><div class=\"line\">\t\t\tupdate user_data set comment_count = comment_count + 1 where user_id = new.resource_id;</div><div class=\"line\">\t\telse</div><div class=\"line\">\t\t\tinsert into user_data (user_id,comment_count) values (new.resource_id,1);</div><div class=\"line\">\t\tend if;</div><div class=\"line\">\tend if;</div><div class=\"line\">end $</div><div class=\"line\">delimiter ;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table comment add column comment_id int(11) not null default 0 comment &apos;回复的评论注解id&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into article (name,url) values (&apos;好文章&apos;,&apos;http://wen.com/wen.html&apos;);</div><div class=\"line\">insert into comment(resource_id,resource_type,content) values(1,&apos;article&apos;,&apos;好文章&apos;);</div><div class=\"line\">select * from article;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>执行完后，article中comment_count应该等于1</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>今天目标创建acticle表，并完善<code>insert_comment_trigger</code>，以支持更新article中的comment_count,comment表新增comment_id字段</p>\n</blockquote>\n<p>专辑：<a href=\"/?p=/doc/mysql/mysql_daily.md\">mysql每天练习</a></p>\n<ul>\n<li><p>新建article</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `article`;</div><div class=\"line\">create table `article`(</div><div class=\"line\">\tid int(11) not null auto_increment,</div><div class=\"line\">\tname varchar(32) not null comment &apos;标题&apos;,</div><div class=\"line\">\turl varchar(512) not null comment &apos;地址&apos;,</div><div class=\"line\">\tcomment_count int(11) not null default 0 comment &apos;评论数量&apos;,</div><div class=\"line\">\tis_del tinyint(1) not null default 0 comment &apos;是否删除&apos;,</div><div class=\"line\">\tcreate_ts timestamp not null default current_timestamp comment &apos;创建时间&apos;,</div><div class=\"line\">\tupdate_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;,</div><div class=\"line\">\tprimary key(`id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;文章表&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改<code>insert_comment</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop trigger if exists `insert_comment`;</div><div class=\"line\">delimiter $</div><div class=\"line\">create trigger `insert_comment` after insert on comment for each row </div><div class=\"line\">begin</div><div class=\"line\">\tdeclare count int;</div><div class=\"line\">\tif (new.resource_type = &apos;video&apos;) then</div><div class=\"line\">\t\tupdate video set comment_count = comment_count + 1 where id  = new.resource_id;</div><div class=\"line\">\telseif (new.resource_type = &apos;article&apos;) then</div><div class=\"line\">\t\tupdate article set comment_count = comment_count + 1 where id = new.resource_id;</div><div class=\"line\">\telseif (new.resource_type = &apos;user&apos;) then</div><div class=\"line\">\t\tselect count(0) into count from user_data where user_id = new.resource_id;</div><div class=\"line\">\t\tif (count &gt;0) then</div><div class=\"line\">\t\t\tupdate user_data set comment_count = comment_count + 1 where user_id = new.resource_id;</div><div class=\"line\">\t\telse</div><div class=\"line\">\t\t\tinsert into user_data (user_id,comment_count) values (new.resource_id,1);</div><div class=\"line\">\t\tend if;</div><div class=\"line\">\tend if;</div><div class=\"line\">end $</div><div class=\"line\">delimiter ;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table comment add column comment_id int(11) not null default 0 comment &apos;回复的评论注解id&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into article (name,url) values (&apos;好文章&apos;,&apos;http://wen.com/wen.html&apos;);</div><div class=\"line\">insert into comment(resource_id,resource_type,content) values(1,&apos;article&apos;,&apos;好文章&apos;);</div><div class=\"line\">select * from article;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>执行完后，article中comment_count应该等于1</p>\n"},{"title":"Mysql 索引的增删查","date":"2017-08-08T16:00:00.000Z","_content":"\n\n原文：[http://www.cnblogs.com/tianhuilove/archive/2011/09/05/2167795.html](http://www.cnblogs.com/tianhuilove/archive/2011/09/05/2167795.html)\n\n[TOC]\n\n## 索引类型\n```\n在创建索引时，可以规定索引能否包含重复值。如果不包含，则索引应该创建为PRIMARY KEY或UNIQUE索引。\n对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复。\nPRIMARY KEY索引和UNIQUE索引非常类似。事实上，PRIMARY KEY索引仅是一个具有名称PRIMARY的UNIQUE索引。\n这表示一个表只能包含一个PRIMARY KEY，因为一个表中不可能具有两个同名的索引。\n下面的SQL语句对students表在sid上添加PRIMARY KEY索引。\n```\n\n## 创建索引\n在执行CREATE TABLE语句时可以创建索引，也可以单独用CREATE INDEX或ALTER TABLE来为表增加索引。\n\n### alter table\n\n其中table_name是要增加索引的表名，column_list指出对哪些列进行索引，多列时各列之间用逗号分隔。索引名index_name可选，缺省时，MySQL将根据第一个索引列赋一个名称。另外，ALTER TABLE允许在单个语句中更改多个表，因此可以在同时创建多个索引。\n```mysql\nalter table table_name add index index_name (column_list);\nalter table table_name add unique index_name (column_list);\nalter table table_name add primary key (column_list);\n```\n### create table\nCREATE INDEX可对表增加普通索引或UNIQUE索引。\n```mysql\ncreate index index_name on table_name (column_list);\ncreate unique index index_name on table_name (column_list);\n```\n\n## 删除索引\n可利用ALTER TABLE或DROP INDEX语句来删除索引。类似于CREATE INDEX语句，DROP INDEX可以在ALTER TABLE内部作为一条语句处理，语法如下。\n```mysql\ndrop index index_name on table_name;\nalter table_name drop index index_name;\nalter table_name drop primary key;\n```\n```\n其中，前两条语句是等价的，删除掉table_name中的索引index_name。\n第3条语句只在删除PRIMARY KEY索引时使用，因为一个表只可能有一个PRIMARY KEY索引，因此不需要指定索引名。\n如果没有创建PRIMARY KEY索引，但表具有一个或多个UNIQUE索引，则MySQL将删除第一个UNIQUE索引。\n如果从表中删除了某列，则索引会受到影响。对于多列组合的索引\n如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。\n```\n\n## 查看索引\n\n```mysql\nshow index from table_name;\nshow keys from table_name;\n```\n\n- **Table**: 表的名称。\n- **Non_unique**: 如果索引不能包括重复词，则为0。如果可以，则为1。\n- **Key_name**: 索引的名称。\n- **Seq_in_index**: 索引中的列序列号，从1开始。\n- **Column_name**: 列名称。\n- **Collation**: 列以什么方式存储在索引中。在MySQL中，有值‘A’（升序）或NULL（无分类）。\n- **Cardinality**: 索引中唯一值的数目的估计值。通过运行ANALYZE TABLE或myisamchk -a可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL使用该索引的机会就越大。\n- **Sub_part**: 如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为NULL。\n- **Packed**: 指示关键字如何被压缩。如果没有被压缩，则为NULL。\n- **Null**: 如果列含有NULL，则含有YES。如果没有，则该列含有NO。\n- **Index_type**: 用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）。\n- **Comment**: 备注\n\n","source":"_posts/mysql-2017-08-09-basic_index.md","raw":"---\ntitle: Mysql 索引的增删查\ndate: 2017-08-09\ntags:\n---\n\n\n原文：[http://www.cnblogs.com/tianhuilove/archive/2011/09/05/2167795.html](http://www.cnblogs.com/tianhuilove/archive/2011/09/05/2167795.html)\n\n[TOC]\n\n## 索引类型\n```\n在创建索引时，可以规定索引能否包含重复值。如果不包含，则索引应该创建为PRIMARY KEY或UNIQUE索引。\n对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复。\nPRIMARY KEY索引和UNIQUE索引非常类似。事实上，PRIMARY KEY索引仅是一个具有名称PRIMARY的UNIQUE索引。\n这表示一个表只能包含一个PRIMARY KEY，因为一个表中不可能具有两个同名的索引。\n下面的SQL语句对students表在sid上添加PRIMARY KEY索引。\n```\n\n## 创建索引\n在执行CREATE TABLE语句时可以创建索引，也可以单独用CREATE INDEX或ALTER TABLE来为表增加索引。\n\n### alter table\n\n其中table_name是要增加索引的表名，column_list指出对哪些列进行索引，多列时各列之间用逗号分隔。索引名index_name可选，缺省时，MySQL将根据第一个索引列赋一个名称。另外，ALTER TABLE允许在单个语句中更改多个表，因此可以在同时创建多个索引。\n```mysql\nalter table table_name add index index_name (column_list);\nalter table table_name add unique index_name (column_list);\nalter table table_name add primary key (column_list);\n```\n### create table\nCREATE INDEX可对表增加普通索引或UNIQUE索引。\n```mysql\ncreate index index_name on table_name (column_list);\ncreate unique index index_name on table_name (column_list);\n```\n\n## 删除索引\n可利用ALTER TABLE或DROP INDEX语句来删除索引。类似于CREATE INDEX语句，DROP INDEX可以在ALTER TABLE内部作为一条语句处理，语法如下。\n```mysql\ndrop index index_name on table_name;\nalter table_name drop index index_name;\nalter table_name drop primary key;\n```\n```\n其中，前两条语句是等价的，删除掉table_name中的索引index_name。\n第3条语句只在删除PRIMARY KEY索引时使用，因为一个表只可能有一个PRIMARY KEY索引，因此不需要指定索引名。\n如果没有创建PRIMARY KEY索引，但表具有一个或多个UNIQUE索引，则MySQL将删除第一个UNIQUE索引。\n如果从表中删除了某列，则索引会受到影响。对于多列组合的索引\n如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。\n```\n\n## 查看索引\n\n```mysql\nshow index from table_name;\nshow keys from table_name;\n```\n\n- **Table**: 表的名称。\n- **Non_unique**: 如果索引不能包括重复词，则为0。如果可以，则为1。\n- **Key_name**: 索引的名称。\n- **Seq_in_index**: 索引中的列序列号，从1开始。\n- **Column_name**: 列名称。\n- **Collation**: 列以什么方式存储在索引中。在MySQL中，有值‘A’（升序）或NULL（无分类）。\n- **Cardinality**: 索引中唯一值的数目的估计值。通过运行ANALYZE TABLE或myisamchk -a可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL使用该索引的机会就越大。\n- **Sub_part**: 如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为NULL。\n- **Packed**: 指示关键字如何被压缩。如果没有被压缩，则为NULL。\n- **Null**: 如果列含有NULL，则含有YES。如果没有，则该列含有NO。\n- **Index_type**: 用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）。\n- **Comment**: 备注\n\n","slug":"mysql-2017-08-09-basic-index","published":1,"updated":"2017-09-15T15:05:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko96000skjxvh2avt1d9","content":"<p>原文：<a href=\"http://www.cnblogs.com/tianhuilove/archive/2011/09/05/2167795.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/tianhuilove/archive/2011/09/05/2167795.html</a></p>\n<p>[TOC]</p>\n<h2><span id=\"suo-yin-lei-xing\">索引类型</span><a href=\"#suo-yin-lei-xing\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">在创建索引时，可以规定索引能否包含重复值。如果不包含，则索引应该创建为PRIMARY KEY或UNIQUE索引。</div><div class=\"line\">对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复。</div><div class=\"line\">PRIMARY KEY索引和UNIQUE索引非常类似。事实上，PRIMARY KEY索引仅是一个具有名称PRIMARY的UNIQUE索引。</div><div class=\"line\">这表示一个表只能包含一个PRIMARY KEY，因为一个表中不可能具有两个同名的索引。</div><div class=\"line\">下面的SQL语句对students表在sid上添加PRIMARY KEY索引。</div></pre></td></tr></table></figure>\n<h2><span id=\"chuang-jian-suo-yin\">创建索引</span><a href=\"#chuang-jian-suo-yin\" class=\"header-anchor\"></a></h2><p>在执行CREATE TABLE语句时可以创建索引，也可以单独用CREATE INDEX或ALTER TABLE来为表增加索引。</p>\n<h3><span id=\"alter-table\">alter table</span><a href=\"#alter-table\" class=\"header-anchor\"></a></h3><p>其中table_name是要增加索引的表名，column_list指出对哪些列进行索引，多列时各列之间用逗号分隔。索引名index_name可选，缺省时，MySQL将根据第一个索引列赋一个名称。另外，ALTER TABLE允许在单个语句中更改多个表，因此可以在同时创建多个索引。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table table_name add index index_name (column_list);</div><div class=\"line\">alter table table_name add unique index_name (column_list);</div><div class=\"line\">alter table table_name add primary key (column_list);</div></pre></td></tr></table></figure></p>\n<h3><span id=\"create-table\">create table</span><a href=\"#create-table\" class=\"header-anchor\"></a></h3><p>CREATE INDEX可对表增加普通索引或UNIQUE索引。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">create index index_name on table_name (column_list);</div><div class=\"line\">create unique index index_name on table_name (column_list);</div></pre></td></tr></table></figure></p>\n<h2><span id=\"shan-chu-suo-yin\">删除索引</span><a href=\"#shan-chu-suo-yin\" class=\"header-anchor\"></a></h2><p>可利用ALTER TABLE或DROP INDEX语句来删除索引。类似于CREATE INDEX语句，DROP INDEX可以在ALTER TABLE内部作为一条语句处理，语法如下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop index index_name on table_name;</div><div class=\"line\">alter table_name drop index index_name;</div><div class=\"line\">alter table_name drop primary key;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">其中，前两条语句是等价的，删除掉table_name中的索引index_name。</div><div class=\"line\">第3条语句只在删除PRIMARY KEY索引时使用，因为一个表只可能有一个PRIMARY KEY索引，因此不需要指定索引名。</div><div class=\"line\">如果没有创建PRIMARY KEY索引，但表具有一个或多个UNIQUE索引，则MySQL将删除第一个UNIQUE索引。</div><div class=\"line\">如果从表中删除了某列，则索引会受到影响。对于多列组合的索引</div><div class=\"line\">如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。</div></pre></td></tr></table></figure>\n<h2><span id=\"cha-kan-suo-yin\">查看索引</span><a href=\"#cha-kan-suo-yin\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">show index from table_name;</div><div class=\"line\">show keys from table_name;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>Table</strong>: 表的名称。</li>\n<li><strong>Non_unique</strong>: 如果索引不能包括重复词，则为0。如果可以，则为1。</li>\n<li><strong>Key_name</strong>: 索引的名称。</li>\n<li><strong>Seq_in_index</strong>: 索引中的列序列号，从1开始。</li>\n<li><strong>Column_name</strong>: 列名称。</li>\n<li><strong>Collation</strong>: 列以什么方式存储在索引中。在MySQL中，有值‘A’（升序）或NULL（无分类）。</li>\n<li><strong>Cardinality</strong>: 索引中唯一值的数目的估计值。通过运行ANALYZE TABLE或myisamchk -a可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL使用该索引的机会就越大。</li>\n<li><strong>Sub_part</strong>: 如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为NULL。</li>\n<li><strong>Packed</strong>: 指示关键字如何被压缩。如果没有被压缩，则为NULL。</li>\n<li><strong>Null</strong>: 如果列含有NULL，则含有YES。如果没有，则该列含有NO。</li>\n<li><strong>Index_type</strong>: 用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）。</li>\n<li><strong>Comment</strong>: 备注</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>原文：<a href=\"http://www.cnblogs.com/tianhuilove/archive/2011/09/05/2167795.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/tianhuilove/archive/2011/09/05/2167795.html</a></p>\n<p>[TOC]</p>\n<h2 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">在创建索引时，可以规定索引能否包含重复值。如果不包含，则索引应该创建为PRIMARY KEY或UNIQUE索引。</div><div class=\"line\">对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复。</div><div class=\"line\">PRIMARY KEY索引和UNIQUE索引非常类似。事实上，PRIMARY KEY索引仅是一个具有名称PRIMARY的UNIQUE索引。</div><div class=\"line\">这表示一个表只能包含一个PRIMARY KEY，因为一个表中不可能具有两个同名的索引。</div><div class=\"line\">下面的SQL语句对students表在sid上添加PRIMARY KEY索引。</div></pre></td></tr></table></figure>\n<h2 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h2><p>在执行CREATE TABLE语句时可以创建索引，也可以单独用CREATE INDEX或ALTER TABLE来为表增加索引。</p>\n<h3 id=\"alter-table\"><a href=\"#alter-table\" class=\"headerlink\" title=\"alter table\"></a>alter table</h3><p>其中table_name是要增加索引的表名，column_list指出对哪些列进行索引，多列时各列之间用逗号分隔。索引名index_name可选，缺省时，MySQL将根据第一个索引列赋一个名称。另外，ALTER TABLE允许在单个语句中更改多个表，因此可以在同时创建多个索引。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table table_name add index index_name (column_list);</div><div class=\"line\">alter table table_name add unique index_name (column_list);</div><div class=\"line\">alter table table_name add primary key (column_list);</div></pre></td></tr></table></figure></p>\n<h3 id=\"create-table\"><a href=\"#create-table\" class=\"headerlink\" title=\"create table\"></a>create table</h3><p>CREATE INDEX可对表增加普通索引或UNIQUE索引。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">create index index_name on table_name (column_list);</div><div class=\"line\">create unique index index_name on table_name (column_list);</div></pre></td></tr></table></figure></p>\n<h2 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h2><p>可利用ALTER TABLE或DROP INDEX语句来删除索引。类似于CREATE INDEX语句，DROP INDEX可以在ALTER TABLE内部作为一条语句处理，语法如下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop index index_name on table_name;</div><div class=\"line\">alter table_name drop index index_name;</div><div class=\"line\">alter table_name drop primary key;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">其中，前两条语句是等价的，删除掉table_name中的索引index_name。</div><div class=\"line\">第3条语句只在删除PRIMARY KEY索引时使用，因为一个表只可能有一个PRIMARY KEY索引，因此不需要指定索引名。</div><div class=\"line\">如果没有创建PRIMARY KEY索引，但表具有一个或多个UNIQUE索引，则MySQL将删除第一个UNIQUE索引。</div><div class=\"line\">如果从表中删除了某列，则索引会受到影响。对于多列组合的索引</div><div class=\"line\">如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。</div></pre></td></tr></table></figure>\n<h2 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">show index from table_name;</div><div class=\"line\">show keys from table_name;</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>Table</strong>: 表的名称。</li>\n<li><strong>Non_unique</strong>: 如果索引不能包括重复词，则为0。如果可以，则为1。</li>\n<li><strong>Key_name</strong>: 索引的名称。</li>\n<li><strong>Seq_in_index</strong>: 索引中的列序列号，从1开始。</li>\n<li><strong>Column_name</strong>: 列名称。</li>\n<li><strong>Collation</strong>: 列以什么方式存储在索引中。在MySQL中，有值‘A’（升序）或NULL（无分类）。</li>\n<li><strong>Cardinality</strong>: 索引中唯一值的数目的估计值。通过运行ANALYZE TABLE或myisamchk -a可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL使用该索引的机会就越大。</li>\n<li><strong>Sub_part</strong>: 如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为NULL。</li>\n<li><strong>Packed</strong>: 指示关键字如何被压缩。如果没有被压缩，则为NULL。</li>\n<li><strong>Null</strong>: 如果列含有NULL，则含有YES。如果没有，则该列含有NO。</li>\n<li><strong>Index_type</strong>: 用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）。</li>\n<li><strong>Comment</strong>: 备注</li>\n</ul>\n"},{"title":"2017-08-09 新建collection合集表，新建trigger完成更新用户文章数","date":"2017-08-08T16:00:00.000Z","_content":"\n> 今天练习新建collection合集表，并在article中添加user_id字段，在user_data中添加article_count字段，并新建trigger ```insert_article```完成用户文章数自动更新\n\n专辑：[mysql每天练习](/?p=/doc/mysql/mysql_daily.md)\n\n\n- 新建collection\n```mysql\ndrop table if exists `collection`;\ncreate table `collection`(\n\tid int(11) not null auto_increment,\n\tname varchar(256) not null default '' comment '合集名称',\n\tis_del tinyint(1) not null default 0 comment '是否删除',\n\tcreate_ts timestamp not null default current_timestamp comment '创建时间',\n\tupdate_ts timestamp not null default current_timestamp on update current_timestamp comment '修改时间',\n\tprimary key(`id`)\n)engine=InnoDB default charset=utf8mb4 comment '合集表';\n```\n- article添加user_id\n```mysql\nalter table article add column user_id int(11) not null default 0 comment '用户id';\n```\n- ```user_data``` 中添加```article_count```字段\n```mysql\nalter table user_data add column article_count int(11) not null default 0 comment '发布文章数量';\n```\n- 新建trigger\n```mysql\ndrop trigger if exists `insert_article`;\ndelimiter $\ncreate trigger `insert_article` after insert on article for each row \nbegin\n\tdeclare count int;\n\tif (new.user_id > 0) then\n\t\tselect count(0) into count from user_data where user_id = new.user_id;\n\t\tif (count > 0) then\n\t\t\tupdate user_data set article_count = article_count +1 where user_id = new.user_id;\n\t\telse\n\t\t\tinsert into user_data (user_id,article_count) values (new.user_id,1);\n\t\tend if;\n\tend if;\nend $\ndelimiter ;\n```\n- 运行\n```mysql\ninsert into article (name,url,user_id) values ('title','http://baidu.com',3);\ninsert into article (name,url,user_id) values ('title','http://baidu.com',3);\nselect * from user_data where user_id = 3;\n```\n运行后，article_count应该等于2\n\n","source":"_posts/mysql-2017-08-09-item-daily.md","raw":"---\ntitle: 2017-08-09 新建collection合集表，新建trigger完成更新用户文章数\ndate: 2017-08-09\ntags:\n---\n\n> 今天练习新建collection合集表，并在article中添加user_id字段，在user_data中添加article_count字段，并新建trigger ```insert_article```完成用户文章数自动更新\n\n专辑：[mysql每天练习](/?p=/doc/mysql/mysql_daily.md)\n\n\n- 新建collection\n```mysql\ndrop table if exists `collection`;\ncreate table `collection`(\n\tid int(11) not null auto_increment,\n\tname varchar(256) not null default '' comment '合集名称',\n\tis_del tinyint(1) not null default 0 comment '是否删除',\n\tcreate_ts timestamp not null default current_timestamp comment '创建时间',\n\tupdate_ts timestamp not null default current_timestamp on update current_timestamp comment '修改时间',\n\tprimary key(`id`)\n)engine=InnoDB default charset=utf8mb4 comment '合集表';\n```\n- article添加user_id\n```mysql\nalter table article add column user_id int(11) not null default 0 comment '用户id';\n```\n- ```user_data``` 中添加```article_count```字段\n```mysql\nalter table user_data add column article_count int(11) not null default 0 comment '发布文章数量';\n```\n- 新建trigger\n```mysql\ndrop trigger if exists `insert_article`;\ndelimiter $\ncreate trigger `insert_article` after insert on article for each row \nbegin\n\tdeclare count int;\n\tif (new.user_id > 0) then\n\t\tselect count(0) into count from user_data where user_id = new.user_id;\n\t\tif (count > 0) then\n\t\t\tupdate user_data set article_count = article_count +1 where user_id = new.user_id;\n\t\telse\n\t\t\tinsert into user_data (user_id,article_count) values (new.user_id,1);\n\t\tend if;\n\tend if;\nend $\ndelimiter ;\n```\n- 运行\n```mysql\ninsert into article (name,url,user_id) values ('title','http://baidu.com',3);\ninsert into article (name,url,user_id) values ('title','http://baidu.com',3);\nselect * from user_data where user_id = 3;\n```\n运行后，article_count应该等于2\n\n","slug":"mysql-2017-08-09-item-daily","published":1,"updated":"2017-09-15T15:05:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko96000tkjxvzms9vm2c","content":"<blockquote>\n<p>今天练习新建collection合集表，并在article中添加user_id字段，在user_data中添加article_count字段，并新建trigger <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">专辑：[mysql每天练习](/?p=/doc/mysql/mysql_daily.md)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- 新建collection</div><div class=\"line\">```mysql</div><div class=\"line\">drop table if exists `collection`;</div><div class=\"line\">create table `collection`(</div><div class=\"line\">\tid int(11) not null auto_increment,</div><div class=\"line\">\tname varchar(256) not null default &apos;&apos; comment &apos;合集名称&apos;,</div><div class=\"line\">\tis_del tinyint(1) not null default 0 comment &apos;是否删除&apos;,</div><div class=\"line\">\tcreate_ts timestamp not null default current_timestamp comment &apos;创建时间&apos;,</div><div class=\"line\">\tupdate_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;,</div><div class=\"line\">\tprimary key(`id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;合集表&apos;;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li><p>article添加user_id</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table article add column user_id int(11) not null default 0 comment &apos;用户id&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><figcaption><span>中添加```article_count```字段</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">```mysql</div><div class=\"line\">alter table user_data add column article_count int(11) not null default 0 comment &apos;发布文章数量&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建trigger</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop trigger if exists `insert_article`;</div><div class=\"line\">delimiter $</div><div class=\"line\">create trigger `insert_article` after insert on article for each row </div><div class=\"line\">begin</div><div class=\"line\">\tdeclare count int;</div><div class=\"line\">\tif (new.user_id &gt; 0) then</div><div class=\"line\">\t\tselect count(0) into count from user_data where user_id = new.user_id;</div><div class=\"line\">\t\tif (count &gt; 0) then</div><div class=\"line\">\t\t\tupdate user_data set article_count = article_count +1 where user_id = new.user_id;</div><div class=\"line\">\t\telse</div><div class=\"line\">\t\t\tinsert into user_data (user_id,article_count) values (new.user_id,1);</div><div class=\"line\">\t\tend if;</div><div class=\"line\">\tend if;</div><div class=\"line\">end $</div><div class=\"line\">delimiter ;</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into article (name,url,user_id) values (&apos;title&apos;,&apos;http://baidu.com&apos;,3);</div><div class=\"line\">insert into article (name,url,user_id) values (&apos;title&apos;,&apos;http://baidu.com&apos;,3);</div><div class=\"line\">select * from user_data where user_id = 3;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行后，article_count应该等于2</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>今天练习新建collection合集表，并在article中添加user_id字段，在user_data中添加article_count字段，并新建trigger <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">专辑：[mysql每天练习](/?p=/doc/mysql/mysql_daily.md)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- 新建collection</div><div class=\"line\">```mysql</div><div class=\"line\">drop table if exists `collection`;</div><div class=\"line\">create table `collection`(</div><div class=\"line\">\tid int(11) not null auto_increment,</div><div class=\"line\">\tname varchar(256) not null default &apos;&apos; comment &apos;合集名称&apos;,</div><div class=\"line\">\tis_del tinyint(1) not null default 0 comment &apos;是否删除&apos;,</div><div class=\"line\">\tcreate_ts timestamp not null default current_timestamp comment &apos;创建时间&apos;,</div><div class=\"line\">\tupdate_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;,</div><div class=\"line\">\tprimary key(`id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;合集表&apos;;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li><p>article添加user_id</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table article add column user_id int(11) not null default 0 comment &apos;用户id&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><figcaption><span>中添加```article_count```字段</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">```mysql</div><div class=\"line\">alter table user_data add column article_count int(11) not null default 0 comment &apos;发布文章数量&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建trigger</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop trigger if exists `insert_article`;</div><div class=\"line\">delimiter $</div><div class=\"line\">create trigger `insert_article` after insert on article for each row </div><div class=\"line\">begin</div><div class=\"line\">\tdeclare count int;</div><div class=\"line\">\tif (new.user_id &gt; 0) then</div><div class=\"line\">\t\tselect count(0) into count from user_data where user_id = new.user_id;</div><div class=\"line\">\t\tif (count &gt; 0) then</div><div class=\"line\">\t\t\tupdate user_data set article_count = article_count +1 where user_id = new.user_id;</div><div class=\"line\">\t\telse</div><div class=\"line\">\t\t\tinsert into user_data (user_id,article_count) values (new.user_id,1);</div><div class=\"line\">\t\tend if;</div><div class=\"line\">\tend if;</div><div class=\"line\">end $</div><div class=\"line\">delimiter ;</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into article (name,url,user_id) values (&apos;title&apos;,&apos;http://baidu.com&apos;,3);</div><div class=\"line\">insert into article (name,url,user_id) values (&apos;title&apos;,&apos;http://baidu.com&apos;,3);</div><div class=\"line\">select * from user_data where user_id = 3;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行后，article_count应该等于2</p>\n"},{"title":"mysql prompt 提示符","date":"2017-08-08T16:00:00.000Z","_content":"\n原文：[http://www.thegeekstuff.com/2010/02/mysql_ps1-6-examples-to-make-your-mysql-prompt-like-angelina-jolie/](http://www.thegeekstuff.com/2010/02/mysql_ps1-6-examples-to-make-your-mysql-prompt-like-angelina-jolie/)\n## 在命令行中使用\n```mysql\nmysql> prompt \\u@\\d>\nPROMPT set to '\\u@\\d> '\nroot@(none)> use test\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\nroot@test>\n```\n\n## 在命令行参数中使用\n需要使用双引号括起来\n```mysql\nwxnacy@wxnacydeMacBook-Pro: ~ $ mysql -u root -p --prompt=\"\\u@\\d> \"    \nroot@(none)> use test;\nroot@test>\n```\n### 在bash层修改 MYSQL_PS1 变量\n```bash\nwxnacy@wxnacydeMacBook-Pro: ~ $ export MYSQL_PS1=\"\\u@\\d> \"                              \nwxnacy@wxnacydeMacBook-Pro: ~ $ mysql -u root -p                            \nroot@(none)>\n```\n## 在/etc/my.cnf中配置\n也可以在配置中一劳永逸\n```bash\n[mysql]  \nprompt=\\\\u@\\\\d>\\\\ # 要多加一个反斜线\\\n  \n又或者：  \n[mysql]  \nprompt=\"\\u@\\d> \"  \n```\n### 更多参数\n```bash\nOption  Description  \n  \n\\c  A counter that increments for each statement you issue  \n\\D  The full current date  \n\\d  The default database  \n\\h  The server host  \n\\l  The current delimiter (new in 5.0.25)  \n\\m  Minutes of the current time  \n\\n  A newline character  \n\\O  The current month in three-letter format (Jan, Feb, …)  \n\\o  The current month in numeric format  \n\\P  am/pm  \n\\p  The current TCP/IP port or socket file  \n\\R  The current time, in 24-hour military time (0–23)  \n\\r  The current time, standard 12-hour time (1–12)  \n\\S  Semicolon  \n\\s  Seconds of the current time  \n\\t  A tab character  \n\\U  Your full user_name@host_name account name  \n   \n\\u  Your user name  \n\\v  The server version  \n\\w  The current day of the week in three-letter format (Mon, Tue, …)  \n\\Y  The current year, four digits  \n\\y  The current year, two digits  \n\\_  A space  \n\\   A space (a space follows the backslash)  \n\\'  Single quote  \n\\\"  Double quote  \n\\\\  A literal “\\” backslash character  \n\\x  x, for any “x” not listed above  \n\n```\n\n\n\n","source":"_posts/mysql-2017-08-09-prompt.md","raw":"---\ntitle: mysql prompt 提示符\ndate: 2017-08-09\ntags:\n---\n\n原文：[http://www.thegeekstuff.com/2010/02/mysql_ps1-6-examples-to-make-your-mysql-prompt-like-angelina-jolie/](http://www.thegeekstuff.com/2010/02/mysql_ps1-6-examples-to-make-your-mysql-prompt-like-angelina-jolie/)\n## 在命令行中使用\n```mysql\nmysql> prompt \\u@\\d>\nPROMPT set to '\\u@\\d> '\nroot@(none)> use test\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\nroot@test>\n```\n\n## 在命令行参数中使用\n需要使用双引号括起来\n```mysql\nwxnacy@wxnacydeMacBook-Pro: ~ $ mysql -u root -p --prompt=\"\\u@\\d> \"    \nroot@(none)> use test;\nroot@test>\n```\n### 在bash层修改 MYSQL_PS1 变量\n```bash\nwxnacy@wxnacydeMacBook-Pro: ~ $ export MYSQL_PS1=\"\\u@\\d> \"                              \nwxnacy@wxnacydeMacBook-Pro: ~ $ mysql -u root -p                            \nroot@(none)>\n```\n## 在/etc/my.cnf中配置\n也可以在配置中一劳永逸\n```bash\n[mysql]  \nprompt=\\\\u@\\\\d>\\\\ # 要多加一个反斜线\\\n  \n又或者：  \n[mysql]  \nprompt=\"\\u@\\d> \"  \n```\n### 更多参数\n```bash\nOption  Description  \n  \n\\c  A counter that increments for each statement you issue  \n\\D  The full current date  \n\\d  The default database  \n\\h  The server host  \n\\l  The current delimiter (new in 5.0.25)  \n\\m  Minutes of the current time  \n\\n  A newline character  \n\\O  The current month in three-letter format (Jan, Feb, …)  \n\\o  The current month in numeric format  \n\\P  am/pm  \n\\p  The current TCP/IP port or socket file  \n\\R  The current time, in 24-hour military time (0–23)  \n\\r  The current time, standard 12-hour time (1–12)  \n\\S  Semicolon  \n\\s  Seconds of the current time  \n\\t  A tab character  \n\\U  Your full user_name@host_name account name  \n   \n\\u  Your user name  \n\\v  The server version  \n\\w  The current day of the week in three-letter format (Mon, Tue, …)  \n\\Y  The current year, four digits  \n\\y  The current year, two digits  \n\\_  A space  \n\\   A space (a space follows the backslash)  \n\\'  Single quote  \n\\\"  Double quote  \n\\\\  A literal “\\” backslash character  \n\\x  x, for any “x” not listed above  \n\n```\n\n\n\n","slug":"mysql-2017-08-09-prompt","published":1,"updated":"2017-09-15T15:05:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko97000ukjxvbpx79hmu","content":"<p>原文：<a href=\"http://www.thegeekstuff.com/2010/02/mysql_ps1-6-examples-to-make-your-mysql-prompt-like-angelina-jolie/\" target=\"_blank\" rel=\"external\">http://www.thegeekstuff.com/2010/02/mysql_ps1-6-examples-to-make-your-mysql-prompt-like-angelina-jolie/</a></p>\n<h2><span id=\"zai-ming-ling-xing-zhong-shi-yong\">在命令行中使用</span><a href=\"#zai-ming-ling-xing-zhong-shi-yong\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; prompt \\u@\\d&gt;</div><div class=\"line\">PROMPT set to &apos;\\u@\\d&gt; &apos;</div><div class=\"line\">root@(none)&gt; use test</div><div class=\"line\">Reading table information for completion of table and column names</div><div class=\"line\">You can turn off this feature to get a quicker startup with -A</div><div class=\"line\"></div><div class=\"line\">Database changed</div><div class=\"line\">root@test&gt;</div></pre></td></tr></table></figure>\n<h2><span id=\"zai-ming-ling-xing-can-shu-zhong-shi-yong\">在命令行参数中使用</span><a href=\"#zai-ming-ling-xing-can-shu-zhong-shi-yong\" class=\"header-anchor\"></a></h2><p>需要使用双引号括起来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wxnacy@wxnacydeMacBook-Pro: ~ $ mysql -u root -p --prompt=&quot;\\u@\\d&gt; &quot;    </div><div class=\"line\">root@(none)&gt; use test;</div><div class=\"line\">root@test&gt;</div></pre></td></tr></table></figure></p>\n<h3><span id=\"zai-bash-ceng-xiu-gai-mysql-ps1-bian-liang\">在bash层修改 MYSQL_PS1 变量</span><a href=\"#zai-bash-ceng-xiu-gai-mysql-ps1-bian-liang\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wxnacy@wxnacydeMacBook-Pro: ~ $ <span class=\"built_in\">export</span> MYSQL_PS1=<span class=\"string\">\"\\u@\\d&gt; \"</span>                              </div><div class=\"line\">wxnacy@wxnacydeMacBook-Pro: ~ $ mysql -u root -p                            </div><div class=\"line\">root@(none)&gt;</div></pre></td></tr></table></figure>\n<h2><span id=\"zai-etc-my-cnf-zhong-pei-zhi\">在/etc/my.cnf中配置</span><a href=\"#zai-etc-my-cnf-zhong-pei-zhi\" class=\"header-anchor\"></a></h2><p>也可以在配置中一劳永逸<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysql]  </div><div class=\"line\">prompt=\\\\u@\\\\d&gt;\\\\ <span class=\"comment\"># 要多加一个反斜线\\</span></div><div class=\"line\">  </div><div class=\"line\">又或者：  </div><div class=\"line\">[mysql]  </div><div class=\"line\">prompt=<span class=\"string\">\"\\u@\\d&gt; \"</span></div></pre></td></tr></table></figure></p>\n<h3><span id=\"geng-duo-can-shu\">更多参数</span><a href=\"#geng-duo-can-shu\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">Option  Description  </div><div class=\"line\">  </div><div class=\"line\">\\c  A counter that increments <span class=\"keyword\">for</span> each statement you issue  </div><div class=\"line\">\\D  The full current date  </div><div class=\"line\">\\d  The default database  </div><div class=\"line\">\\h  The server host  </div><div class=\"line\">\\l  The current delimiter (new <span class=\"keyword\">in</span> 5.0.25)  </div><div class=\"line\">\\m  Minutes of the current time  </div><div class=\"line\">\\n  A newline character  </div><div class=\"line\">\\O  The current month <span class=\"keyword\">in</span> three-letter format (Jan, Feb, …)  </div><div class=\"line\">\\o  The current month <span class=\"keyword\">in</span> numeric format  </div><div class=\"line\">\\P  am/pm  </div><div class=\"line\">\\p  The current TCP/IP port or socket file  </div><div class=\"line\">\\R  The current time, <span class=\"keyword\">in</span> 24-hour military time (0–23)  </div><div class=\"line\">\\r  The current time, standard 12-hour time (1–12)  </div><div class=\"line\">\\S  Semicolon  </div><div class=\"line\">\\s  Seconds of the current time  </div><div class=\"line\">\\t  A tab character  </div><div class=\"line\">\\U  Your full user_name@host_name account name  </div><div class=\"line\">   </div><div class=\"line\">\\u  Your user name  </div><div class=\"line\">\\v  The server version  </div><div class=\"line\">\\w  The current day of the week <span class=\"keyword\">in</span> three-letter format (Mon, Tue, …)  </div><div class=\"line\">\\Y  The current year, four digits  </div><div class=\"line\">\\y  The current year, two digits  </div><div class=\"line\">\\_  A space  </div><div class=\"line\">\\   A space (a space follows the backslash)  </div><div class=\"line\">\\<span class=\"string\">'  Single quote  </span></div><div class=\"line\"><span class=\"string\">\\\"  Double quote  </span></div><div class=\"line\"><span class=\"string\">\\\\  A literal “\\” backslash character  </span></div><div class=\"line\"><span class=\"string\">\\x  x, for any “x” not listed above</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>原文：<a href=\"http://www.thegeekstuff.com/2010/02/mysql_ps1-6-examples-to-make-your-mysql-prompt-like-angelina-jolie/\" target=\"_blank\" rel=\"external\">http://www.thegeekstuff.com/2010/02/mysql_ps1-6-examples-to-make-your-mysql-prompt-like-angelina-jolie/</a></p>\n<h2 id=\"在命令行中使用\"><a href=\"#在命令行中使用\" class=\"headerlink\" title=\"在命令行中使用\"></a>在命令行中使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; prompt \\u@\\d&gt;</div><div class=\"line\">PROMPT set to &apos;\\u@\\d&gt; &apos;</div><div class=\"line\">root@(none)&gt; use test</div><div class=\"line\">Reading table information for completion of table and column names</div><div class=\"line\">You can turn off this feature to get a quicker startup with -A</div><div class=\"line\"></div><div class=\"line\">Database changed</div><div class=\"line\">root@test&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"在命令行参数中使用\"><a href=\"#在命令行参数中使用\" class=\"headerlink\" title=\"在命令行参数中使用\"></a>在命令行参数中使用</h2><p>需要使用双引号括起来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wxnacy@wxnacydeMacBook-Pro: ~ $ mysql -u root -p --prompt=&quot;\\u@\\d&gt; &quot;    </div><div class=\"line\">root@(none)&gt; use test;</div><div class=\"line\">root@test&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"在bash层修改-MYSQL-PS1-变量\"><a href=\"#在bash层修改-MYSQL-PS1-变量\" class=\"headerlink\" title=\"在bash层修改 MYSQL_PS1 变量\"></a>在bash层修改 MYSQL_PS1 变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wxnacy@wxnacydeMacBook-Pro: ~ $ <span class=\"built_in\">export</span> MYSQL_PS1=<span class=\"string\">\"\\u@\\d&gt; \"</span>                              </div><div class=\"line\">wxnacy@wxnacydeMacBook-Pro: ~ $ mysql -u root -p                            </div><div class=\"line\">root@(none)&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"在-etc-my-cnf中配置\"><a href=\"#在-etc-my-cnf中配置\" class=\"headerlink\" title=\"在/etc/my.cnf中配置\"></a>在/etc/my.cnf中配置</h2><p>也可以在配置中一劳永逸<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysql]  </div><div class=\"line\">prompt=\\\\u@\\\\d&gt;\\\\ <span class=\"comment\"># 要多加一个反斜线\\</span></div><div class=\"line\">  </div><div class=\"line\">又或者：  </div><div class=\"line\">[mysql]  </div><div class=\"line\">prompt=<span class=\"string\">\"\\u@\\d&gt; \"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"更多参数\"><a href=\"#更多参数\" class=\"headerlink\" title=\"更多参数\"></a>更多参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">Option  Description  </div><div class=\"line\">  </div><div class=\"line\">\\c  A counter that increments <span class=\"keyword\">for</span> each statement you issue  </div><div class=\"line\">\\D  The full current date  </div><div class=\"line\">\\d  The default database  </div><div class=\"line\">\\h  The server host  </div><div class=\"line\">\\l  The current delimiter (new <span class=\"keyword\">in</span> 5.0.25)  </div><div class=\"line\">\\m  Minutes of the current time  </div><div class=\"line\">\\n  A newline character  </div><div class=\"line\">\\O  The current month <span class=\"keyword\">in</span> three-letter format (Jan, Feb, …)  </div><div class=\"line\">\\o  The current month <span class=\"keyword\">in</span> numeric format  </div><div class=\"line\">\\P  am/pm  </div><div class=\"line\">\\p  The current TCP/IP port or socket file  </div><div class=\"line\">\\R  The current time, <span class=\"keyword\">in</span> 24-hour military time (0–23)  </div><div class=\"line\">\\r  The current time, standard 12-hour time (1–12)  </div><div class=\"line\">\\S  Semicolon  </div><div class=\"line\">\\s  Seconds of the current time  </div><div class=\"line\">\\t  A tab character  </div><div class=\"line\">\\U  Your full user_name@host_name account name  </div><div class=\"line\">   </div><div class=\"line\">\\u  Your user name  </div><div class=\"line\">\\v  The server version  </div><div class=\"line\">\\w  The current day of the week <span class=\"keyword\">in</span> three-letter format (Mon, Tue, …)  </div><div class=\"line\">\\Y  The current year, four digits  </div><div class=\"line\">\\y  The current year, two digits  </div><div class=\"line\">\\_  A space  </div><div class=\"line\">\\   A space (a space follows the backslash)  </div><div class=\"line\">\\<span class=\"string\">'  Single quote  </span></div><div class=\"line\"><span class=\"string\">\\\"  Double quote  </span></div><div class=\"line\"><span class=\"string\">\\\\  A literal “\\” backslash character  </span></div><div class=\"line\"><span class=\"string\">\\x  x, for any “x” not listed above</span></div></pre></td></tr></table></figure>\n"},{"title":"mysql select 格式化输出","date":"2017-08-08T16:00:00.000Z","_content":"\n## 使用\\G输出结果按行垂直显示结果\n当使用命令select结果，如果表属性特别多的时候，查看起来非常难受，在select语句后使用\\G(必须大写)，可以让结果按行垂直显示\n```mysql\nmysql> select * from user\\G;\n\n*************************** 1. row ***************************\n       id: 1\n     name: wxnacy\n   is_del: 0\ncreate_ts: 2017-08-08 07:46:42\nupdate_ts: 2017-08-08 07:46:42\n1 row in set (0.00 sec)\n```\n## 以html格式输出\n使用mysql客户端的参数–html或者-T，则所有SQL的查询结果会自动生成为html的table代码\n```mysql\n$ mysql -u root --html -p\nmysql> select * from user;\n\n<TABLE BORDER=1><TR><TH>id</TH><TH>name</TH><TH>is_del</TH><TH>create_ts</TH><TH>update_ts</TH></TR><TR><TD>1</TD><TD>wxnacy</TD><TD>0</TD><TD>2017-08-08 07:46:42</TD><TD>2017-08-08 07:46:42</TD></TR></TABLE>\n```\n## 以xml格式输出\n使用mysql客户端的参数–xml或者-X选项，可以将结果输出为xml格式\n```mysql\n$ mysql -u root --xml -p\nmysql> select * from user;\n\n<?xml version=\"1.0\"?>\n\n<resultset statement=\"select * from user;\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <row>\n\t<field name=\"id\">1</field>\n\t<field name=\"name\">wxnacy</field>\n\t<field name=\"is_del\">0</field>\n\t<field name=\"create_ts\">2017-08-08 07:46:42</field>\n\t<field name=\"update_ts\">2017-08-08 07:46:42</field>\n  </row>\n</resultset>\n```\n## 使用pager进入more或less查看结果\n当select查询结果很多时，一屏幕往往无法装下。使用pager命令后在进行select命令，可以进入类似linux中more或less查看文件的效果\n```mysql\nmysql> pager more\nPAGER set to 'more'\nmysql> select * from user;\n...\nmysql> nopager #退出pager状态\nPAGER set to stdout\n```\n\n\n","source":"_posts/mysql-2017-08-09-select-format.md","raw":"---\ntitle: mysql select 格式化输出\ndate: 2017-08-09\ntags:\n---\n\n## 使用\\G输出结果按行垂直显示结果\n当使用命令select结果，如果表属性特别多的时候，查看起来非常难受，在select语句后使用\\G(必须大写)，可以让结果按行垂直显示\n```mysql\nmysql> select * from user\\G;\n\n*************************** 1. row ***************************\n       id: 1\n     name: wxnacy\n   is_del: 0\ncreate_ts: 2017-08-08 07:46:42\nupdate_ts: 2017-08-08 07:46:42\n1 row in set (0.00 sec)\n```\n## 以html格式输出\n使用mysql客户端的参数–html或者-T，则所有SQL的查询结果会自动生成为html的table代码\n```mysql\n$ mysql -u root --html -p\nmysql> select * from user;\n\n<TABLE BORDER=1><TR><TH>id</TH><TH>name</TH><TH>is_del</TH><TH>create_ts</TH><TH>update_ts</TH></TR><TR><TD>1</TD><TD>wxnacy</TD><TD>0</TD><TD>2017-08-08 07:46:42</TD><TD>2017-08-08 07:46:42</TD></TR></TABLE>\n```\n## 以xml格式输出\n使用mysql客户端的参数–xml或者-X选项，可以将结果输出为xml格式\n```mysql\n$ mysql -u root --xml -p\nmysql> select * from user;\n\n<?xml version=\"1.0\"?>\n\n<resultset statement=\"select * from user;\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <row>\n\t<field name=\"id\">1</field>\n\t<field name=\"name\">wxnacy</field>\n\t<field name=\"is_del\">0</field>\n\t<field name=\"create_ts\">2017-08-08 07:46:42</field>\n\t<field name=\"update_ts\">2017-08-08 07:46:42</field>\n  </row>\n</resultset>\n```\n## 使用pager进入more或less查看结果\n当select查询结果很多时，一屏幕往往无法装下。使用pager命令后在进行select命令，可以进入类似linux中more或less查看文件的效果\n```mysql\nmysql> pager more\nPAGER set to 'more'\nmysql> select * from user;\n...\nmysql> nopager #退出pager状态\nPAGER set to stdout\n```\n\n\n","slug":"mysql-2017-08-09-select-format","published":1,"updated":"2017-09-15T15:05:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko97000vkjxvynjsteji","content":"<h2><span id=\"shi-yong-g-shu-chu-jie-guo-an-xing-chui-zhi-xian-shi-jie-guo\">使用\\G输出结果按行垂直显示结果</span><a href=\"#shi-yong-g-shu-chu-jie-guo-an-xing-chui-zhi-xian-shi-jie-guo\" class=\"header-anchor\"></a></h2><p>当使用命令select结果，如果表属性特别多的时候，查看起来非常难受，在select语句后使用\\G(必须大写)，可以让结果按行垂直显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select * from user\\G;</div><div class=\"line\"></div><div class=\"line\">*************************** 1. row ***************************</div><div class=\"line\">       id: 1</div><div class=\"line\">     name: wxnacy</div><div class=\"line\">   is_del: 0</div><div class=\"line\">create_ts: 2017-08-08 07:46:42</div><div class=\"line\">update_ts: 2017-08-08 07:46:42</div><div class=\"line\">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>\n<h2><span id=\"yi-html-ge-shi-shu-chu\">以html格式输出</span><a href=\"#yi-html-ge-shi-shu-chu\" class=\"header-anchor\"></a></h2><p>使用mysql客户端的参数–html或者-T，则所有SQL的查询结果会自动生成为html的table代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysql -u root --html -p</div><div class=\"line\">mysql&gt; select * from user;</div><div class=\"line\"></div><div class=\"line\">&lt;TABLE BORDER=1&gt;&lt;TR&gt;&lt;TH&gt;id&lt;/TH&gt;&lt;TH&gt;name&lt;/TH&gt;&lt;TH&gt;is_del&lt;/TH&gt;&lt;TH&gt;create_ts&lt;/TH&gt;&lt;TH&gt;update_ts&lt;/TH&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;1&lt;/TD&gt;&lt;TD&gt;wxnacy&lt;/TD&gt;&lt;TD&gt;0&lt;/TD&gt;&lt;TD&gt;2017-08-08 07:46:42&lt;/TD&gt;&lt;TD&gt;2017-08-08 07:46:42&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;</div></pre></td></tr></table></figure></p>\n<h2><span id=\"yi-xml-ge-shi-shu-chu\">以xml格式输出</span><a href=\"#yi-xml-ge-shi-shu-chu\" class=\"header-anchor\"></a></h2><p>使用mysql客户端的参数–xml或者-X选项，可以将结果输出为xml格式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysql -u root --xml -p</div><div class=\"line\">mysql&gt; select * from user;</div><div class=\"line\"></div><div class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;resultset statement=&quot;select * from user;&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;</div><div class=\"line\">  &lt;row&gt;</div><div class=\"line\">\t&lt;field name=&quot;id&quot;&gt;1&lt;/field&gt;</div><div class=\"line\">\t&lt;field name=&quot;name&quot;&gt;wxnacy&lt;/field&gt;</div><div class=\"line\">\t&lt;field name=&quot;is_del&quot;&gt;0&lt;/field&gt;</div><div class=\"line\">\t&lt;field name=&quot;create_ts&quot;&gt;2017-08-08 07:46:42&lt;/field&gt;</div><div class=\"line\">\t&lt;field name=&quot;update_ts&quot;&gt;2017-08-08 07:46:42&lt;/field&gt;</div><div class=\"line\">  &lt;/row&gt;</div><div class=\"line\">&lt;/resultset&gt;</div></pre></td></tr></table></figure></p>\n<h2><span id=\"shi-yong-pager-jin-ru-more-huo-less-cha-kan-jie-guo\">使用pager进入more或less查看结果</span><a href=\"#shi-yong-pager-jin-ru-more-huo-less-cha-kan-jie-guo\" class=\"header-anchor\"></a></h2><p>当select查询结果很多时，一屏幕往往无法装下。使用pager命令后在进行select命令，可以进入类似linux中more或less查看文件的效果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; pager more</div><div class=\"line\">PAGER set to &apos;more&apos;</div><div class=\"line\">mysql&gt; select * from user;</div><div class=\"line\">...</div><div class=\"line\">mysql&gt; nopager #退出pager状态</div><div class=\"line\">PAGER set to stdout</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用-G输出结果按行垂直显示结果\"><a href=\"#使用-G输出结果按行垂直显示结果\" class=\"headerlink\" title=\"使用\\G输出结果按行垂直显示结果\"></a>使用\\G输出结果按行垂直显示结果</h2><p>当使用命令select结果，如果表属性特别多的时候，查看起来非常难受，在select语句后使用\\G(必须大写)，可以让结果按行垂直显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; select * from user\\G;</div><div class=\"line\"></div><div class=\"line\">*************************** 1. row ***************************</div><div class=\"line\">       id: 1</div><div class=\"line\">     name: wxnacy</div><div class=\"line\">   is_del: 0</div><div class=\"line\">create_ts: 2017-08-08 07:46:42</div><div class=\"line\">update_ts: 2017-08-08 07:46:42</div><div class=\"line\">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>\n<h2 id=\"以html格式输出\"><a href=\"#以html格式输出\" class=\"headerlink\" title=\"以html格式输出\"></a>以html格式输出</h2><p>使用mysql客户端的参数–html或者-T，则所有SQL的查询结果会自动生成为html的table代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysql -u root --html -p</div><div class=\"line\">mysql&gt; select * from user;</div><div class=\"line\"></div><div class=\"line\">&lt;TABLE BORDER=1&gt;&lt;TR&gt;&lt;TH&gt;id&lt;/TH&gt;&lt;TH&gt;name&lt;/TH&gt;&lt;TH&gt;is_del&lt;/TH&gt;&lt;TH&gt;create_ts&lt;/TH&gt;&lt;TH&gt;update_ts&lt;/TH&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;1&lt;/TD&gt;&lt;TD&gt;wxnacy&lt;/TD&gt;&lt;TD&gt;0&lt;/TD&gt;&lt;TD&gt;2017-08-08 07:46:42&lt;/TD&gt;&lt;TD&gt;2017-08-08 07:46:42&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"以xml格式输出\"><a href=\"#以xml格式输出\" class=\"headerlink\" title=\"以xml格式输出\"></a>以xml格式输出</h2><p>使用mysql客户端的参数–xml或者-X选项，可以将结果输出为xml格式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysql -u root --xml -p</div><div class=\"line\">mysql&gt; select * from user;</div><div class=\"line\"></div><div class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;resultset statement=&quot;select * from user;&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;</div><div class=\"line\">  &lt;row&gt;</div><div class=\"line\">\t&lt;field name=&quot;id&quot;&gt;1&lt;/field&gt;</div><div class=\"line\">\t&lt;field name=&quot;name&quot;&gt;wxnacy&lt;/field&gt;</div><div class=\"line\">\t&lt;field name=&quot;is_del&quot;&gt;0&lt;/field&gt;</div><div class=\"line\">\t&lt;field name=&quot;create_ts&quot;&gt;2017-08-08 07:46:42&lt;/field&gt;</div><div class=\"line\">\t&lt;field name=&quot;update_ts&quot;&gt;2017-08-08 07:46:42&lt;/field&gt;</div><div class=\"line\">  &lt;/row&gt;</div><div class=\"line\">&lt;/resultset&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"使用pager进入more或less查看结果\"><a href=\"#使用pager进入more或less查看结果\" class=\"headerlink\" title=\"使用pager进入more或less查看结果\"></a>使用pager进入more或less查看结果</h2><p>当select查询结果很多时，一屏幕往往无法装下。使用pager命令后在进行select命令，可以进入类似linux中more或less查看文件的效果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; pager more</div><div class=\"line\">PAGER set to &apos;more&apos;</div><div class=\"line\">mysql&gt; select * from user;</div><div class=\"line\">...</div><div class=\"line\">mysql&gt; nopager #退出pager状态</div><div class=\"line\">PAGER set to stdout</div></pre></td></tr></table></figure></p>\n"},{"title":"mysql 小技巧","date":"2017-08-08T16:00:00.000Z","_content":"\n## 使用tee指定输入日志\ntee命令可以将mysql操作日志输出到指定文件中，如果文件已存在则追加。命令行参数可以使用--tee=file_path，命令中可以使用tee或\\T,想要退出使用日志可以使用\\t\n```mysql\n$ mysql -u root -p --tee=mysql.log\nLogging to file 'mysql.log'\nmysql> tee mysql.log 或 \\T mysql.log\nLogging to file 'mysql.log'\nmysql> \\t mysql.log\nOutfile disabled\n```\n## 使用os命令\n```mysql\nmysql> system uname;\nDarwin\nmysql> \\! uname;\nDarwin\n```\n## 执行sql文件\n```mysql\nmysql> source mysql.sql\n```\n\n","source":"_posts/mysql-2017-08-09-skill.md","raw":"---\ntitle: mysql 小技巧\ndate: 2017-08-09\ntags:\n---\n\n## 使用tee指定输入日志\ntee命令可以将mysql操作日志输出到指定文件中，如果文件已存在则追加。命令行参数可以使用--tee=file_path，命令中可以使用tee或\\T,想要退出使用日志可以使用\\t\n```mysql\n$ mysql -u root -p --tee=mysql.log\nLogging to file 'mysql.log'\nmysql> tee mysql.log 或 \\T mysql.log\nLogging to file 'mysql.log'\nmysql> \\t mysql.log\nOutfile disabled\n```\n## 使用os命令\n```mysql\nmysql> system uname;\nDarwin\nmysql> \\! uname;\nDarwin\n```\n## 执行sql文件\n```mysql\nmysql> source mysql.sql\n```\n\n","slug":"mysql-2017-08-09-skill","published":1,"updated":"2017-09-15T15:06:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko98000wkjxvbdk4pv58","content":"<h2><span id=\"shi-yong-tee-zhi-ding-shu-ru-ri-zhi\">使用tee指定输入日志</span><a href=\"#shi-yong-tee-zhi-ding-shu-ru-ri-zhi\" class=\"header-anchor\"></a></h2><p>tee命令可以将mysql操作日志输出到指定文件中，如果文件已存在则追加。命令行参数可以使用–tee=file_path，命令中可以使用tee或\\T,想要退出使用日志可以使用\\t<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysql -u root -p --tee=mysql.log</div><div class=\"line\">Logging to file &apos;mysql.log&apos;</div><div class=\"line\">mysql&gt; tee mysql.log 或 \\T mysql.log</div><div class=\"line\">Logging to file &apos;mysql.log&apos;</div><div class=\"line\">mysql&gt; \\t mysql.log</div><div class=\"line\">Outfile disabled</div></pre></td></tr></table></figure></p>\n<h2><span id=\"shi-yong-os-ming-ling\">使用os命令</span><a href=\"#shi-yong-os-ming-ling\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; system uname;</div><div class=\"line\">Darwin</div><div class=\"line\">mysql&gt; \\! uname;</div><div class=\"line\">Darwin</div></pre></td></tr></table></figure>\n<h2><span id=\"zhi-xing-sql-wen-jian\">执行sql文件</span><a href=\"#zhi-xing-sql-wen-jian\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; source mysql.sql</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用tee指定输入日志\"><a href=\"#使用tee指定输入日志\" class=\"headerlink\" title=\"使用tee指定输入日志\"></a>使用tee指定输入日志</h2><p>tee命令可以将mysql操作日志输出到指定文件中，如果文件已存在则追加。命令行参数可以使用–tee=file_path，命令中可以使用tee或\\T,想要退出使用日志可以使用\\t<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysql -u root -p --tee=mysql.log</div><div class=\"line\">Logging to file &apos;mysql.log&apos;</div><div class=\"line\">mysql&gt; tee mysql.log 或 \\T mysql.log</div><div class=\"line\">Logging to file &apos;mysql.log&apos;</div><div class=\"line\">mysql&gt; \\t mysql.log</div><div class=\"line\">Outfile disabled</div></pre></td></tr></table></figure></p>\n<h2 id=\"使用os命令\"><a href=\"#使用os命令\" class=\"headerlink\" title=\"使用os命令\"></a>使用os命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; system uname;</div><div class=\"line\">Darwin</div><div class=\"line\">mysql&gt; \\! uname;</div><div class=\"line\">Darwin</div></pre></td></tr></table></figure>\n<h2 id=\"执行sql文件\"><a href=\"#执行sql文件\" class=\"headerlink\" title=\"执行sql文件\"></a>执行sql文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; source mysql.sql</div></pre></td></tr></table></figure>\n"},{"title":"2017-08-10 新建collection_resource表，新建trigger更新collection资源总数","date":"2017-08-09T16:00:00.000Z","_content":"\n> 今天练习的目标，新建collection_resource表，并新建trigger更新collection的资源数\n\n专辑：[mysql每天练习](/?p=/doc/mysql/mysql_daily.md)\n\n## 新建collection_resource\n```mysql\ndrop table if exists `collection_resource`;\nCREATE TABLE `collection_resource` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `collection_id` int(11) NOT NULL,\n  `resource_id` int(11) NOT NULL,\n  `resource_type` varchar(32) NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='合集资源对应表';\n```\n## collection表添加资源数量字段\n```mysql\nalter table collection add column resource_count int(11) not null default 0 comment '资源总数';\n```\n## 新建trigger\n```mysql\ndrop trigger if exists `insert_collection_resource`;\ndelimiter $\ncreate trigger `insert_collection_resource` after insert on collection_resource for each row \nbegin\n\tdeclare count int;\n\tselect count(0) into count from collection where id = new.collection_id;\n\tif (count > 0) then \n\t\tupdate collection set resource_count = resource_count + 1 where id = new.collection_id;\n\tend if;\nend $\ndelimiter ;\n```\n## 运行\n```mysql\ninsert into collection(name) values ('合集');\ninsert into collection_resource (collection_id,resource_id,resource_type) values(1,1,'video');\nselect * from collection;\n```\n\n","source":"_posts/mysql-2017-08-10-item-daily.md","raw":"---\ntitle: 2017-08-10 新建collection_resource表，新建trigger更新collection资源总数\ndate: 2017-08-10\ntags:\n---\n\n> 今天练习的目标，新建collection_resource表，并新建trigger更新collection的资源数\n\n专辑：[mysql每天练习](/?p=/doc/mysql/mysql_daily.md)\n\n## 新建collection_resource\n```mysql\ndrop table if exists `collection_resource`;\nCREATE TABLE `collection_resource` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `collection_id` int(11) NOT NULL,\n  `resource_id` int(11) NOT NULL,\n  `resource_type` varchar(32) NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='合集资源对应表';\n```\n## collection表添加资源数量字段\n```mysql\nalter table collection add column resource_count int(11) not null default 0 comment '资源总数';\n```\n## 新建trigger\n```mysql\ndrop trigger if exists `insert_collection_resource`;\ndelimiter $\ncreate trigger `insert_collection_resource` after insert on collection_resource for each row \nbegin\n\tdeclare count int;\n\tselect count(0) into count from collection where id = new.collection_id;\n\tif (count > 0) then \n\t\tupdate collection set resource_count = resource_count + 1 where id = new.collection_id;\n\tend if;\nend $\ndelimiter ;\n```\n## 运行\n```mysql\ninsert into collection(name) values ('合集');\ninsert into collection_resource (collection_id,resource_id,resource_type) values(1,1,'video');\nselect * from collection;\n```\n\n","slug":"mysql-2017-08-10-item-daily","published":1,"updated":"2017-09-15T15:06:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko99000xkjxvfsovt0e1","content":"<blockquote>\n<p>今天练习的目标，新建collection_resource表，并新建trigger更新collection的资源数</p>\n</blockquote>\n<p>专辑：<a href=\"/?p=/doc/mysql/mysql_daily.md\">mysql每天练习</a></p>\n<h2><span id=\"xin-jian-collection-resource\">新建collection_resource</span><a href=\"#xin-jian-collection-resource\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `collection_resource`;</div><div class=\"line\">CREATE TABLE `collection_resource` (</div><div class=\"line\">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class=\"line\">  `collection_id` int(11) NOT NULL,</div><div class=\"line\">  `resource_id` int(11) NOT NULL,</div><div class=\"line\">  `resource_type` varchar(32) NOT NULL,</div><div class=\"line\">  PRIMARY KEY (`id`)</div><div class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=&apos;合集资源对应表&apos;;</div></pre></td></tr></table></figure>\n<h2><span id=\"collection-biao-tian-jia-zi-yuan-shu-liang-zi-duan\">collection表添加资源数量字段</span><a href=\"#collection-biao-tian-jia-zi-yuan-shu-liang-zi-duan\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table collection add column resource_count int(11) not null default 0 comment &apos;资源总数&apos;;</div></pre></td></tr></table></figure>\n<h2><span id=\"xin-jian-trigger\">新建trigger</span><a href=\"#xin-jian-trigger\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop trigger if exists `insert_collection_resource`;</div><div class=\"line\">delimiter $</div><div class=\"line\">create trigger `insert_collection_resource` after insert on collection_resource for each row </div><div class=\"line\">begin</div><div class=\"line\">\tdeclare count int;</div><div class=\"line\">\tselect count(0) into count from collection where id = new.collection_id;</div><div class=\"line\">\tif (count &gt; 0) then </div><div class=\"line\">\t\tupdate collection set resource_count = resource_count + 1 where id = new.collection_id;</div><div class=\"line\">\tend if;</div><div class=\"line\">end $</div><div class=\"line\">delimiter ;</div></pre></td></tr></table></figure>\n<h2><span id=\"yun-xing\">运行</span><a href=\"#yun-xing\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into collection(name) values (&apos;合集&apos;);</div><div class=\"line\">insert into collection_resource (collection_id,resource_id,resource_type) values(1,1,&apos;video&apos;);</div><div class=\"line\">select * from collection;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>今天练习的目标，新建collection_resource表，并新建trigger更新collection的资源数</p>\n</blockquote>\n<p>专辑：<a href=\"/?p=/doc/mysql/mysql_daily.md\">mysql每天练习</a></p>\n<h2 id=\"新建collection-resource\"><a href=\"#新建collection-resource\" class=\"headerlink\" title=\"新建collection_resource\"></a>新建collection_resource</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `collection_resource`;</div><div class=\"line\">CREATE TABLE `collection_resource` (</div><div class=\"line\">  `id` int(11) NOT NULL AUTO_INCREMENT,</div><div class=\"line\">  `collection_id` int(11) NOT NULL,</div><div class=\"line\">  `resource_id` int(11) NOT NULL,</div><div class=\"line\">  `resource_type` varchar(32) NOT NULL,</div><div class=\"line\">  PRIMARY KEY (`id`)</div><div class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=&apos;合集资源对应表&apos;;</div></pre></td></tr></table></figure>\n<h2 id=\"collection表添加资源数量字段\"><a href=\"#collection表添加资源数量字段\" class=\"headerlink\" title=\"collection表添加资源数量字段\"></a>collection表添加资源数量字段</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table collection add column resource_count int(11) not null default 0 comment &apos;资源总数&apos;;</div></pre></td></tr></table></figure>\n<h2 id=\"新建trigger\"><a href=\"#新建trigger\" class=\"headerlink\" title=\"新建trigger\"></a>新建trigger</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop trigger if exists `insert_collection_resource`;</div><div class=\"line\">delimiter $</div><div class=\"line\">create trigger `insert_collection_resource` after insert on collection_resource for each row </div><div class=\"line\">begin</div><div class=\"line\">\tdeclare count int;</div><div class=\"line\">\tselect count(0) into count from collection where id = new.collection_id;</div><div class=\"line\">\tif (count &gt; 0) then </div><div class=\"line\">\t\tupdate collection set resource_count = resource_count + 1 where id = new.collection_id;</div><div class=\"line\">\tend if;</div><div class=\"line\">end $</div><div class=\"line\">delimiter ;</div></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into collection(name) values (&apos;合集&apos;);</div><div class=\"line\">insert into collection_resource (collection_id,resource_id,resource_type) values(1,1,&apos;video&apos;);</div><div class=\"line\">select * from collection;</div></pre></td></tr></table></figure>\n"},{"title":"2017-08-11 新建用户行为表，新建trigger完成用户总分数更新","date":"2017-08-10T16:00:00.000Z","_content":"\n> 今天练习新建用户行为表user_event，并新建trigger做到更新用户总分数\n\n## 新建user_event\n```mysql\ndrop table if exists `user_event`;\ncreate table `user_event`(\n\tid int(11) not null auto_increment,\n\tuser_id int(11) not null comment '用户id',\n\ttype varchar(32) not null comment '行为类型',\n\tresource_id int(11) not null default 0 comment '资源id',\n\tresource_type varchar(32) not null default '' comment '资源类型',\n\tval_num int(11) not null default 0 comment '备用int值',\n\tval_str varchar(512) not null default '' comment '备用str值',\n\text JSON default null comment '扩展',\n\tis_del tinyint(1) not null default 0 comment '是否删除',\n\tcreate_ts timestamp not null default current_timestamp comment '创建时间',\n\tupdate_ts timestamp not null default current_timestamp on update current_timestamp comment '修改时间',\n\tprimary key(`id`)\n)engine=InnoDB default charset=utf8mb4 comment '用户行为表';\n```\n\n## 用户表添加总分数和等级字段\n```mysql\nalter table user add column rank int(11) not null default 0 comment '排行';\nalter table user add column score int(11) not null default 0 comment '积分';\n```\n\n## 新建trigger\n```mysql\ndrop trigger if exists `insert_user_event`;\ndelimiter $\ncreate trigger `insert_user_event` after insert on `user_event` for each row \nbegin\n\tdeclare total_score int;\n\tif (new.type = 'get_score') then\n\t\tselect sum(val_num) into total_score from user_event where user_id = new.user_id and type  = 'get_score';\n\t\tupdate user set score = total_score where id = new.user_id;\n\tend if;\nend $\ndelimiter ;\n```\n\n## 运行\n```mysql\ninsert into user_event (user_id,type,val_num) values (1,'get_score',200);\ninsert into user_event (user_id,type,val_num) values (1,'get_score',200);\nselect * from user where id = 1;\n```\n运行后user中score应该等于400\n\n","source":"_posts/mysql-2017-08-11-item-daily.md","raw":"---\ntitle: 2017-08-11 新建用户行为表，新建trigger完成用户总分数更新\ndate: 2017-08-11\ntags:\n---\n\n> 今天练习新建用户行为表user_event，并新建trigger做到更新用户总分数\n\n## 新建user_event\n```mysql\ndrop table if exists `user_event`;\ncreate table `user_event`(\n\tid int(11) not null auto_increment,\n\tuser_id int(11) not null comment '用户id',\n\ttype varchar(32) not null comment '行为类型',\n\tresource_id int(11) not null default 0 comment '资源id',\n\tresource_type varchar(32) not null default '' comment '资源类型',\n\tval_num int(11) not null default 0 comment '备用int值',\n\tval_str varchar(512) not null default '' comment '备用str值',\n\text JSON default null comment '扩展',\n\tis_del tinyint(1) not null default 0 comment '是否删除',\n\tcreate_ts timestamp not null default current_timestamp comment '创建时间',\n\tupdate_ts timestamp not null default current_timestamp on update current_timestamp comment '修改时间',\n\tprimary key(`id`)\n)engine=InnoDB default charset=utf8mb4 comment '用户行为表';\n```\n\n## 用户表添加总分数和等级字段\n```mysql\nalter table user add column rank int(11) not null default 0 comment '排行';\nalter table user add column score int(11) not null default 0 comment '积分';\n```\n\n## 新建trigger\n```mysql\ndrop trigger if exists `insert_user_event`;\ndelimiter $\ncreate trigger `insert_user_event` after insert on `user_event` for each row \nbegin\n\tdeclare total_score int;\n\tif (new.type = 'get_score') then\n\t\tselect sum(val_num) into total_score from user_event where user_id = new.user_id and type  = 'get_score';\n\t\tupdate user set score = total_score where id = new.user_id;\n\tend if;\nend $\ndelimiter ;\n```\n\n## 运行\n```mysql\ninsert into user_event (user_id,type,val_num) values (1,'get_score',200);\ninsert into user_event (user_id,type,val_num) values (1,'get_score',200);\nselect * from user where id = 1;\n```\n运行后user中score应该等于400\n\n","slug":"mysql-2017-08-11-item-daily","published":1,"updated":"2017-09-15T15:06:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko99000ykjxvmsatyynk","content":"<blockquote>\n<p>今天练习新建用户行为表user_event，并新建trigger做到更新用户总分数</p>\n</blockquote>\n<h2><span id=\"xin-jian-user-event\">新建user_event</span><a href=\"#xin-jian-user-event\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `user_event`;</div><div class=\"line\">create table `user_event`(</div><div class=\"line\">\tid int(11) not null auto_increment,</div><div class=\"line\">\tuser_id int(11) not null comment &apos;用户id&apos;,</div><div class=\"line\">\ttype varchar(32) not null comment &apos;行为类型&apos;,</div><div class=\"line\">\tresource_id int(11) not null default 0 comment &apos;资源id&apos;,</div><div class=\"line\">\tresource_type varchar(32) not null default &apos;&apos; comment &apos;资源类型&apos;,</div><div class=\"line\">\tval_num int(11) not null default 0 comment &apos;备用int值&apos;,</div><div class=\"line\">\tval_str varchar(512) not null default &apos;&apos; comment &apos;备用str值&apos;,</div><div class=\"line\">\text JSON default null comment &apos;扩展&apos;,</div><div class=\"line\">\tis_del tinyint(1) not null default 0 comment &apos;是否删除&apos;,</div><div class=\"line\">\tcreate_ts timestamp not null default current_timestamp comment &apos;创建时间&apos;,</div><div class=\"line\">\tupdate_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;,</div><div class=\"line\">\tprimary key(`id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;用户行为表&apos;;</div></pre></td></tr></table></figure>\n<h2><span id=\"yong-hu-biao-tian-jia-zong-fen-shu-he-deng-ji-zi-duan\">用户表添加总分数和等级字段</span><a href=\"#yong-hu-biao-tian-jia-zong-fen-shu-he-deng-ji-zi-duan\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table user add column rank int(11) not null default 0 comment &apos;排行&apos;;</div><div class=\"line\">alter table user add column score int(11) not null default 0 comment &apos;积分&apos;;</div></pre></td></tr></table></figure>\n<h2><span id=\"xin-jian-trigger\">新建trigger</span><a href=\"#xin-jian-trigger\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop trigger if exists `insert_user_event`;</div><div class=\"line\">delimiter $</div><div class=\"line\">create trigger `insert_user_event` after insert on `user_event` for each row </div><div class=\"line\">begin</div><div class=\"line\">\tdeclare total_score int;</div><div class=\"line\">\tif (new.type = &apos;get_score&apos;) then</div><div class=\"line\">\t\tselect sum(val_num) into total_score from user_event where user_id = new.user_id and type  = &apos;get_score&apos;;</div><div class=\"line\">\t\tupdate user set score = total_score where id = new.user_id;</div><div class=\"line\">\tend if;</div><div class=\"line\">end $</div><div class=\"line\">delimiter ;</div></pre></td></tr></table></figure>\n<h2><span id=\"yun-xing\">运行</span><a href=\"#yun-xing\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into user_event (user_id,type,val_num) values (1,&apos;get_score&apos;,200);</div><div class=\"line\">insert into user_event (user_id,type,val_num) values (1,&apos;get_score&apos;,200);</div><div class=\"line\">select * from user where id = 1;</div></pre></td></tr></table></figure>\n<p>运行后user中score应该等于400</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>今天练习新建用户行为表user_event，并新建trigger做到更新用户总分数</p>\n</blockquote>\n<h2 id=\"新建user-event\"><a href=\"#新建user-event\" class=\"headerlink\" title=\"新建user_event\"></a>新建user_event</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `user_event`;</div><div class=\"line\">create table `user_event`(</div><div class=\"line\">\tid int(11) not null auto_increment,</div><div class=\"line\">\tuser_id int(11) not null comment &apos;用户id&apos;,</div><div class=\"line\">\ttype varchar(32) not null comment &apos;行为类型&apos;,</div><div class=\"line\">\tresource_id int(11) not null default 0 comment &apos;资源id&apos;,</div><div class=\"line\">\tresource_type varchar(32) not null default &apos;&apos; comment &apos;资源类型&apos;,</div><div class=\"line\">\tval_num int(11) not null default 0 comment &apos;备用int值&apos;,</div><div class=\"line\">\tval_str varchar(512) not null default &apos;&apos; comment &apos;备用str值&apos;,</div><div class=\"line\">\text JSON default null comment &apos;扩展&apos;,</div><div class=\"line\">\tis_del tinyint(1) not null default 0 comment &apos;是否删除&apos;,</div><div class=\"line\">\tcreate_ts timestamp not null default current_timestamp comment &apos;创建时间&apos;,</div><div class=\"line\">\tupdate_ts timestamp not null default current_timestamp on update current_timestamp comment &apos;修改时间&apos;,</div><div class=\"line\">\tprimary key(`id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;用户行为表&apos;;</div></pre></td></tr></table></figure>\n<h2 id=\"用户表添加总分数和等级字段\"><a href=\"#用户表添加总分数和等级字段\" class=\"headerlink\" title=\"用户表添加总分数和等级字段\"></a>用户表添加总分数和等级字段</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alter table user add column rank int(11) not null default 0 comment &apos;排行&apos;;</div><div class=\"line\">alter table user add column score int(11) not null default 0 comment &apos;积分&apos;;</div></pre></td></tr></table></figure>\n<h2 id=\"新建trigger\"><a href=\"#新建trigger\" class=\"headerlink\" title=\"新建trigger\"></a>新建trigger</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop trigger if exists `insert_user_event`;</div><div class=\"line\">delimiter $</div><div class=\"line\">create trigger `insert_user_event` after insert on `user_event` for each row </div><div class=\"line\">begin</div><div class=\"line\">\tdeclare total_score int;</div><div class=\"line\">\tif (new.type = &apos;get_score&apos;) then</div><div class=\"line\">\t\tselect sum(val_num) into total_score from user_event where user_id = new.user_id and type  = &apos;get_score&apos;;</div><div class=\"line\">\t\tupdate user set score = total_score where id = new.user_id;</div><div class=\"line\">\tend if;</div><div class=\"line\">end $</div><div class=\"line\">delimiter ;</div></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into user_event (user_id,type,val_num) values (1,&apos;get_score&apos;,200);</div><div class=\"line\">insert into user_event (user_id,type,val_num) values (1,&apos;get_score&apos;,200);</div><div class=\"line\">select * from user where id = 1;</div></pre></td></tr></table></figure>\n<p>运行后user中score应该等于400</p>\n"},{"title":"2017-08-12 新建等级表，完善`insert_user_event`","date":"2017-08-11T16:00:00.000Z","_content":"\n> 今天练习目标，新建等级表，完善`insert_user_event`做到自动更新用户总积分和当前等级\n\n## 新建等级表\n```mysql\ndrop table if exists `rank`;\ncreate table `rank`(\n\tid int(11) not null auto_increment,\n\trank int(11) not null default 0 comment '等级',\n\tname varchar(32) not null  comment '等级名',\n\tscore int(11) not null comment '等级所需值',\n\tprimary key(`id`)\n)engine=InnoDB default charset=utf8mb4 comment '登记表';\n```\n\n## 插入数据\n```mysql\ninsert into rank (rank,name,score) values (1,'等级1',0);\ninsert into rank (rank,name,score) values (2,'等级2',200);\ninsert into rank (rank,name,score) values (3,'等级3',500);\ninsert into rank (rank,name,score) values (4,'等级4',1000);\ninsert into rank (rank,name,score) values (5,'等级5',2000);\ninsert into rank (rank,name,score) values (6,'等级6',5000);\ninsert into rank (rank,name,score) values (7,'等级7',10000);\ninsert into rank (rank,name,score) values (8,'等级8',20000);\n```\n\n## 重写trigger\n```mysql\ndrop trigger if exists `insert_user_event`;\nDELIMITER $\ncreate trigger `insert_user_event` after insert on user_event for each row  \nbegin\n\tdeclare total_score int;\n\tdeclare rank_val int;\n\tif (new.type = 'get_score') then\n\t\tselect sum(val_num) into total_score from user_event where user_id = new.user_id and type = 'get_score' and is_del = 0;\n\t\tselect rank into rank_val  from rank where score <= total_score order by score desc limit 1;\n\t\tupdate user set rank = rank_val , score = total_score where id = new.user_id;\n\t\t\n\tend if;\nend $\nDELIMITER ;\n\n```\n\n## 运行\n```mysql\nupdate user set rank = 0 , score = 0 where id = 1;\nupdate user_event set is_del = 1 where user_id = 1 and type = 'get_score';\ninsert into user_event (user_id,type,val_num) values (1,'get_score',501);\nselect * from user where id = 1;\n\n```\n\n运行后，用户rank=1 score=501\n\n","source":"_posts/mysql-2017-08-12-item-daily.md","raw":"---\ntitle: 2017-08-12 新建等级表，完善`insert_user_event`\ndate: 2017-08-12\ntags:\n---\n\n> 今天练习目标，新建等级表，完善`insert_user_event`做到自动更新用户总积分和当前等级\n\n## 新建等级表\n```mysql\ndrop table if exists `rank`;\ncreate table `rank`(\n\tid int(11) not null auto_increment,\n\trank int(11) not null default 0 comment '等级',\n\tname varchar(32) not null  comment '等级名',\n\tscore int(11) not null comment '等级所需值',\n\tprimary key(`id`)\n)engine=InnoDB default charset=utf8mb4 comment '登记表';\n```\n\n## 插入数据\n```mysql\ninsert into rank (rank,name,score) values (1,'等级1',0);\ninsert into rank (rank,name,score) values (2,'等级2',200);\ninsert into rank (rank,name,score) values (3,'等级3',500);\ninsert into rank (rank,name,score) values (4,'等级4',1000);\ninsert into rank (rank,name,score) values (5,'等级5',2000);\ninsert into rank (rank,name,score) values (6,'等级6',5000);\ninsert into rank (rank,name,score) values (7,'等级7',10000);\ninsert into rank (rank,name,score) values (8,'等级8',20000);\n```\n\n## 重写trigger\n```mysql\ndrop trigger if exists `insert_user_event`;\nDELIMITER $\ncreate trigger `insert_user_event` after insert on user_event for each row  \nbegin\n\tdeclare total_score int;\n\tdeclare rank_val int;\n\tif (new.type = 'get_score') then\n\t\tselect sum(val_num) into total_score from user_event where user_id = new.user_id and type = 'get_score' and is_del = 0;\n\t\tselect rank into rank_val  from rank where score <= total_score order by score desc limit 1;\n\t\tupdate user set rank = rank_val , score = total_score where id = new.user_id;\n\t\t\n\tend if;\nend $\nDELIMITER ;\n\n```\n\n## 运行\n```mysql\nupdate user set rank = 0 , score = 0 where id = 1;\nupdate user_event set is_del = 1 where user_id = 1 and type = 'get_score';\ninsert into user_event (user_id,type,val_num) values (1,'get_score',501);\nselect * from user where id = 1;\n\n```\n\n运行后，用户rank=1 score=501\n\n","slug":"mysql-2017-08-12-item-daily","published":1,"updated":"2017-09-15T15:06:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9a000zkjxveie82c5s","content":"<blockquote>\n<p>今天练习目标，新建等级表，完善<code>insert_user_event</code>做到自动更新用户总积分和当前等级</p>\n</blockquote>\n<h2><span id=\"xin-jian-deng-ji-biao\">新建等级表</span><a href=\"#xin-jian-deng-ji-biao\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `rank`;</div><div class=\"line\">create table `rank`(</div><div class=\"line\">\tid int(11) not null auto_increment,</div><div class=\"line\">\trank int(11) not null default 0 comment &apos;等级&apos;,</div><div class=\"line\">\tname varchar(32) not null  comment &apos;等级名&apos;,</div><div class=\"line\">\tscore int(11) not null comment &apos;等级所需值&apos;,</div><div class=\"line\">\tprimary key(`id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;登记表&apos;;</div></pre></td></tr></table></figure>\n<h2><span id=\"cha-ru-shu-ju\">插入数据</span><a href=\"#cha-ru-shu-ju\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into rank (rank,name,score) values (1,&apos;等级1&apos;,0);</div><div class=\"line\">insert into rank (rank,name,score) values (2,&apos;等级2&apos;,200);</div><div class=\"line\">insert into rank (rank,name,score) values (3,&apos;等级3&apos;,500);</div><div class=\"line\">insert into rank (rank,name,score) values (4,&apos;等级4&apos;,1000);</div><div class=\"line\">insert into rank (rank,name,score) values (5,&apos;等级5&apos;,2000);</div><div class=\"line\">insert into rank (rank,name,score) values (6,&apos;等级6&apos;,5000);</div><div class=\"line\">insert into rank (rank,name,score) values (7,&apos;等级7&apos;,10000);</div><div class=\"line\">insert into rank (rank,name,score) values (8,&apos;等级8&apos;,20000);</div></pre></td></tr></table></figure>\n<h2><span id=\"chong-xie-trigger\">重写trigger</span><a href=\"#chong-xie-trigger\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop trigger if exists `insert_user_event`;</div><div class=\"line\">DELIMITER $</div><div class=\"line\">create trigger `insert_user_event` after insert on user_event for each row  </div><div class=\"line\">begin</div><div class=\"line\">\tdeclare total_score int;</div><div class=\"line\">\tdeclare rank_val int;</div><div class=\"line\">\tif (new.type = &apos;get_score&apos;) then</div><div class=\"line\">\t\tselect sum(val_num) into total_score from user_event where user_id = new.user_id and type = &apos;get_score&apos; and is_del = 0;</div><div class=\"line\">\t\tselect rank into rank_val  from rank where score &lt;= total_score order by score desc limit 1;</div><div class=\"line\">\t\tupdate user set rank = rank_val , score = total_score where id = new.user_id;</div><div class=\"line\">\t\t</div><div class=\"line\">\tend if;</div><div class=\"line\">end $</div><div class=\"line\">DELIMITER ;</div></pre></td></tr></table></figure>\n<h2><span id=\"yun-xing\">运行</span><a href=\"#yun-xing\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">update user set rank = 0 , score = 0 where id = 1;</div><div class=\"line\">update user_event set is_del = 1 where user_id = 1 and type = &apos;get_score&apos;;</div><div class=\"line\">insert into user_event (user_id,type,val_num) values (1,&apos;get_score&apos;,501);</div><div class=\"line\">select * from user where id = 1;</div></pre></td></tr></table></figure>\n<p>运行后，用户rank=1 score=501</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>今天练习目标，新建等级表，完善<code>insert_user_event</code>做到自动更新用户总积分和当前等级</p>\n</blockquote>\n<h2 id=\"新建等级表\"><a href=\"#新建等级表\" class=\"headerlink\" title=\"新建等级表\"></a>新建等级表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table if exists `rank`;</div><div class=\"line\">create table `rank`(</div><div class=\"line\">\tid int(11) not null auto_increment,</div><div class=\"line\">\trank int(11) not null default 0 comment &apos;等级&apos;,</div><div class=\"line\">\tname varchar(32) not null  comment &apos;等级名&apos;,</div><div class=\"line\">\tscore int(11) not null comment &apos;等级所需值&apos;,</div><div class=\"line\">\tprimary key(`id`)</div><div class=\"line\">)engine=InnoDB default charset=utf8mb4 comment &apos;登记表&apos;;</div></pre></td></tr></table></figure>\n<h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into rank (rank,name,score) values (1,&apos;等级1&apos;,0);</div><div class=\"line\">insert into rank (rank,name,score) values (2,&apos;等级2&apos;,200);</div><div class=\"line\">insert into rank (rank,name,score) values (3,&apos;等级3&apos;,500);</div><div class=\"line\">insert into rank (rank,name,score) values (4,&apos;等级4&apos;,1000);</div><div class=\"line\">insert into rank (rank,name,score) values (5,&apos;等级5&apos;,2000);</div><div class=\"line\">insert into rank (rank,name,score) values (6,&apos;等级6&apos;,5000);</div><div class=\"line\">insert into rank (rank,name,score) values (7,&apos;等级7&apos;,10000);</div><div class=\"line\">insert into rank (rank,name,score) values (8,&apos;等级8&apos;,20000);</div></pre></td></tr></table></figure>\n<h2 id=\"重写trigger\"><a href=\"#重写trigger\" class=\"headerlink\" title=\"重写trigger\"></a>重写trigger</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop trigger if exists `insert_user_event`;</div><div class=\"line\">DELIMITER $</div><div class=\"line\">create trigger `insert_user_event` after insert on user_event for each row  </div><div class=\"line\">begin</div><div class=\"line\">\tdeclare total_score int;</div><div class=\"line\">\tdeclare rank_val int;</div><div class=\"line\">\tif (new.type = &apos;get_score&apos;) then</div><div class=\"line\">\t\tselect sum(val_num) into total_score from user_event where user_id = new.user_id and type = &apos;get_score&apos; and is_del = 0;</div><div class=\"line\">\t\tselect rank into rank_val  from rank where score &lt;= total_score order by score desc limit 1;</div><div class=\"line\">\t\tupdate user set rank = rank_val , score = total_score where id = new.user_id;</div><div class=\"line\">\t\t</div><div class=\"line\">\tend if;</div><div class=\"line\">end $</div><div class=\"line\">DELIMITER ;</div></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">update user set rank = 0 , score = 0 where id = 1;</div><div class=\"line\">update user_event set is_del = 1 where user_id = 1 and type = &apos;get_score&apos;;</div><div class=\"line\">insert into user_event (user_id,type,val_num) values (1,&apos;get_score&apos;,501);</div><div class=\"line\">select * from user where id = 1;</div></pre></td></tr></table></figure>\n<p>运行后，用户rank=1 score=501</p>\n"},{"title":"Mysql '/tmp/mysql.sock' 错误类型解决方法","date":"2017-09-14T16:00:00.000Z","_content":"\n> Can't connect to local MySQL server through socket '/tmp/mysql.sock'\n\n一般情况下我装好 mysql 后就不会在动它了，因为一不留神就出各种错误信息，在不记得\n多少次 google 这个错误之后，我决定把它记下来\n\n网上很多解决方法都是说 mysql 服务找不到 **/tmp/mysql.sock** 文件，那我们找到它不就行了，\n```bash\n$ find / -name mysql.sock\n/var/lib/mysql/mysql.sock\n$ ln -s /var/lib/mysql/mysql.sock   /tmp/mysql.sock\n```\n先找到这个文件，然后建立软连接到 */tmp/mysql.sock* ，然而到我试验的时候，完全找\n不到这个文件\n\n在翻阅资料后，发现 */tmp/mysql.sock* 是在 mysql 启动后生成的临时文件，也就是说\n不成功启动 mysql 就不会有这个文件，我的方向完全错误，折腾到筋疲力尽，最后我只得找到各种日志查看\n```bash\n$ mysqld status\n```\n通过查看 mysql 运行状态状态发现这货\n```bash\n[ERROR] unknown variable 'prompt=\\c \\U[\\d] \\D> '\n```\n不管为啥不通过先干掉再说，重启 mysql 继续查看状态，又出现这货\n```bash\n[ERROR] InnoDB: Unable to lock ./ibdata1 error\n```\n说明当前又进行 mysql 进程再启动\n```bash\n$ kill -9 `ps aux | grep mysql | awk '{print $2}'`\n```\n通过这段命令强行 kill 掉所以 mysql 进程\n```bash\n$ mysql.service start\n```\n成功\n\n通过这次解决问题，报错 */tmp/mysql.sock* 不一定是它的问题，关键还是看日志，对的\n错的全在日志里\n","source":"_posts/mysql-2017-09-15-tmp-mysql-sock.md","raw":"---\ntitle: Mysql '/tmp/mysql.sock' 错误类型解决方法\ndate: 2017-09-15\ntags:\n---\n\n> Can't connect to local MySQL server through socket '/tmp/mysql.sock'\n\n一般情况下我装好 mysql 后就不会在动它了，因为一不留神就出各种错误信息，在不记得\n多少次 google 这个错误之后，我决定把它记下来\n\n网上很多解决方法都是说 mysql 服务找不到 **/tmp/mysql.sock** 文件，那我们找到它不就行了，\n```bash\n$ find / -name mysql.sock\n/var/lib/mysql/mysql.sock\n$ ln -s /var/lib/mysql/mysql.sock   /tmp/mysql.sock\n```\n先找到这个文件，然后建立软连接到 */tmp/mysql.sock* ，然而到我试验的时候，完全找\n不到这个文件\n\n在翻阅资料后，发现 */tmp/mysql.sock* 是在 mysql 启动后生成的临时文件，也就是说\n不成功启动 mysql 就不会有这个文件，我的方向完全错误，折腾到筋疲力尽，最后我只得找到各种日志查看\n```bash\n$ mysqld status\n```\n通过查看 mysql 运行状态状态发现这货\n```bash\n[ERROR] unknown variable 'prompt=\\c \\U[\\d] \\D> '\n```\n不管为啥不通过先干掉再说，重启 mysql 继续查看状态，又出现这货\n```bash\n[ERROR] InnoDB: Unable to lock ./ibdata1 error\n```\n说明当前又进行 mysql 进程再启动\n```bash\n$ kill -9 `ps aux | grep mysql | awk '{print $2}'`\n```\n通过这段命令强行 kill 掉所以 mysql 进程\n```bash\n$ mysql.service start\n```\n成功\n\n通过这次解决问题，报错 */tmp/mysql.sock* 不一定是它的问题，关键还是看日志，对的\n错的全在日志里\n","slug":"mysql-2017-09-15-tmp-mysql-sock","published":1,"updated":"2017-09-15T14:09:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9b0010kjxvvve4xtyl","content":"<blockquote>\n<p>Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’</p>\n</blockquote>\n<p>一般情况下我装好 mysql 后就不会在动它了，因为一不留神就出各种错误信息，在不记得<br>多少次 google 这个错误之后，我决定把它记下来</p>\n<p>网上很多解决方法都是说 mysql 服务找不到 <strong>/tmp/mysql.sock</strong> 文件，那我们找到它不就行了，<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ find / -name mysql.sock</div><div class=\"line\">/var/lib/mysql/mysql.sock</div><div class=\"line\">$ ln -s /var/lib/mysql/mysql.sock   /tmp/mysql.sock</div></pre></td></tr></table></figure></p>\n<p>先找到这个文件，然后建立软连接到 <em>/tmp/mysql.sock</em> ，然而到我试验的时候，完全找<br>不到这个文件</p>\n<p>在翻阅资料后，发现 <em>/tmp/mysql.sock</em> 是在 mysql 启动后生成的临时文件，也就是说<br>不成功启动 mysql 就不会有这个文件，我的方向完全错误，折腾到筋疲力尽，最后我只得找到各种日志查看<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysqld status</div></pre></td></tr></table></figure></p>\n<p>通过查看 mysql 运行状态状态发现这货<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[ERROR] unknown variable <span class=\"string\">'prompt=\\c \\U[\\d] \\D&gt; '</span></div></pre></td></tr></table></figure></p>\n<p>不管为啥不通过先干掉再说，重启 mysql 继续查看状态，又出现这货<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[ERROR] InnoDB: Unable to lock ./ibdata1 error</div></pre></td></tr></table></figure></p>\n<p>说明当前又进行 mysql 进程再启动<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">kill</span> -9 `ps aux | grep mysql | awk <span class=\"string\">'&#123;print $2&#125;'</span>`</div></pre></td></tr></table></figure></p>\n<p>通过这段命令强行 kill 掉所以 mysql 进程<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysql.service start</div></pre></td></tr></table></figure></p>\n<p>成功</p>\n<p>通过这次解决问题，报错 <em>/tmp/mysql.sock</em> 不一定是它的问题，关键还是看日志，对的<br>错的全在日志里</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock’</p>\n</blockquote>\n<p>一般情况下我装好 mysql 后就不会在动它了，因为一不留神就出各种错误信息，在不记得<br>多少次 google 这个错误之后，我决定把它记下来</p>\n<p>网上很多解决方法都是说 mysql 服务找不到 <strong>/tmp/mysql.sock</strong> 文件，那我们找到它不就行了，<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ find / -name mysql.sock</div><div class=\"line\">/var/lib/mysql/mysql.sock</div><div class=\"line\">$ ln -s /var/lib/mysql/mysql.sock   /tmp/mysql.sock</div></pre></td></tr></table></figure></p>\n<p>先找到这个文件，然后建立软连接到 <em>/tmp/mysql.sock</em> ，然而到我试验的时候，完全找<br>不到这个文件</p>\n<p>在翻阅资料后，发现 <em>/tmp/mysql.sock</em> 是在 mysql 启动后生成的临时文件，也就是说<br>不成功启动 mysql 就不会有这个文件，我的方向完全错误，折腾到筋疲力尽，最后我只得找到各种日志查看<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysqld status</div></pre></td></tr></table></figure></p>\n<p>通过查看 mysql 运行状态状态发现这货<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[ERROR] unknown variable <span class=\"string\">'prompt=\\c \\U[\\d] \\D&gt; '</span></div></pre></td></tr></table></figure></p>\n<p>不管为啥不通过先干掉再说，重启 mysql 继续查看状态，又出现这货<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[ERROR] InnoDB: Unable to lock ./ibdata1 error</div></pre></td></tr></table></figure></p>\n<p>说明当前又进行 mysql 进程再启动<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">kill</span> -9 `ps aux | grep mysql | awk <span class=\"string\">'&#123;print $2&#125;'</span>`</div></pre></td></tr></table></figure></p>\n<p>通过这段命令强行 kill 掉所以 mysql 进程<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mysql.service start</div></pre></td></tr></table></figure></p>\n<p>成功</p>\n<p>通过这次解决问题，报错 <em>/tmp/mysql.sock</em> 不一定是它的问题，关键还是看日志，对的<br>错的全在日志里</p>\n"},{"title":"npm 使用","date":"2017-09-11T16:00:00.000Z","_content":"\n\n## 安装\n因为 npm 是 **NodeJS** 的包管理工具，所以下载 **NodeJS** 后自动会安装 npm\n\n### Mac\n```bash\n$ brew install node\n```\n\n## 命令\n```bash\nnpm -v                      # 查看版本\nsudo npm install <name> -g  # 全局安装\nnpm install <name>          # 本地安装\nnpm install <name> --save   # 本地安装，并将包信息保存到 package.json 中\nnpm list -g                 # 查看所有全局安装的模块\nnpm list <name>             # 查看某个模块的版本号\nnpm uninstall <name>        # 卸载模块\nnpm ls                      # 卸载后，你可以到 /node_modules/ 目录下查看包是否还存在\nnpm update <name>           # 更新模块\nnpm search <name>           # 搜索模块\nnpm init                    # 创建模块，生成 package.json\nnpm publish                 # 发布模块\n```\n","source":"_posts/nodejs-2017-09-12-npm.md","raw":"---\ntitle: npm 使用\ndate: 2017-09-12\ntags:\n---\n\n\n## 安装\n因为 npm 是 **NodeJS** 的包管理工具，所以下载 **NodeJS** 后自动会安装 npm\n\n### Mac\n```bash\n$ brew install node\n```\n\n## 命令\n```bash\nnpm -v                      # 查看版本\nsudo npm install <name> -g  # 全局安装\nnpm install <name>          # 本地安装\nnpm install <name> --save   # 本地安装，并将包信息保存到 package.json 中\nnpm list -g                 # 查看所有全局安装的模块\nnpm list <name>             # 查看某个模块的版本号\nnpm uninstall <name>        # 卸载模块\nnpm ls                      # 卸载后，你可以到 /node_modules/ 目录下查看包是否还存在\nnpm update <name>           # 更新模块\nnpm search <name>           # 搜索模块\nnpm init                    # 创建模块，生成 package.json\nnpm publish                 # 发布模块\n```\n","slug":"nodejs-2017-09-12-npm","published":1,"updated":"2017-09-15T15:06:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9b0011kjxv2r2u4uji","content":"<h2><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\"></a></h2><p>因为 npm 是 <strong>NodeJS</strong> 的包管理工具，所以下载 <strong>NodeJS</strong> 后自动会安装 npm</p>\n<h3><span id=\"mac\">Mac</span><a href=\"#mac\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install node</div></pre></td></tr></table></figure>\n<h2><span id=\"ming-ling\">命令</span><a href=\"#ming-ling\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm -v                      <span class=\"comment\"># 查看版本</span></div><div class=\"line\">sudo npm install &lt;name&gt; -g  <span class=\"comment\"># 全局安装</span></div><div class=\"line\">npm install &lt;name&gt;          <span class=\"comment\"># 本地安装</span></div><div class=\"line\">npm install &lt;name&gt; --save   <span class=\"comment\"># 本地安装，并将包信息保存到 package.json 中</span></div><div class=\"line\">npm list -g                 <span class=\"comment\"># 查看所有全局安装的模块</span></div><div class=\"line\">npm list &lt;name&gt;             <span class=\"comment\"># 查看某个模块的版本号</span></div><div class=\"line\">npm uninstall &lt;name&gt;        <span class=\"comment\"># 卸载模块</span></div><div class=\"line\">npm ls                      <span class=\"comment\"># 卸载后，你可以到 /node_modules/ 目录下查看包是否还存在</span></div><div class=\"line\">npm update &lt;name&gt;           <span class=\"comment\"># 更新模块</span></div><div class=\"line\">npm search &lt;name&gt;           <span class=\"comment\"># 搜索模块</span></div><div class=\"line\">npm init                    <span class=\"comment\"># 创建模块，生成 package.json</span></div><div class=\"line\">npm publish                 <span class=\"comment\"># 发布模块</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>因为 npm 是 <strong>NodeJS</strong> 的包管理工具，所以下载 <strong>NodeJS</strong> 后自动会安装 npm</p>\n<h3 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install node</div></pre></td></tr></table></figure>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm -v                      <span class=\"comment\"># 查看版本</span></div><div class=\"line\">sudo npm install &lt;name&gt; -g  <span class=\"comment\"># 全局安装</span></div><div class=\"line\">npm install &lt;name&gt;          <span class=\"comment\"># 本地安装</span></div><div class=\"line\">npm install &lt;name&gt; --save   <span class=\"comment\"># 本地安装，并将包信息保存到 package.json 中</span></div><div class=\"line\">npm list -g                 <span class=\"comment\"># 查看所有全局安装的模块</span></div><div class=\"line\">npm list &lt;name&gt;             <span class=\"comment\"># 查看某个模块的版本号</span></div><div class=\"line\">npm uninstall &lt;name&gt;        <span class=\"comment\"># 卸载模块</span></div><div class=\"line\">npm ls                      <span class=\"comment\"># 卸载后，你可以到 /node_modules/ 目录下查看包是否还存在</span></div><div class=\"line\">npm update &lt;name&gt;           <span class=\"comment\"># 更新模块</span></div><div class=\"line\">npm search &lt;name&gt;           <span class=\"comment\"># 搜索模块</span></div><div class=\"line\">npm init                    <span class=\"comment\"># 创建模块，生成 package.json</span></div><div class=\"line\">npm publish                 <span class=\"comment\"># 发布模块</span></div></pre></td></tr></table></figure>\n"},{"title":"openresty 学习笔记","date":"2017-08-15T16:00:00.000Z","_content":"\n\n- [openresty 安装](/openresty/2017/08/16/install)","source":"_posts/openresty-2017-08-16-album-study-notes.md","raw":"---\ntitle: openresty 学习笔记\ndate: 2017-08-16\ntags:\n---\n\n\n- [openresty 安装](/openresty/2017/08/16/install)","slug":"openresty-2017-08-16-album-study-notes","published":1,"updated":"2017-09-15T15:06:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9c0012kjxvx2cphai1","content":"<ul>\n<li><a href=\"/openresty/2017/08/16/install\">openresty 安装</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"/openresty/2017/08/16/install\">openresty 安装</a></li>\n</ul>\n"},{"title":"openresty 安装","date":"2017-08-15T16:00:00.000Z","_content":"\n专辑:[openresty 学习笔记](/openresty/2017/08/16/album-study-notes)\n\n## Mac OS\n推荐使用`brew`安装\n```bash\nbrew install homebrew/nginx/openresty\nbrew update\nbrew install pcre openssl\n```\n\n## CentOS\n你可以在你的 CentOS 系统中添加 openresty 仓库，这样就可以便于未来安装或更新我们的软件包（通过 yum update 命令）。运行下面的命令就可以添加我们的仓库：\n\n    sudo yum install yum-utils\n    sudo yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo\n然后就可以像下面这样安装软件包，比如 openresty：\n\n    sudo yum install openresty\n如果你想安装命令行工具 resty，那么可以像下面这样安装 openresty-resty 包：\n\n    sudo yum install openresty-resty\n命令行工具 opm 在 openresty-opm 包里，而 restydoc 工具在 openresty-doc 包里头。\n\n列出所有 openresty 仓库里头的软件包：\n\n    sudo yum --disablerepo=\"*\" --enablerepo=\"openresty\" list available","source":"_posts/openresty-2017-08-16-install.md","raw":"---\ntitle: openresty 安装\ndate: 2017-08-16\ntags:\n---\n\n专辑:[openresty 学习笔记](/openresty/2017/08/16/album-study-notes)\n\n## Mac OS\n推荐使用`brew`安装\n```bash\nbrew install homebrew/nginx/openresty\nbrew update\nbrew install pcre openssl\n```\n\n## CentOS\n你可以在你的 CentOS 系统中添加 openresty 仓库，这样就可以便于未来安装或更新我们的软件包（通过 yum update 命令）。运行下面的命令就可以添加我们的仓库：\n\n    sudo yum install yum-utils\n    sudo yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo\n然后就可以像下面这样安装软件包，比如 openresty：\n\n    sudo yum install openresty\n如果你想安装命令行工具 resty，那么可以像下面这样安装 openresty-resty 包：\n\n    sudo yum install openresty-resty\n命令行工具 opm 在 openresty-opm 包里，而 restydoc 工具在 openresty-doc 包里头。\n\n列出所有 openresty 仓库里头的软件包：\n\n    sudo yum --disablerepo=\"*\" --enablerepo=\"openresty\" list available","slug":"openresty-2017-08-16-install","published":1,"updated":"2017-09-15T15:07:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9d0013kjxv8iho96qr","content":"<p>专辑:<a href=\"/openresty/2017/08/16/album-study-notes\">openresty 学习笔记</a></p>\n<h2><span id=\"mac-os\">Mac OS</span><a href=\"#mac-os\" class=\"header-anchor\"></a></h2><p>推荐使用<code>brew</code>安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install homebrew/nginx/openresty</div><div class=\"line\">brew update</div><div class=\"line\">brew install pcre openssl</div></pre></td></tr></table></figure></p>\n<h2><span id=\"centos\">CentOS</span><a href=\"#centos\" class=\"header-anchor\"></a></h2><p>你可以在你的 CentOS 系统中添加 openresty 仓库，这样就可以便于未来安装或更新我们的软件包（通过 yum update 命令）。运行下面的命令就可以添加我们的仓库：</p>\n<pre><code>sudo yum install yum-utils\nsudo yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo\n</code></pre><p>然后就可以像下面这样安装软件包，比如 openresty：</p>\n<pre><code>sudo yum install openresty\n</code></pre><p>如果你想安装命令行工具 resty，那么可以像下面这样安装 openresty-resty 包：</p>\n<pre><code>sudo yum install openresty-resty\n</code></pre><p>命令行工具 opm 在 openresty-opm 包里，而 restydoc 工具在 openresty-doc 包里头。</p>\n<p>列出所有 openresty 仓库里头的软件包：</p>\n<pre><code>sudo yum --disablerepo=&quot;*&quot; --enablerepo=&quot;openresty&quot; list available\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>专辑:<a href=\"/openresty/2017/08/16/album-study-notes\">openresty 学习笔记</a></p>\n<h2 id=\"Mac-OS\"><a href=\"#Mac-OS\" class=\"headerlink\" title=\"Mac OS\"></a>Mac OS</h2><p>推荐使用<code>brew</code>安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install homebrew/nginx/openresty</div><div class=\"line\">brew update</div><div class=\"line\">brew install pcre openssl</div></pre></td></tr></table></figure></p>\n<h2 id=\"CentOS\"><a href=\"#CentOS\" class=\"headerlink\" title=\"CentOS\"></a>CentOS</h2><p>你可以在你的 CentOS 系统中添加 openresty 仓库，这样就可以便于未来安装或更新我们的软件包（通过 yum update 命令）。运行下面的命令就可以添加我们的仓库：</p>\n<pre><code>sudo yum install yum-utils\nsudo yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo\n</code></pre><p>然后就可以像下面这样安装软件包，比如 openresty：</p>\n<pre><code>sudo yum install openresty\n</code></pre><p>如果你想安装命令行工具 resty，那么可以像下面这样安装 openresty-resty 包：</p>\n<pre><code>sudo yum install openresty-resty\n</code></pre><p>命令行工具 opm 在 openresty-opm 包里，而 restydoc 工具在 openresty-doc 包里头。</p>\n<p>列出所有 openresty 仓库里头的软件包：</p>\n<pre><code>sudo yum --disablerepo=&quot;*&quot; --enablerepo=&quot;openresty&quot; list available\n</code></pre>"},{"title":"pyenv virtualenv 常用命令","date":"2017-08-09T16:00:00.000Z","_content":"\n## pyenv \n### 查看可安装版本\n```bash\npyenv install -list\n```\n### 安装某个版本\n```bash\npyenv install -v 3.5.0\n```\n### 查看本地版本列表\n```bash\n$ pyenv versions\n\n* system (set by /home/wxnacy/.pyenv/version) # 系统python环境 *号代表当前环境版本\n  3.5.0 # 刚下载的3.5.0版本\n```\n### 查看当前环境版本\n```bash\n$ pyenv version\nsystem (set by /home/wxnacy/.pyenv/version)\n```\n\n### 设置全局为某一个环境\n```bash\n$ pyenv global 3.5.0\n$ pyenv version # 查看当前环境\n3.5.0 (set by /home/wxnacy/project/project_350/.python-version)\n```\n\n\n### 为项目设置单独环境\n```bash\n$ cd project\n$ pyenv local 3.5.0 # 使用local命令为某个目录单独设置目录\n$ pyenv version\n3.5.0 (set by /home/wxnacy/project/project_350/.python-version)\n\n$ cd ..\n$ pyenv version # 退出目录查看环境没有改变\nsystem (set by /home/wxnacy/.pyenv/version)\n```\n\n\n\n## virtualenv\n假如我们有多个项目都是用3.5.0的环境，但是又不想让他们公用一个环境该怎么办？\n使用virtualenv可以为某一个python版本创建一个干净的虚拟机环境\n### 创建虚拟机\n```bash\n$ pyenv virtualenv 3.5.0 env_350\n$ pyenv versions \n* system (set by /home/wxnacy/.pyenv/version)\n  3.5.0\n  3.5.0/envs/env_350\n  env_350\n```\n查看环境后我们发现多了两个环境`3.5.0/envs/env_350`和`env_350`，这两个是同一个\n### 指定当前进程环境\n```bash\npyenv activate env_350\n```\n该命令只能指定当前进程的环境，退出shell后重新进入，发现环境又变回之前的环境\n### 当前进行退出activate\n\n```bash\n$ pynev deactivate\n```\n当然virtualenv生成的虚拟环境也可以配合`global`和`local`等pyenv命令配合使用\n\n","source":"_posts/python-2017-08-10-pyenv-cmd.md","raw":"---\ntitle: pyenv virtualenv 常用命令\ndate: 2017-08-10\ntags:\n---\n\n## pyenv \n### 查看可安装版本\n```bash\npyenv install -list\n```\n### 安装某个版本\n```bash\npyenv install -v 3.5.0\n```\n### 查看本地版本列表\n```bash\n$ pyenv versions\n\n* system (set by /home/wxnacy/.pyenv/version) # 系统python环境 *号代表当前环境版本\n  3.5.0 # 刚下载的3.5.0版本\n```\n### 查看当前环境版本\n```bash\n$ pyenv version\nsystem (set by /home/wxnacy/.pyenv/version)\n```\n\n### 设置全局为某一个环境\n```bash\n$ pyenv global 3.5.0\n$ pyenv version # 查看当前环境\n3.5.0 (set by /home/wxnacy/project/project_350/.python-version)\n```\n\n\n### 为项目设置单独环境\n```bash\n$ cd project\n$ pyenv local 3.5.0 # 使用local命令为某个目录单独设置目录\n$ pyenv version\n3.5.0 (set by /home/wxnacy/project/project_350/.python-version)\n\n$ cd ..\n$ pyenv version # 退出目录查看环境没有改变\nsystem (set by /home/wxnacy/.pyenv/version)\n```\n\n\n\n## virtualenv\n假如我们有多个项目都是用3.5.0的环境，但是又不想让他们公用一个环境该怎么办？\n使用virtualenv可以为某一个python版本创建一个干净的虚拟机环境\n### 创建虚拟机\n```bash\n$ pyenv virtualenv 3.5.0 env_350\n$ pyenv versions \n* system (set by /home/wxnacy/.pyenv/version)\n  3.5.0\n  3.5.0/envs/env_350\n  env_350\n```\n查看环境后我们发现多了两个环境`3.5.0/envs/env_350`和`env_350`，这两个是同一个\n### 指定当前进程环境\n```bash\npyenv activate env_350\n```\n该命令只能指定当前进程的环境，退出shell后重新进入，发现环境又变回之前的环境\n### 当前进行退出activate\n\n```bash\n$ pynev deactivate\n```\n当然virtualenv生成的虚拟环境也可以配合`global`和`local`等pyenv命令配合使用\n\n","slug":"python-2017-08-10-pyenv-cmd","published":1,"updated":"2017-09-15T15:07:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9d0014kjxvkohcowpw","content":"<h2><span id=\"pyenv\">pyenv</span><a href=\"#pyenv\" class=\"header-anchor\"></a></h2><h3><span id=\"cha-kan-ke-an-zhuang-ban-ben\">查看可安装版本</span><a href=\"#cha-kan-ke-an-zhuang-ban-ben\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pyenv install -list</div></pre></td></tr></table></figure>\n<h3><span id=\"an-zhuang-mou-ge-ban-ben\">安装某个版本</span><a href=\"#an-zhuang-mou-ge-ban-ben\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pyenv install -v 3.5.0</div></pre></td></tr></table></figure>\n<h3><span id=\"cha-kan-ben-di-ban-ben-lie-biao\">查看本地版本列表</span><a href=\"#cha-kan-ben-di-ban-ben-lie-biao\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv versions</div><div class=\"line\"></div><div class=\"line\">* system (<span class=\"built_in\">set</span> by /home/wxnacy/.pyenv/version) <span class=\"comment\"># 系统python环境 *号代表当前环境版本</span></div><div class=\"line\">  3.5.0 <span class=\"comment\"># 刚下载的3.5.0版本</span></div></pre></td></tr></table></figure>\n<h3><span id=\"cha-kan-dang-qian-huan-jing-ban-ben\">查看当前环境版本</span><a href=\"#cha-kan-dang-qian-huan-jing-ban-ben\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv version</div><div class=\"line\">system (<span class=\"built_in\">set</span> by /home/wxnacy/.pyenv/version)</div></pre></td></tr></table></figure>\n<h3><span id=\"she-zhi-quan-ju-wei-mou-yi-ge-huan-jing\">设置全局为某一个环境</span><a href=\"#she-zhi-quan-ju-wei-mou-yi-ge-huan-jing\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv global 3.5.0</div><div class=\"line\">$ pyenv version <span class=\"comment\"># 查看当前环境</span></div><div class=\"line\">3.5.0 (<span class=\"built_in\">set</span> by /home/wxnacy/project/project_350/.python-version)</div></pre></td></tr></table></figure>\n<h3><span id=\"wei-xiang-mu-she-zhi-dan-du-huan-jing\">为项目设置单独环境</span><a href=\"#wei-xiang-mu-she-zhi-dan-du-huan-jing\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> project</div><div class=\"line\">$ pyenv <span class=\"built_in\">local</span> 3.5.0 <span class=\"comment\"># 使用local命令为某个目录单独设置目录</span></div><div class=\"line\">$ pyenv version</div><div class=\"line\">3.5.0 (<span class=\"built_in\">set</span> by /home/wxnacy/project/project_350/.python-version)</div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">cd</span> ..</div><div class=\"line\">$ pyenv version <span class=\"comment\"># 退出目录查看环境没有改变</span></div><div class=\"line\">system (<span class=\"built_in\">set</span> by /home/wxnacy/.pyenv/version)</div></pre></td></tr></table></figure>\n<h2><span id=\"virtualenv\">virtualenv</span><a href=\"#virtualenv\" class=\"header-anchor\"></a></h2><p>假如我们有多个项目都是用3.5.0的环境，但是又不想让他们公用一个环境该怎么办？<br>使用virtualenv可以为某一个python版本创建一个干净的虚拟机环境</p>\n<h3><span id=\"chuang-jian-xu-ni-ji\">创建虚拟机</span><a href=\"#chuang-jian-xu-ni-ji\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv virtualenv 3.5.0 env_350</div><div class=\"line\">$ pyenv versions </div><div class=\"line\">* system (<span class=\"built_in\">set</span> by /home/wxnacy/.pyenv/version)</div><div class=\"line\">  3.5.0</div><div class=\"line\">  3.5.0/envs/env_350</div><div class=\"line\">  env_350</div></pre></td></tr></table></figure>\n<p>查看环境后我们发现多了两个环境<code>3.5.0/envs/env_350</code>和<code>env_350</code>，这两个是同一个</p>\n<h3><span id=\"zhi-ding-dang-qian-jin-cheng-huan-jing\">指定当前进程环境</span><a href=\"#zhi-ding-dang-qian-jin-cheng-huan-jing\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pyenv activate env_350</div></pre></td></tr></table></figure>\n<p>该命令只能指定当前进程的环境，退出shell后重新进入，发现环境又变回之前的环境</p>\n<h3><span id=\"dang-qian-jin-xing-tui-chu-activate\">当前进行退出activate</span><a href=\"#dang-qian-jin-xing-tui-chu-activate\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pynev deactivate</div></pre></td></tr></table></figure>\n<p>当然virtualenv生成的虚拟环境也可以配合<code>global</code>和<code>local</code>等pyenv命令配合使用</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"pyenv\"><a href=\"#pyenv\" class=\"headerlink\" title=\"pyenv\"></a>pyenv</h2><h3 id=\"查看可安装版本\"><a href=\"#查看可安装版本\" class=\"headerlink\" title=\"查看可安装版本\"></a>查看可安装版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pyenv install -list</div></pre></td></tr></table></figure>\n<h3 id=\"安装某个版本\"><a href=\"#安装某个版本\" class=\"headerlink\" title=\"安装某个版本\"></a>安装某个版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pyenv install -v 3.5.0</div></pre></td></tr></table></figure>\n<h3 id=\"查看本地版本列表\"><a href=\"#查看本地版本列表\" class=\"headerlink\" title=\"查看本地版本列表\"></a>查看本地版本列表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv versions</div><div class=\"line\"></div><div class=\"line\">* system (<span class=\"built_in\">set</span> by /home/wxnacy/.pyenv/version) <span class=\"comment\"># 系统python环境 *号代表当前环境版本</span></div><div class=\"line\">  3.5.0 <span class=\"comment\"># 刚下载的3.5.0版本</span></div></pre></td></tr></table></figure>\n<h3 id=\"查看当前环境版本\"><a href=\"#查看当前环境版本\" class=\"headerlink\" title=\"查看当前环境版本\"></a>查看当前环境版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv version</div><div class=\"line\">system (<span class=\"built_in\">set</span> by /home/wxnacy/.pyenv/version)</div></pre></td></tr></table></figure>\n<h3 id=\"设置全局为某一个环境\"><a href=\"#设置全局为某一个环境\" class=\"headerlink\" title=\"设置全局为某一个环境\"></a>设置全局为某一个环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv global 3.5.0</div><div class=\"line\">$ pyenv version <span class=\"comment\"># 查看当前环境</span></div><div class=\"line\">3.5.0 (<span class=\"built_in\">set</span> by /home/wxnacy/project/project_350/.python-version)</div></pre></td></tr></table></figure>\n<h3 id=\"为项目设置单独环境\"><a href=\"#为项目设置单独环境\" class=\"headerlink\" title=\"为项目设置单独环境\"></a>为项目设置单独环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> project</div><div class=\"line\">$ pyenv <span class=\"built_in\">local</span> 3.5.0 <span class=\"comment\"># 使用local命令为某个目录单独设置目录</span></div><div class=\"line\">$ pyenv version</div><div class=\"line\">3.5.0 (<span class=\"built_in\">set</span> by /home/wxnacy/project/project_350/.python-version)</div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">cd</span> ..</div><div class=\"line\">$ pyenv version <span class=\"comment\"># 退出目录查看环境没有改变</span></div><div class=\"line\">system (<span class=\"built_in\">set</span> by /home/wxnacy/.pyenv/version)</div></pre></td></tr></table></figure>\n<h2 id=\"virtualenv\"><a href=\"#virtualenv\" class=\"headerlink\" title=\"virtualenv\"></a>virtualenv</h2><p>假如我们有多个项目都是用3.5.0的环境，但是又不想让他们公用一个环境该怎么办？<br>使用virtualenv可以为某一个python版本创建一个干净的虚拟机环境</p>\n<h3 id=\"创建虚拟机\"><a href=\"#创建虚拟机\" class=\"headerlink\" title=\"创建虚拟机\"></a>创建虚拟机</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv virtualenv 3.5.0 env_350</div><div class=\"line\">$ pyenv versions </div><div class=\"line\">* system (<span class=\"built_in\">set</span> by /home/wxnacy/.pyenv/version)</div><div class=\"line\">  3.5.0</div><div class=\"line\">  3.5.0/envs/env_350</div><div class=\"line\">  env_350</div></pre></td></tr></table></figure>\n<p>查看环境后我们发现多了两个环境<code>3.5.0/envs/env_350</code>和<code>env_350</code>，这两个是同一个</p>\n<h3 id=\"指定当前进程环境\"><a href=\"#指定当前进程环境\" class=\"headerlink\" title=\"指定当前进程环境\"></a>指定当前进程环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pyenv activate env_350</div></pre></td></tr></table></figure>\n<p>该命令只能指定当前进程的环境，退出shell后重新进入，发现环境又变回之前的环境</p>\n<h3 id=\"当前进行退出activate\"><a href=\"#当前进行退出activate\" class=\"headerlink\" title=\"当前进行退出activate\"></a>当前进行退出activate</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pynev deactivate</div></pre></td></tr></table></figure>\n<p>当然virtualenv生成的虚拟环境也可以配合<code>global</code>和<code>local</code>等pyenv命令配合使用</p>\n"},{"title":"linux 环境下安装pyenv和virtualenv虚拟机","date":"2017-08-09T16:00:00.000Z","_content":"\n废话不多直接上命令\n## 下载\nCentOS:\n```bash\ncurl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash\n```\nUbuntu\n```bash\napt-get -y install git gcc make patch zlib1g.dev libgdbm-dev libssl-dev libsqlite3-dev libbz2-dev libreadline-dev\n```\n\n## 配置环境变量\nvim ~/.bash_profile\n```bash\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\nexport PYENV_VIRTUALENV_DISABLE_PROMPT=1\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n```\n## 安装依赖\n```bash\nsudo yum install readline readline-devel readline-static\nsudo yum install openssl openssl-devel openssl-static\nsudo yum install sqlite-devel\nsudo yum install bzip2-devel bzip2-libs\n```\n\n## 升级\n```bash\n$ pyenv update\n```\n## 卸载\n```bash\nrm -rf ~/.pyenv\n然后把~/.bash_profile环境变量配置中的添加的删掉\n```\n\n","source":"_posts/python-2017-08-10-pyenv-linux.md","raw":"---\ntitle: linux 环境下安装pyenv和virtualenv虚拟机\ndate: 2017-08-10\ntags:\n---\n\n废话不多直接上命令\n## 下载\nCentOS:\n```bash\ncurl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash\n```\nUbuntu\n```bash\napt-get -y install git gcc make patch zlib1g.dev libgdbm-dev libssl-dev libsqlite3-dev libbz2-dev libreadline-dev\n```\n\n## 配置环境变量\nvim ~/.bash_profile\n```bash\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\nexport PYENV_VIRTUALENV_DISABLE_PROMPT=1\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n```\n## 安装依赖\n```bash\nsudo yum install readline readline-devel readline-static\nsudo yum install openssl openssl-devel openssl-static\nsudo yum install sqlite-devel\nsudo yum install bzip2-devel bzip2-libs\n```\n\n## 升级\n```bash\n$ pyenv update\n```\n## 卸载\n```bash\nrm -rf ~/.pyenv\n然后把~/.bash_profile环境变量配置中的添加的删掉\n```\n\n","slug":"python-2017-08-10-pyenv-linux","published":1,"updated":"2017-09-15T15:08:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9e0015kjxvaab19hup","content":"<p>废话不多直接上命令</p>\n<h2><span id=\"xia-zai\">下载</span><a href=\"#xia-zai\" class=\"header-anchor\"></a></h2><p>CentOS:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</div></pre></td></tr></table></figure></p>\n<p>Ubuntu<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get -y install git gcc make patch zlib1g.dev libgdbm-dev libssl-dev libsqlite3-dev libbz2-dev libreadline-dev</div></pre></td></tr></table></figure></p>\n<h2><span id=\"pei-zhi-huan-jing-bian-liang\">配置环境变量</span><a href=\"#pei-zhi-huan-jing-bian-liang\" class=\"header-anchor\"></a></h2><p>vim ~/.bash_profile<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> PYENV_ROOT=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.pyenv\"</span></div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"string\">\"<span class=\"variable\">$PYENV_ROOT</span>/bin:<span class=\"variable\">$PATH</span>\"</span></div><div class=\"line\"><span class=\"built_in\">export</span> PYENV_VIRTUALENV_DISABLE_PROMPT=1</div><div class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(pyenv init -)</span>\"</span></div><div class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(pyenv virtualenv-init -)</span>\"</span></div></pre></td></tr></table></figure></p>\n<h2><span id=\"an-zhuang-yi-lai\">安装依赖</span><a href=\"#an-zhuang-yi-lai\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install readline readline-devel readline-static</div><div class=\"line\">sudo yum install openssl openssl-devel openssl-static</div><div class=\"line\">sudo yum install sqlite-devel</div><div class=\"line\">sudo yum install bzip2-devel bzip2-libs</div></pre></td></tr></table></figure>\n<h2><span id=\"sheng-ji\">升级</span><a href=\"#sheng-ji\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv update</div></pre></td></tr></table></figure>\n<h2><span id=\"xie-zai\">卸载</span><a href=\"#xie-zai\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm -rf ~/.pyenv</div><div class=\"line\">然后把~/.bash_profile环境变量配置中的添加的删掉</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>废话不多直接上命令</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>CentOS:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</div></pre></td></tr></table></figure></p>\n<p>Ubuntu<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get -y install git gcc make patch zlib1g.dev libgdbm-dev libssl-dev libsqlite3-dev libbz2-dev libreadline-dev</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>vim ~/.bash_profile<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> PYENV_ROOT=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.pyenv\"</span></div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"string\">\"<span class=\"variable\">$PYENV_ROOT</span>/bin:<span class=\"variable\">$PATH</span>\"</span></div><div class=\"line\"><span class=\"built_in\">export</span> PYENV_VIRTUALENV_DISABLE_PROMPT=1</div><div class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(pyenv init -)</span>\"</span></div><div class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(pyenv virtualenv-init -)</span>\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install readline readline-devel readline-static</div><div class=\"line\">sudo yum install openssl openssl-devel openssl-static</div><div class=\"line\">sudo yum install sqlite-devel</div><div class=\"line\">sudo yum install bzip2-devel bzip2-libs</div></pre></td></tr></table></figure>\n<h2 id=\"升级\"><a href=\"#升级\" class=\"headerlink\" title=\"升级\"></a>升级</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pyenv update</div></pre></td></tr></table></figure>\n<h2 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm -rf ~/.pyenv</div><div class=\"line\">然后把~/.bash_profile环境变量配置中的添加的删掉</div></pre></td></tr></table></figure>\n"},{"title":"python 目录文件相关命令","date":"2017-08-10T16:00:00.000Z","_content":"\n## 使用os模块进行相关操作\n导入\n```python\nimport os\n```\n列出目录下所有文件\n```python\nos.listdir(path)\n```\n获取项目目录\n```python\nos.getcwd()\n```\n判断文件或目录是否存在\n```python\nos.path.exists(file_path)\n```\n判断路径是文件或目录\n```python\nos.path.isfile(path)\nos.path.isdir(path)\n```\n\n","source":"_posts/python-2017-08-11-os_file.md","raw":"---\ntitle: python 目录文件相关命令\ndate: 2017-08-11\ntags:\n---\n\n## 使用os模块进行相关操作\n导入\n```python\nimport os\n```\n列出目录下所有文件\n```python\nos.listdir(path)\n```\n获取项目目录\n```python\nos.getcwd()\n```\n判断文件或目录是否存在\n```python\nos.path.exists(file_path)\n```\n判断路径是文件或目录\n```python\nos.path.isfile(path)\nos.path.isdir(path)\n```\n\n","slug":"python-2017-08-11-os-file","published":1,"updated":"2017-09-15T15:09:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9e0016kjxvz679j4m3","content":"<h2><span id=\"shi-yong-os-mo-kuai-jin-xing-xiang-guan-cao-zuo\">使用os模块进行相关操作</span><a href=\"#shi-yong-os-mo-kuai-jin-xing-xiang-guan-cao-zuo\" class=\"header-anchor\"></a></h2><p>导入<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div></pre></td></tr></table></figure></p>\n<p>列出目录下所有文件<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">os.listdir(path)</div></pre></td></tr></table></figure></p>\n<p>获取项目目录<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">os.getcwd()</div></pre></td></tr></table></figure></p>\n<p>判断文件或目录是否存在<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">os.path.exists(file_path)</div></pre></td></tr></table></figure></p>\n<p>判断路径是文件或目录<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">os.path.isfile(path)</div><div class=\"line\">os.path.isdir(path)</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用os模块进行相关操作\"><a href=\"#使用os模块进行相关操作\" class=\"headerlink\" title=\"使用os模块进行相关操作\"></a>使用os模块进行相关操作</h2><p>导入<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div></pre></td></tr></table></figure></p>\n<p>列出目录下所有文件<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">os.listdir(path)</div></pre></td></tr></table></figure></p>\n<p>获取项目目录<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">os.getcwd()</div></pre></td></tr></table></figure></p>\n<p>判断文件或目录是否存在<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">os.path.exists(file_path)</div></pre></td></tr></table></figure></p>\n<p>判断路径是文件或目录<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">os.path.isfile(path)</div><div class=\"line\">os.path.isdir(path)</div></pre></td></tr></table></figure></p>\n"},{"title":"sqlalchemy 各种查询语句写法","date":"2017-08-13T16:00:00.000Z","_content":"\n\n## and\nfilter 与 filter_by 语法稍有不同\n```python\nUser.query.filter_by(id=1,name='win').first()\nUser.query.filter(User.id==1,User.name == 'win').first()\n```\n## in\n```python\nsql = User.query.filter(User.id.in_([1,2]))\nprint(sql)\n\n> select * from user where id in (1,2)\n```\n\n## or\n```python\nfrom sqlalchemy import or_\nsql = User.query.filter(or_(User.name == 'winn',User.mobile == '183'),User.email == '371')\nprint(sql)\n\n> select * from user where (name = 'winn' or mobile = '183') and email= '371'\n```\n\n## 排序\n\n```python\nfrom sqlalchemy import desc\nUser.query.order_by(create_ts).all() # 根据创建时间正序\nUser.query.order_by(desc(create_ts)).all() # 根据创建时间倒序\n```\n\n## 大于小于\n```python\nUser.query.filter(User.age >= 12,User.age < 23).all()\n```\n\n## like\n```python\nUser.query.filter(User.name.like('%win%')).all()\n```\n\n\n","source":"_posts/python-2017-08-14-sqlalchemy-filter.md","raw":"---\ntitle: sqlalchemy 各种查询语句写法\ndate: 2017-08-14\ntags:\n---\n\n\n## and\nfilter 与 filter_by 语法稍有不同\n```python\nUser.query.filter_by(id=1,name='win').first()\nUser.query.filter(User.id==1,User.name == 'win').first()\n```\n## in\n```python\nsql = User.query.filter(User.id.in_([1,2]))\nprint(sql)\n\n> select * from user where id in (1,2)\n```\n\n## or\n```python\nfrom sqlalchemy import or_\nsql = User.query.filter(or_(User.name == 'winn',User.mobile == '183'),User.email == '371')\nprint(sql)\n\n> select * from user where (name = 'winn' or mobile = '183') and email= '371'\n```\n\n## 排序\n\n```python\nfrom sqlalchemy import desc\nUser.query.order_by(create_ts).all() # 根据创建时间正序\nUser.query.order_by(desc(create_ts)).all() # 根据创建时间倒序\n```\n\n## 大于小于\n```python\nUser.query.filter(User.age >= 12,User.age < 23).all()\n```\n\n## like\n```python\nUser.query.filter(User.name.like('%win%')).all()\n```\n\n\n","slug":"python-2017-08-14-sqlalchemy-filter","published":1,"updated":"2017-09-15T15:09:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9f0017kjxvxqf2jmjl","content":"<h2><span id=\"and\">and</span><a href=\"#and\" class=\"header-anchor\"></a></h2><p>filter 与 filter_by 语法稍有不同<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.query.filter_by(id=<span class=\"number\">1</span>,name=<span class=\"string\">'win'</span>).first()</div><div class=\"line\">User.query.filter(User.id==<span class=\"number\">1</span>,User.name == <span class=\"string\">'win'</span>).first()</div></pre></td></tr></table></figure></p>\n<h2><span id=\"in\">in</span><a href=\"#in\" class=\"header-anchor\"></a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sql = User.query.filter(User.id.in_([<span class=\"number\">1</span>,<span class=\"number\">2</span>]))</div><div class=\"line\">print(sql)</div><div class=\"line\"></div><div class=\"line\">&gt; select * <span class=\"keyword\">from</span> user where id <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<h2><span id=\"or\">or</span><a href=\"#or\" class=\"header-anchor\"></a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> or_</div><div class=\"line\">sql = User.query.filter(or_(User.name == <span class=\"string\">'winn'</span>,User.mobile == <span class=\"string\">'183'</span>),User.email == <span class=\"string\">'371'</span>)</div><div class=\"line\">print(sql)</div><div class=\"line\"></div><div class=\"line\">&gt; select * <span class=\"keyword\">from</span> user where (name = <span class=\"string\">'winn'</span> <span class=\"keyword\">or</span> mobile = <span class=\"string\">'183'</span>) <span class=\"keyword\">and</span> email= <span class=\"string\">'371'</span></div></pre></td></tr></table></figure>\n<h2><span id=\"pai-xu\">排序</span><a href=\"#pai-xu\" class=\"header-anchor\"></a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> desc</div><div class=\"line\">User.query.order_by(create_ts).all() <span class=\"comment\"># 根据创建时间正序</span></div><div class=\"line\">User.query.order_by(desc(create_ts)).all() <span class=\"comment\"># 根据创建时间倒序</span></div></pre></td></tr></table></figure>\n<h2><span id=\"da-yu-xiao-yu\">大于小于</span><a href=\"#da-yu-xiao-yu\" class=\"header-anchor\"></a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.query.filter(User.age &gt;= <span class=\"number\">12</span>,User.age &lt; <span class=\"number\">23</span>).all()</div></pre></td></tr></table></figure>\n<h2><span id=\"like\">like</span><a href=\"#like\" class=\"header-anchor\"></a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.query.filter(User.name.like(<span class=\"string\">'%win%'</span>)).all()</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"and\"><a href=\"#and\" class=\"headerlink\" title=\"and\"></a>and</h2><p>filter 与 filter_by 语法稍有不同<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.query.filter_by(id=<span class=\"number\">1</span>,name=<span class=\"string\">'win'</span>).first()</div><div class=\"line\">User.query.filter(User.id==<span class=\"number\">1</span>,User.name == <span class=\"string\">'win'</span>).first()</div></pre></td></tr></table></figure></p>\n<h2 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sql = User.query.filter(User.id.in_([<span class=\"number\">1</span>,<span class=\"number\">2</span>]))</div><div class=\"line\">print(sql)</div><div class=\"line\"></div><div class=\"line\">&gt; select * <span class=\"keyword\">from</span> user where id <span class=\"keyword\">in</span> (<span class=\"number\">1</span>,<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"or\"><a href=\"#or\" class=\"headerlink\" title=\"or\"></a>or</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> or_</div><div class=\"line\">sql = User.query.filter(or_(User.name == <span class=\"string\">'winn'</span>,User.mobile == <span class=\"string\">'183'</span>),User.email == <span class=\"string\">'371'</span>)</div><div class=\"line\">print(sql)</div><div class=\"line\"></div><div class=\"line\">&gt; select * <span class=\"keyword\">from</span> user where (name = <span class=\"string\">'winn'</span> <span class=\"keyword\">or</span> mobile = <span class=\"string\">'183'</span>) <span class=\"keyword\">and</span> email= <span class=\"string\">'371'</span></div></pre></td></tr></table></figure>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> desc</div><div class=\"line\">User.query.order_by(create_ts).all() <span class=\"comment\"># 根据创建时间正序</span></div><div class=\"line\">User.query.order_by(desc(create_ts)).all() <span class=\"comment\"># 根据创建时间倒序</span></div></pre></td></tr></table></figure>\n<h2 id=\"大于小于\"><a href=\"#大于小于\" class=\"headerlink\" title=\"大于小于\"></a>大于小于</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.query.filter(User.age &gt;= <span class=\"number\">12</span>,User.age &lt; <span class=\"number\">23</span>).all()</div></pre></td></tr></table></figure>\n<h2 id=\"like\"><a href=\"#like\" class=\"headerlink\" title=\"like\"></a>like</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.query.filter(User.name.like(<span class=\"string\">'%win%'</span>)).all()</div></pre></td></tr></table></figure>\n"},{"title":"python 配置PYTHONPATH(了解python导入模块搜索路径运作原理)","date":"2017-08-14T16:00:00.000Z","_content":"\n专辑: [python 如何构建完整项目](/python/2017/08/15/album-build-project)\n\n> python项目导入模块是必不可少的，大多数情况下，可以以来模块导入搜索路径的自动特性，完全不需要配置路径。不过，如果你想在用户间定义目录边界来导入文件，就需要知道搜索路径是如何运作的。\n\n```bash\n$ python tests/test_utils.py   \n                                                                   \nTraceback (most recent call last):\n  File \"tests/test_utils.py\", line 7, in <module>\n    from run_api import app\nImportError: No module named 'run_api'\n\n```\n在我刚学习python时，做模块导入最长碰到的就是这个错误，我明明定义了```run_api```模块，但是却总是报找不到的错误，No module No module No你妹啊，如果你也碰到这样的问题，你应该好好看看这篇文章\n\n## 不太好的解决办法\n```python\nimport sys\nimport os\nsys.path.append( os.path.join( os.path.dirname(__file__), os.path.pardir ) )\n```\n在google模块导入问题的时候，大部分博客给出了这样的解决方案，在每个文件配置这样的代码，他做到了将当前文件的路径加入到python模块搜索路径sys.path中，确实可以起到解决bug的作用，但是每个文件都写上这样一段代码，实在让人不舒服，下面我们还是来学习下python模块搜索路径是如何运作的\n\n## python从哪些路径导入模块\n```\n1、程序的主目录\n2、PYTHONPATH目录（如果已经进行了设置）\n3、标准链接库目录\n4、任何.pth文件的内容（如果存在的话）\n```\n\n### 主目录\nPython首先会在主目录内搜索导入的文件。如果程序完全位于单一目录，所有导入的会自动工作，而并不需要配置路径。由于这个目录总是先搜索，其文件也将覆盖路径上的其他目录中具有同样名称的模块。如果你需要在自己程序中使用库模块的话，小心不要以这种方式以外地隐藏库模块。\n\n### PYTHONPATH目录\n之后，Python会从左到右搜索PYTHONPATH环境变量设置中罗列出的所有目录，可以是用户定义或平台特定的目录名。因为Python优先搜索主目录，当导入的文件跨目录时，这个设置才显得格外重要。\n\n### 标准库目录\n接着，Python会自动搜索标准库模块安装在机器上的那些目录，这块通常不需要在单独配置\n\n### .pth文件目录\n最后，Python有个相当新的功能，允许用户把有效的目录添加到模块搜索路径中去，也就是在后缀名为.pth（路径的意思）的文本文件中一行一行的列出目录。他是PYTHONPATH的一种替代方案，我们也可以把它放在标注库所在位置的sitepackages的子目录中扩展模块搜索路径\n\n## 应用到当前项目\n在开发大型项目之前，我们可以将项目根目录作为PYTHONPATH存到环境变量中，也可以每次运行前之前该命令\n```bash\n$ touch env.sh\n$ vim env.sh\n\nexport PYTHONPATH=./ # 将项目根目录作为PYTHONPATH\n\n$ source env.sh # 在项目运行之前执行该命令\n```\n最后我们可以通过下面两行代码来查看当前项目python模块搜索路径和导入的模块\n```python\n\nimport sys\n\nprint(sys.path) # 输出python模块搜索目录\n\nprint(list(sys.modules.keys())) # 输出python已经导入的模块列表 \n```","source":"_posts/python-2017-08-15-config-pythonpath.md","raw":"---\ntitle: python 配置PYTHONPATH(了解python导入模块搜索路径运作原理)\ndate: 2017-08-15\ntags:\n---\n\n专辑: [python 如何构建完整项目](/python/2017/08/15/album-build-project)\n\n> python项目导入模块是必不可少的，大多数情况下，可以以来模块导入搜索路径的自动特性，完全不需要配置路径。不过，如果你想在用户间定义目录边界来导入文件，就需要知道搜索路径是如何运作的。\n\n```bash\n$ python tests/test_utils.py   \n                                                                   \nTraceback (most recent call last):\n  File \"tests/test_utils.py\", line 7, in <module>\n    from run_api import app\nImportError: No module named 'run_api'\n\n```\n在我刚学习python时，做模块导入最长碰到的就是这个错误，我明明定义了```run_api```模块，但是却总是报找不到的错误，No module No module No你妹啊，如果你也碰到这样的问题，你应该好好看看这篇文章\n\n## 不太好的解决办法\n```python\nimport sys\nimport os\nsys.path.append( os.path.join( os.path.dirname(__file__), os.path.pardir ) )\n```\n在google模块导入问题的时候，大部分博客给出了这样的解决方案，在每个文件配置这样的代码，他做到了将当前文件的路径加入到python模块搜索路径sys.path中，确实可以起到解决bug的作用，但是每个文件都写上这样一段代码，实在让人不舒服，下面我们还是来学习下python模块搜索路径是如何运作的\n\n## python从哪些路径导入模块\n```\n1、程序的主目录\n2、PYTHONPATH目录（如果已经进行了设置）\n3、标准链接库目录\n4、任何.pth文件的内容（如果存在的话）\n```\n\n### 主目录\nPython首先会在主目录内搜索导入的文件。如果程序完全位于单一目录，所有导入的会自动工作，而并不需要配置路径。由于这个目录总是先搜索，其文件也将覆盖路径上的其他目录中具有同样名称的模块。如果你需要在自己程序中使用库模块的话，小心不要以这种方式以外地隐藏库模块。\n\n### PYTHONPATH目录\n之后，Python会从左到右搜索PYTHONPATH环境变量设置中罗列出的所有目录，可以是用户定义或平台特定的目录名。因为Python优先搜索主目录，当导入的文件跨目录时，这个设置才显得格外重要。\n\n### 标准库目录\n接着，Python会自动搜索标准库模块安装在机器上的那些目录，这块通常不需要在单独配置\n\n### .pth文件目录\n最后，Python有个相当新的功能，允许用户把有效的目录添加到模块搜索路径中去，也就是在后缀名为.pth（路径的意思）的文本文件中一行一行的列出目录。他是PYTHONPATH的一种替代方案，我们也可以把它放在标注库所在位置的sitepackages的子目录中扩展模块搜索路径\n\n## 应用到当前项目\n在开发大型项目之前，我们可以将项目根目录作为PYTHONPATH存到环境变量中，也可以每次运行前之前该命令\n```bash\n$ touch env.sh\n$ vim env.sh\n\nexport PYTHONPATH=./ # 将项目根目录作为PYTHONPATH\n\n$ source env.sh # 在项目运行之前执行该命令\n```\n最后我们可以通过下面两行代码来查看当前项目python模块搜索路径和导入的模块\n```python\n\nimport sys\n\nprint(sys.path) # 输出python模块搜索目录\n\nprint(list(sys.modules.keys())) # 输出python已经导入的模块列表 \n```","slug":"python-2017-08-15-config-pythonpath","published":1,"updated":"2017-09-15T15:10:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9f0018kjxv6nub9k72","content":"<p>专辑: <a href=\"/python/2017/08/15/album-build-project\">python 如何构建完整项目</a></p>\n<blockquote>\n<p>python项目导入模块是必不可少的，大多数情况下，可以以来模块导入搜索路径的自动特性，完全不需要配置路径。不过，如果你想在用户间定义目录边界来导入文件，就需要知道搜索路径是如何运作的。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python tests/test_utils.py   </div><div class=\"line\">                                                                   </div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"tests/test_utils.py\"</span>, line 7, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    from run_api import app</div><div class=\"line\">ImportError: No module named <span class=\"string\">'run_api'</span></div></pre></td></tr></table></figure>\n<p>在我刚学习python时，做模块导入最长碰到的就是这个错误，我明明定义了<figure class=\"highlight plain\"><figcaption><span>module No module No你妹啊，如果你也碰到这样的问题，你应该好好看看这篇文章</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## 不太好的解决办法</div><div class=\"line\">```python</div><div class=\"line\">import sys</div><div class=\"line\">import os</div><div class=\"line\">sys.path.append( os.path.join( os.path.dirname(__file__), os.path.pardir ) )</div></pre></td></tr></table></figure></p>\n<p>在google模块导入问题的时候，大部分博客给出了这样的解决方案，在每个文件配置这样的代码，他做到了将当前文件的路径加入到python模块搜索路径sys.path中，确实可以起到解决bug的作用，但是每个文件都写上这样一段代码，实在让人不舒服，下面我们还是来学习下python模块搜索路径是如何运作的</p>\n<h2><span id=\"python-cong-na-xie-lu-jing-dao-ru-mo-kuai\">python从哪些路径导入模块</span><a href=\"#python-cong-na-xie-lu-jing-dao-ru-mo-kuai\" class=\"header-anchor\"></a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1、程序的主目录</div><div class=\"line\">2、PYTHONPATH目录（如果已经进行了设置）</div><div class=\"line\">3、标准链接库目录</div><div class=\"line\">4、任何.pth文件的内容（如果存在的话）</div></pre></td></tr></table></figure>\n<h3><span id=\"zhu-mu-lu\">主目录</span><a href=\"#zhu-mu-lu\" class=\"header-anchor\"></a></h3><p>Python首先会在主目录内搜索导入的文件。如果程序完全位于单一目录，所有导入的会自动工作，而并不需要配置路径。由于这个目录总是先搜索，其文件也将覆盖路径上的其他目录中具有同样名称的模块。如果你需要在自己程序中使用库模块的话，小心不要以这种方式以外地隐藏库模块。</p>\n<h3><span id=\"pythonpath-mu-lu\">PYTHONPATH目录</span><a href=\"#pythonpath-mu-lu\" class=\"header-anchor\"></a></h3><p>之后，Python会从左到右搜索PYTHONPATH环境变量设置中罗列出的所有目录，可以是用户定义或平台特定的目录名。因为Python优先搜索主目录，当导入的文件跨目录时，这个设置才显得格外重要。</p>\n<h3><span id=\"biao-zhun-ku-mu-lu\">标准库目录</span><a href=\"#biao-zhun-ku-mu-lu\" class=\"header-anchor\"></a></h3><p>接着，Python会自动搜索标准库模块安装在机器上的那些目录，这块通常不需要在单独配置</p>\n<h3><span id=\"pth-wen-jian-mu-lu\">.pth文件目录</span><a href=\"#pth-wen-jian-mu-lu\" class=\"header-anchor\"></a></h3><p>最后，Python有个相当新的功能，允许用户把有效的目录添加到模块搜索路径中去，也就是在后缀名为.pth（路径的意思）的文本文件中一行一行的列出目录。他是PYTHONPATH的一种替代方案，我们也可以把它放在标注库所在位置的sitepackages的子目录中扩展模块搜索路径</p>\n<h2><span id=\"ying-yong-dao-dang-qian-xiang-mu\">应用到当前项目</span><a href=\"#ying-yong-dao-dang-qian-xiang-mu\" class=\"header-anchor\"></a></h2><p>在开发大型项目之前，我们可以将项目根目录作为PYTHONPATH存到环境变量中，也可以每次运行前之前该命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ touch env.sh</div><div class=\"line\">$ vim env.sh</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">export</span> PYTHONPATH=./ <span class=\"comment\"># 将项目根目录作为PYTHONPATH</span></div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">source</span> env.sh <span class=\"comment\"># 在项目运行之前执行该命令</span></div></pre></td></tr></table></figure></p>\n<p>最后我们可以通过下面两行代码来查看当前项目python模块搜索路径和导入的模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\">print(sys.path) <span class=\"comment\"># 输出python模块搜索目录</span></div><div class=\"line\"></div><div class=\"line\">print(list(sys.modules.keys())) <span class=\"comment\"># 输出python已经导入的模块列表</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>专辑: <a href=\"/python/2017/08/15/album-build-project\">python 如何构建完整项目</a></p>\n<blockquote>\n<p>python项目导入模块是必不可少的，大多数情况下，可以以来模块导入搜索路径的自动特性，完全不需要配置路径。不过，如果你想在用户间定义目录边界来导入文件，就需要知道搜索路径是如何运作的。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python tests/test_utils.py   </div><div class=\"line\">                                                                   </div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"tests/test_utils.py\"</span>, line 7, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    from run_api import app</div><div class=\"line\">ImportError: No module named <span class=\"string\">'run_api'</span></div></pre></td></tr></table></figure>\n<p>在我刚学习python时，做模块导入最长碰到的就是这个错误，我明明定义了<figure class=\"highlight plain\"><figcaption><span>module No module No你妹啊，如果你也碰到这样的问题，你应该好好看看这篇文章</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## 不太好的解决办法</div><div class=\"line\">```python</div><div class=\"line\">import sys</div><div class=\"line\">import os</div><div class=\"line\">sys.path.append( os.path.join( os.path.dirname(__file__), os.path.pardir ) )</div></pre></td></tr></table></figure></p>\n<p>在google模块导入问题的时候，大部分博客给出了这样的解决方案，在每个文件配置这样的代码，他做到了将当前文件的路径加入到python模块搜索路径sys.path中，确实可以起到解决bug的作用，但是每个文件都写上这样一段代码，实在让人不舒服，下面我们还是来学习下python模块搜索路径是如何运作的</p>\n<h2 id=\"python从哪些路径导入模块\"><a href=\"#python从哪些路径导入模块\" class=\"headerlink\" title=\"python从哪些路径导入模块\"></a>python从哪些路径导入模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1、程序的主目录</div><div class=\"line\">2、PYTHONPATH目录（如果已经进行了设置）</div><div class=\"line\">3、标准链接库目录</div><div class=\"line\">4、任何.pth文件的内容（如果存在的话）</div></pre></td></tr></table></figure>\n<h3 id=\"主目录\"><a href=\"#主目录\" class=\"headerlink\" title=\"主目录\"></a>主目录</h3><p>Python首先会在主目录内搜索导入的文件。如果程序完全位于单一目录，所有导入的会自动工作，而并不需要配置路径。由于这个目录总是先搜索，其文件也将覆盖路径上的其他目录中具有同样名称的模块。如果你需要在自己程序中使用库模块的话，小心不要以这种方式以外地隐藏库模块。</p>\n<h3 id=\"PYTHONPATH目录\"><a href=\"#PYTHONPATH目录\" class=\"headerlink\" title=\"PYTHONPATH目录\"></a>PYTHONPATH目录</h3><p>之后，Python会从左到右搜索PYTHONPATH环境变量设置中罗列出的所有目录，可以是用户定义或平台特定的目录名。因为Python优先搜索主目录，当导入的文件跨目录时，这个设置才显得格外重要。</p>\n<h3 id=\"标准库目录\"><a href=\"#标准库目录\" class=\"headerlink\" title=\"标准库目录\"></a>标准库目录</h3><p>接着，Python会自动搜索标准库模块安装在机器上的那些目录，这块通常不需要在单独配置</p>\n<h3 id=\"pth文件目录\"><a href=\"#pth文件目录\" class=\"headerlink\" title=\".pth文件目录\"></a>.pth文件目录</h3><p>最后，Python有个相当新的功能，允许用户把有效的目录添加到模块搜索路径中去，也就是在后缀名为.pth（路径的意思）的文本文件中一行一行的列出目录。他是PYTHONPATH的一种替代方案，我们也可以把它放在标注库所在位置的sitepackages的子目录中扩展模块搜索路径</p>\n<h2 id=\"应用到当前项目\"><a href=\"#应用到当前项目\" class=\"headerlink\" title=\"应用到当前项目\"></a>应用到当前项目</h2><p>在开发大型项目之前，我们可以将项目根目录作为PYTHONPATH存到环境变量中，也可以每次运行前之前该命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ touch env.sh</div><div class=\"line\">$ vim env.sh</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">export</span> PYTHONPATH=./ <span class=\"comment\"># 将项目根目录作为PYTHONPATH</span></div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">source</span> env.sh <span class=\"comment\"># 在项目运行之前执行该命令</span></div></pre></td></tr></table></figure></p>\n<p>最后我们可以通过下面两行代码来查看当前项目python模块搜索路径和导入的模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\">print(sys.path) <span class=\"comment\"># 输出python模块搜索目录</span></div><div class=\"line\"></div><div class=\"line\">print(list(sys.modules.keys())) <span class=\"comment\"># 输出python已经导入的模块列表</span></div></pre></td></tr></table></figure></p>\n"},{"title":"flask 如何配置多环境","date":"2017-08-14T16:00:00.000Z","_content":"\n专辑: [python 如何构建完整项目](/python/2017/08/15/album-build-project)\n\n> 一个完整的web项目都需要配置数据库连接和开发环境、生产环境灵活切换，今天来在各个环境中切换数据库连接\n\n## 首先添加指定环境脚本\n```bash\n$ touch env.sh\n$ vim env.sh\n\n#!/usr/bin/env bash\n\nENV=$1\n\nif [ ! ${ENV} ]\nthen\n    ENV=local\nfi\n\nexport PYTHONPATH=./ # 项目跟目录\nexport FLASK_CONFIG=${ENV} # 当前环境 可选 local product dev test\n```\n该文件起到两个作用 1、PYTHONPATH：项目根目录。2、FLASK_CONFIG：当前环境,使用方法\n```bash\n$ source env.sh ${env} # env=local|product|dev|test 默认local\n```\n\n## 添加环境信息文件\n```bash\n$ mkdir app\n$ cd app\n$ touch local_config.py\n$ vim local_config.py\n```\n```python\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n'''配置文件程序'''\n__author__ = \"wxnacy(wxnacy@gmail.com)\"\n__copyright__ = \"Copyright of wxnacy (2017).\"\n\nclass ProductionConfig():\n    DEBUG = False\n    SQLALCHEMY_DATABASE_URI = 'mysql+pymysql://root:pass@prod.server.org:3306/db_name?charset=utf8mb4'\n\nclass DevelopmentConfig():\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = 'mysql+pymysql://root:pass@dev.server.org:3306/db_name?charset=utf8mb4'\n\nclass TestingConfig():\n    DEBUG = True\n\nclass LocalConfig():\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = 'mysql+pymysql://root:pass@127.0.0.1:3306/db_name?charset=utf8mb4'\n\n\n```\n该文件配置了各个环境数据库连接信息\n\n## 添加文件config.py来根据环境读取当前环境内容\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n'''配置信息'''\n__author__ = \"wxnacy(wxnacy@gmail.com)\"\n__copyright__ = \"Copyright of wxnacy (2017).\"\n\n\nfrom flask import Flask\nfrom werkzeug.contrib.fixers import ProxyFix\nimport os\n\nCONFIG_NAME_MAPPER = {\n    'local': 'app.local_config.LocalConfig',\n    'product': 'app.local_config.ProductionConfig',\n    'dev': 'app.local_config.DevelopmentConfig',\n    'test': 'app.local_config.TestingConfig'\n}\n\ndef create_app(flask_config_name=None):\n    \"\"\"\n    创建配置\n    :return:\n    \"\"\"\n    app = Flask(__name__)\n    app.wsgi_app = ProxyFix(app.wsgi_app)\n    env_flask_config_name = os.getenv('FLASK_CONFIG')\n    config_mapper_name = flask_config_name or env_flask_config_name or 'local'\n    config_name = CONFIG_NAME_MAPPER[config_mapper_name]\n    app.config.from_object(config_name)\n\n    return app\n\n\napp = create_app()\n\n```\n\n## 修改run.py 来读取环境内容\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n'''配置信息'''\n__author__ = \"wxnacy(wxnacy@gmail.com)\"\n__copyright__ = \"Copyright of wxnacy (2017).\"\n\n\nfrom app.config import app\n\n@app.route('/test')\ndef mysql():\n    return app.config['SQLALCHEMY_DATABASE_URI']\n    \napp.run()   \n```\n\n现在项目的目录结构为\n```bash\nmyproject:\n    app:\n        config.py\n        local_config.py\n    run.py\n    env.sh \n```\n\n## 运行\n### 本地环境\n```bash\n$ source env.sh\n$ python run.py\n$ curl http://localhost:5000/test\nmysql+pymysql://root:pass@127.0.0.1:3306/db_name?charset=utf8mb4\n\n$ source env.sh product\n$ python run.py\n$ curl http://localhost:5000/test\nmysql+pymysql://root:pass@prod.server.org:3306/db_name?charset=utf8mb4\n\n```\n","source":"_posts/python-2017-08-15-flask-env-config.md","raw":"---\ntitle: flask 如何配置多环境\ndate: 2017-08-15\ntags:\n---\n\n专辑: [python 如何构建完整项目](/python/2017/08/15/album-build-project)\n\n> 一个完整的web项目都需要配置数据库连接和开发环境、生产环境灵活切换，今天来在各个环境中切换数据库连接\n\n## 首先添加指定环境脚本\n```bash\n$ touch env.sh\n$ vim env.sh\n\n#!/usr/bin/env bash\n\nENV=$1\n\nif [ ! ${ENV} ]\nthen\n    ENV=local\nfi\n\nexport PYTHONPATH=./ # 项目跟目录\nexport FLASK_CONFIG=${ENV} # 当前环境 可选 local product dev test\n```\n该文件起到两个作用 1、PYTHONPATH：项目根目录。2、FLASK_CONFIG：当前环境,使用方法\n```bash\n$ source env.sh ${env} # env=local|product|dev|test 默认local\n```\n\n## 添加环境信息文件\n```bash\n$ mkdir app\n$ cd app\n$ touch local_config.py\n$ vim local_config.py\n```\n```python\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n'''配置文件程序'''\n__author__ = \"wxnacy(wxnacy@gmail.com)\"\n__copyright__ = \"Copyright of wxnacy (2017).\"\n\nclass ProductionConfig():\n    DEBUG = False\n    SQLALCHEMY_DATABASE_URI = 'mysql+pymysql://root:pass@prod.server.org:3306/db_name?charset=utf8mb4'\n\nclass DevelopmentConfig():\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = 'mysql+pymysql://root:pass@dev.server.org:3306/db_name?charset=utf8mb4'\n\nclass TestingConfig():\n    DEBUG = True\n\nclass LocalConfig():\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = 'mysql+pymysql://root:pass@127.0.0.1:3306/db_name?charset=utf8mb4'\n\n\n```\n该文件配置了各个环境数据库连接信息\n\n## 添加文件config.py来根据环境读取当前环境内容\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n'''配置信息'''\n__author__ = \"wxnacy(wxnacy@gmail.com)\"\n__copyright__ = \"Copyright of wxnacy (2017).\"\n\n\nfrom flask import Flask\nfrom werkzeug.contrib.fixers import ProxyFix\nimport os\n\nCONFIG_NAME_MAPPER = {\n    'local': 'app.local_config.LocalConfig',\n    'product': 'app.local_config.ProductionConfig',\n    'dev': 'app.local_config.DevelopmentConfig',\n    'test': 'app.local_config.TestingConfig'\n}\n\ndef create_app(flask_config_name=None):\n    \"\"\"\n    创建配置\n    :return:\n    \"\"\"\n    app = Flask(__name__)\n    app.wsgi_app = ProxyFix(app.wsgi_app)\n    env_flask_config_name = os.getenv('FLASK_CONFIG')\n    config_mapper_name = flask_config_name or env_flask_config_name or 'local'\n    config_name = CONFIG_NAME_MAPPER[config_mapper_name]\n    app.config.from_object(config_name)\n\n    return app\n\n\napp = create_app()\n\n```\n\n## 修改run.py 来读取环境内容\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n'''配置信息'''\n__author__ = \"wxnacy(wxnacy@gmail.com)\"\n__copyright__ = \"Copyright of wxnacy (2017).\"\n\n\nfrom app.config import app\n\n@app.route('/test')\ndef mysql():\n    return app.config['SQLALCHEMY_DATABASE_URI']\n    \napp.run()   \n```\n\n现在项目的目录结构为\n```bash\nmyproject:\n    app:\n        config.py\n        local_config.py\n    run.py\n    env.sh \n```\n\n## 运行\n### 本地环境\n```bash\n$ source env.sh\n$ python run.py\n$ curl http://localhost:5000/test\nmysql+pymysql://root:pass@127.0.0.1:3306/db_name?charset=utf8mb4\n\n$ source env.sh product\n$ python run.py\n$ curl http://localhost:5000/test\nmysql+pymysql://root:pass@prod.server.org:3306/db_name?charset=utf8mb4\n\n```\n","slug":"python-2017-08-15-flask-env-config","published":1,"updated":"2017-09-15T23:31:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9g0019kjxvwj1o840n","content":"<p>专辑: <a href=\"/python/2017/08/15/album-build-project\">python 如何构建完整项目</a></p>\n<blockquote>\n<p>一个完整的web项目都需要配置数据库连接和开发环境、生产环境灵活切换，今天来在各个环境中切换数据库连接</p>\n</blockquote>\n<h2><span id=\"shou-xian-tian-jia-zhi-ding-huan-jing-jiao-ben\">首先添加指定环境脚本</span><a href=\"#shou-xian-tian-jia-zhi-ding-huan-jing-jiao-ben\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ touch env.sh</div><div class=\"line\">$ vim env.sh</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></div><div class=\"line\"></div><div class=\"line\">ENV=<span class=\"variable\">$1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ ! <span class=\"variable\">$&#123;ENV&#125;</span> ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    ENV=<span class=\"built_in\">local</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">export</span> PYTHONPATH=./ <span class=\"comment\"># 项目跟目录</span></div><div class=\"line\"><span class=\"built_in\">export</span> FLASK_CONFIG=<span class=\"variable\">$&#123;ENV&#125;</span> <span class=\"comment\"># 当前环境 可选 local product dev test</span></div></pre></td></tr></table></figure>\n<p>该文件起到两个作用 1、PYTHONPATH：项目根目录。2、FLASK_CONFIG：当前环境,使用方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">source</span> env.sh <span class=\"variable\">$&#123;env&#125;</span> <span class=\"comment\"># env=local|product|dev|test 默认local</span></div></pre></td></tr></table></figure></p>\n<h2><span id=\"tian-jia-huan-jing-xin-xi-wen-jian\">添加环境信息文件</span><a href=\"#tian-jia-huan-jing-xin-xi-wen-jian\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir app</div><div class=\"line\">$ <span class=\"built_in\">cd</span> app</div><div class=\"line\">$ touch local_config.py</div><div class=\"line\">$ vim local_config.py</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"string\">'''配置文件程序'''</span></div><div class=\"line\">__author__ = <span class=\"string\">\"wxnacy(wxnacy@gmail.com)\"</span></div><div class=\"line\">__copyright__ = <span class=\"string\">\"Copyright of wxnacy (2017).\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductionConfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    DEBUG = <span class=\"keyword\">False</span></div><div class=\"line\">    SQLALCHEMY_DATABASE_URI = <span class=\"string\">'mysql+pymysql://root:pass@prod.server.org:3306/db_name?charset=utf8mb4'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DevelopmentConfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    DEBUG = <span class=\"keyword\">True</span></div><div class=\"line\">    SQLALCHEMY_DATABASE_URI = <span class=\"string\">'mysql+pymysql://root:pass@dev.server.org:3306/db_name?charset=utf8mb4'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestingConfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    DEBUG = <span class=\"keyword\">True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalConfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    DEBUG = <span class=\"keyword\">True</span></div><div class=\"line\">    SQLALCHEMY_DATABASE_URI = <span class=\"string\">'mysql+pymysql://root:pass@127.0.0.1:3306/db_name?charset=utf8mb4'</span></div></pre></td></tr></table></figure>\n<p>该文件配置了各个环境数据库连接信息</p>\n<h2><span id=\"tian-jia-wen-jian-config-py-lai-gen-ju-huan-jing-du-qu-dang-qian-huan-jing-nei-rong\">添加文件config.py来根据环境读取当前环境内容</span><a href=\"#tian-jia-wen-jian-config-py-lai-gen-ju-huan-jing-du-qu-dang-qian-huan-jing-nei-rong\" class=\"header-anchor\"></a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"string\">'''配置信息'''</span></div><div class=\"line\">__author__ = <span class=\"string\">\"wxnacy(wxnacy@gmail.com)\"</span></div><div class=\"line\">__copyright__ = <span class=\"string\">\"Copyright of wxnacy (2017).\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</div><div class=\"line\"><span class=\"keyword\">from</span> werkzeug.contrib.fixers <span class=\"keyword\">import</span> ProxyFix</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\">CONFIG_NAME_MAPPER = &#123;</div><div class=\"line\">    <span class=\"string\">'local'</span>: <span class=\"string\">'app.local_config.LocalConfig'</span>,</div><div class=\"line\">    <span class=\"string\">'product'</span>: <span class=\"string\">'app.local_config.ProductionConfig'</span>,</div><div class=\"line\">    <span class=\"string\">'dev'</span>: <span class=\"string\">'app.local_config.DevelopmentConfig'</span>,</div><div class=\"line\">    <span class=\"string\">'test'</span>: <span class=\"string\">'app.local_config.TestingConfig'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_app</span><span class=\"params\">(flask_config_name=None)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"string\">    创建配置</span></div><div class=\"line\"><span class=\"string\">    :return:</span></div><div class=\"line\"><span class=\"string\">    \"\"\"</span></div><div class=\"line\">    app = Flask(__name__)</div><div class=\"line\">    app.wsgi_app = ProxyFix(app.wsgi_app)</div><div class=\"line\">    env_flask_config_name = os.getenv(<span class=\"string\">'FLASK_CONFIG'</span>)</div><div class=\"line\">    config_mapper_name = flask_config_name <span class=\"keyword\">or</span> env_flask_config_name <span class=\"keyword\">or</span> <span class=\"string\">'local'</span></div><div class=\"line\">    config_name = CONFIG_NAME_MAPPER[config_mapper_name]</div><div class=\"line\">    app.config.from_object(config_name)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> app</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app = create_app()</div></pre></td></tr></table></figure>\n<h2><span id=\"xiu-gai-run-py-lai-du-qu-huan-jing-nei-rong\">修改run.py 来读取环境内容</span><a href=\"#xiu-gai-run-py-lai-du-qu-huan-jing-nei-rong\" class=\"header-anchor\"></a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"string\">'''配置信息'''</span></div><div class=\"line\">__author__ = <span class=\"string\">\"wxnacy(wxnacy@gmail.com)\"</span></div><div class=\"line\">__copyright__ = <span class=\"string\">\"Copyright of wxnacy (2017).\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> app.config <span class=\"keyword\">import</span> app</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/test')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mysql</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> app.config[<span class=\"string\">'SQLALCHEMY_DATABASE_URI'</span>]</div><div class=\"line\">    </div><div class=\"line\">app.run()</div></pre></td></tr></table></figure>\n<p>现在项目的目录结构为<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">myproject:</div><div class=\"line\">    app:</div><div class=\"line\">        config.py</div><div class=\"line\">        local_config.py</div><div class=\"line\">    run.py</div><div class=\"line\">    env.sh</div></pre></td></tr></table></figure></p>\n<h2><span id=\"yun-xing\">运行</span><a href=\"#yun-xing\" class=\"header-anchor\"></a></h2><h3><span id=\"ben-di-huan-jing\">本地环境</span><a href=\"#ben-di-huan-jing\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">source</span> env.sh</div><div class=\"line\">$ python run.py</div><div class=\"line\">$ curl http://localhost:5000/<span class=\"built_in\">test</span></div><div class=\"line\">mysql+pymysql://root:pass@127.0.0.1:3306/db_name?charset=utf8mb4</div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">source</span> env.sh product</div><div class=\"line\">$ python run.py</div><div class=\"line\">$ curl http://localhost:5000/<span class=\"built_in\">test</span></div><div class=\"line\">mysql+pymysql://root:pass@prod.server.org:3306/db_name?charset=utf8mb4</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>专辑: <a href=\"/python/2017/08/15/album-build-project\">python 如何构建完整项目</a></p>\n<blockquote>\n<p>一个完整的web项目都需要配置数据库连接和开发环境、生产环境灵活切换，今天来在各个环境中切换数据库连接</p>\n</blockquote>\n<h2 id=\"首先添加指定环境脚本\"><a href=\"#首先添加指定环境脚本\" class=\"headerlink\" title=\"首先添加指定环境脚本\"></a>首先添加指定环境脚本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ touch env.sh</div><div class=\"line\">$ vim env.sh</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></div><div class=\"line\"></div><div class=\"line\">ENV=<span class=\"variable\">$1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ ! <span class=\"variable\">$&#123;ENV&#125;</span> ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    ENV=<span class=\"built_in\">local</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">export</span> PYTHONPATH=./ <span class=\"comment\"># 项目跟目录</span></div><div class=\"line\"><span class=\"built_in\">export</span> FLASK_CONFIG=<span class=\"variable\">$&#123;ENV&#125;</span> <span class=\"comment\"># 当前环境 可选 local product dev test</span></div></pre></td></tr></table></figure>\n<p>该文件起到两个作用 1、PYTHONPATH：项目根目录。2、FLASK_CONFIG：当前环境,使用方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">source</span> env.sh <span class=\"variable\">$&#123;env&#125;</span> <span class=\"comment\"># env=local|product|dev|test 默认local</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"添加环境信息文件\"><a href=\"#添加环境信息文件\" class=\"headerlink\" title=\"添加环境信息文件\"></a>添加环境信息文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir app</div><div class=\"line\">$ <span class=\"built_in\">cd</span> app</div><div class=\"line\">$ touch local_config.py</div><div class=\"line\">$ vim local_config.py</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"string\">'''配置文件程序'''</span></div><div class=\"line\">__author__ = <span class=\"string\">\"wxnacy(wxnacy@gmail.com)\"</span></div><div class=\"line\">__copyright__ = <span class=\"string\">\"Copyright of wxnacy (2017).\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductionConfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    DEBUG = <span class=\"keyword\">False</span></div><div class=\"line\">    SQLALCHEMY_DATABASE_URI = <span class=\"string\">'mysql+pymysql://root:pass@prod.server.org:3306/db_name?charset=utf8mb4'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DevelopmentConfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    DEBUG = <span class=\"keyword\">True</span></div><div class=\"line\">    SQLALCHEMY_DATABASE_URI = <span class=\"string\">'mysql+pymysql://root:pass@dev.server.org:3306/db_name?charset=utf8mb4'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestingConfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    DEBUG = <span class=\"keyword\">True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalConfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    DEBUG = <span class=\"keyword\">True</span></div><div class=\"line\">    SQLALCHEMY_DATABASE_URI = <span class=\"string\">'mysql+pymysql://root:pass@127.0.0.1:3306/db_name?charset=utf8mb4'</span></div></pre></td></tr></table></figure>\n<p>该文件配置了各个环境数据库连接信息</p>\n<h2 id=\"添加文件config-py来根据环境读取当前环境内容\"><a href=\"#添加文件config-py来根据环境读取当前环境内容\" class=\"headerlink\" title=\"添加文件config.py来根据环境读取当前环境内容\"></a>添加文件config.py来根据环境读取当前环境内容</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"string\">'''配置信息'''</span></div><div class=\"line\">__author__ = <span class=\"string\">\"wxnacy(wxnacy@gmail.com)\"</span></div><div class=\"line\">__copyright__ = <span class=\"string\">\"Copyright of wxnacy (2017).\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</div><div class=\"line\"><span class=\"keyword\">from</span> werkzeug.contrib.fixers <span class=\"keyword\">import</span> ProxyFix</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\">CONFIG_NAME_MAPPER = &#123;</div><div class=\"line\">    <span class=\"string\">'local'</span>: <span class=\"string\">'app.local_config.LocalConfig'</span>,</div><div class=\"line\">    <span class=\"string\">'product'</span>: <span class=\"string\">'app.local_config.ProductionConfig'</span>,</div><div class=\"line\">    <span class=\"string\">'dev'</span>: <span class=\"string\">'app.local_config.DevelopmentConfig'</span>,</div><div class=\"line\">    <span class=\"string\">'test'</span>: <span class=\"string\">'app.local_config.TestingConfig'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_app</span><span class=\"params\">(flask_config_name=None)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\"><span class=\"string\">    创建配置</span></div><div class=\"line\"><span class=\"string\">    :return:</span></div><div class=\"line\"><span class=\"string\">    \"\"\"</span></div><div class=\"line\">    app = Flask(__name__)</div><div class=\"line\">    app.wsgi_app = ProxyFix(app.wsgi_app)</div><div class=\"line\">    env_flask_config_name = os.getenv(<span class=\"string\">'FLASK_CONFIG'</span>)</div><div class=\"line\">    config_mapper_name = flask_config_name <span class=\"keyword\">or</span> env_flask_config_name <span class=\"keyword\">or</span> <span class=\"string\">'local'</span></div><div class=\"line\">    config_name = CONFIG_NAME_MAPPER[config_mapper_name]</div><div class=\"line\">    app.config.from_object(config_name)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> app</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app = create_app()</div></pre></td></tr></table></figure>\n<h2 id=\"修改run-py-来读取环境内容\"><a href=\"#修改run-py-来读取环境内容\" class=\"headerlink\" title=\"修改run.py 来读取环境内容\"></a>修改run.py 来读取环境内容</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"string\">'''配置信息'''</span></div><div class=\"line\">__author__ = <span class=\"string\">\"wxnacy(wxnacy@gmail.com)\"</span></div><div class=\"line\">__copyright__ = <span class=\"string\">\"Copyright of wxnacy (2017).\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> app.config <span class=\"keyword\">import</span> app</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/test')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mysql</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> app.config[<span class=\"string\">'SQLALCHEMY_DATABASE_URI'</span>]</div><div class=\"line\">    </div><div class=\"line\">app.run()</div></pre></td></tr></table></figure>\n<p>现在项目的目录结构为<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">myproject:</div><div class=\"line\">    app:</div><div class=\"line\">        config.py</div><div class=\"line\">        local_config.py</div><div class=\"line\">    run.py</div><div class=\"line\">    env.sh</div></pre></td></tr></table></figure></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><h3 id=\"本地环境\"><a href=\"#本地环境\" class=\"headerlink\" title=\"本地环境\"></a>本地环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">source</span> env.sh</div><div class=\"line\">$ python run.py</div><div class=\"line\">$ curl http://localhost:5000/<span class=\"built_in\">test</span></div><div class=\"line\">mysql+pymysql://root:pass@127.0.0.1:3306/db_name?charset=utf8mb4</div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">source</span> env.sh product</div><div class=\"line\">$ python run.py</div><div class=\"line\">$ curl http://localhost:5000/<span class=\"built_in\">test</span></div><div class=\"line\">mysql+pymysql://root:pass@prod.server.org:3306/db_name?charset=utf8mb4</div></pre></td></tr></table></figure>\n"},{"title":"flask 运行hello world","date":"2017-08-14T16:00:00.000Z","_content":"\n专辑: [python 如何构建完整项目](/python/2017/08/15/album-build-project)\n## 新建项目myproject\n首先新建myproject文件夹当做工作目录，进入目录pip下flask依赖包，创建并编辑run.py\n```bash\n$ mkdir myproject\n$ cd myproject\n$ pip install flask\n$ touch run.py\n$ vim run.py\n\n```\n### run.py \n```python\n#!/usr/bin/env python\n\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/hello')\ndef hello():\n    return \"hello world\"\n\napp.run() \n```\n### 运行\n```bash\n$ python run.py\n\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n```\n\n### 访问服务\n```bash\n$ curl http://127.0.0.1:5000/hello\nhello world%\n```\n\n### 外部可访问服务器\n```python\napp.run(host='0.0.0.0')\n```\n\n","source":"_posts/python-2017-08-15-flask-hello-world.md","raw":"---\ntitle: flask 运行hello world\ndate: 2017-08-15\ntags:\n---\n\n专辑: [python 如何构建完整项目](/python/2017/08/15/album-build-project)\n## 新建项目myproject\n首先新建myproject文件夹当做工作目录，进入目录pip下flask依赖包，创建并编辑run.py\n```bash\n$ mkdir myproject\n$ cd myproject\n$ pip install flask\n$ touch run.py\n$ vim run.py\n\n```\n### run.py \n```python\n#!/usr/bin/env python\n\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/hello')\ndef hello():\n    return \"hello world\"\n\napp.run() \n```\n### 运行\n```bash\n$ python run.py\n\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n```\n\n### 访问服务\n```bash\n$ curl http://127.0.0.1:5000/hello\nhello world%\n```\n\n### 外部可访问服务器\n```python\napp.run(host='0.0.0.0')\n```\n\n","slug":"python-2017-08-15-flask-hello-world","published":1,"updated":"2017-09-15T23:32:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9g001akjxvhxy83ggd","content":"<p>专辑: <a href=\"/python/2017/08/15/album-build-project\">python 如何构建完整项目</a></p>\n<h2><span id=\"xin-jian-xiang-mu-myproject\">新建项目myproject</span><a href=\"#xin-jian-xiang-mu-myproject\" class=\"header-anchor\"></a></h2><p>首先新建myproject文件夹当做工作目录，进入目录pip下flask依赖包，创建并编辑run.py<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir myproject</div><div class=\"line\">$ <span class=\"built_in\">cd</span> myproject</div><div class=\"line\">$ pip install flask</div><div class=\"line\">$ touch run.py</div><div class=\"line\">$ vim run.py</div></pre></td></tr></table></figure></p>\n<h3><span id=\"run-py\">run.py</span><a href=\"#run-py\" class=\"header-anchor\"></a></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/hello')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello world\"</span></div><div class=\"line\"></div><div class=\"line\">app.run()</div></pre></td></tr></table></figure>\n<h3><span id=\"yun-xing\">运行</span><a href=\"#yun-xing\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python run.py</div><div class=\"line\"></div><div class=\"line\">* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</div></pre></td></tr></table></figure>\n<h3><span id=\"fang-wen-fu-wu\">访问服务</span><a href=\"#fang-wen-fu-wu\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl http://127.0.0.1:5000/hello</div><div class=\"line\">hello world%</div></pre></td></tr></table></figure>\n<h3><span id=\"wai-bu-ke-fang-wen-fu-wu-qi\">外部可访问服务器</span><a href=\"#wai-bu-ke-fang-wen-fu-wu-qi\" class=\"header-anchor\"></a></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.run(host=<span class=\"string\">'0.0.0.0'</span>)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>专辑: <a href=\"/python/2017/08/15/album-build-project\">python 如何构建完整项目</a></p>\n<h2 id=\"新建项目myproject\"><a href=\"#新建项目myproject\" class=\"headerlink\" title=\"新建项目myproject\"></a>新建项目myproject</h2><p>首先新建myproject文件夹当做工作目录，进入目录pip下flask依赖包，创建并编辑run.py<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir myproject</div><div class=\"line\">$ <span class=\"built_in\">cd</span> myproject</div><div class=\"line\">$ pip install flask</div><div class=\"line\">$ touch run.py</div><div class=\"line\">$ vim run.py</div></pre></td></tr></table></figure></p>\n<h3 id=\"run-py\"><a href=\"#run-py\" class=\"headerlink\" title=\"run.py\"></a>run.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/hello')</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello world\"</span></div><div class=\"line\"></div><div class=\"line\">app.run()</div></pre></td></tr></table></figure>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python run.py</div><div class=\"line\"></div><div class=\"line\">* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</div></pre></td></tr></table></figure>\n<h3 id=\"访问服务\"><a href=\"#访问服务\" class=\"headerlink\" title=\"访问服务\"></a>访问服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl http://127.0.0.1:5000/hello</div><div class=\"line\">hello world%</div></pre></td></tr></table></figure>\n<h3 id=\"外部可访问服务器\"><a href=\"#外部可访问服务器\" class=\"headerlink\" title=\"外部可访问服务器\"></a>外部可访问服务器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.run(host=<span class=\"string\">'0.0.0.0'</span>)</div></pre></td></tr></table></figure>\n"},{"title":"使用 gunicorn 启动你的项目","date":"2017-08-14T16:00:00.000Z","_content":"\n\n专辑: [python 如何构建完整项目](/python/2017/08/15/album-build-project)\n\n> 虽然python自带服务器服务，但是最多只能用作开发环境调试用，在生产环境中如同玩具一样，一碰就坏，今天给大家介绍使用gunicorn启动python项目\n\n## 安装\n```bash\n$ pip install gunicorn\n```\n\n## 启动\n```bash\n$ gunicorn run:app\n\n[2017-08-15 15:25:28 +0800] [26628] [INFO] Starting gunicorn 19.7.1\n[2017-08-15 15:25:28 +0800] [26628] [INFO] Listening at: http://127.0.0.1:8000 (26628)\n[2017-08-15 15:25:28 +0800] [26628] [INFO] Using worker: sync\n[2017-08-15 15:25:28 +0800] [26631] [INFO] Booting worker with pid: 26631\n```\n\n## 配置参数\n### 命令行参数\n\n```bash\n$ gunicorn -w 2 -b 0.0.0.0:8000 run:app \n```\n其中``` -b 或 --bind ``` 指定项目启动绑定域名和端口，``` -w 或 --workers``` 指定启动几个线程\n\n### 配置参数文件\ntouch gunicorn_config.py && vim gunicorn.py\n```bash\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n'''\n配置信息\nhttps://github.com/benoitc/gunicorn/blob/master/examples/example_config.py\n'''\n__author__ = \"wxnacy(wxnacy@gmail.com)\"\n__copyright__ = \"Copyright of wxnacy (2017).\"\n\nimport multiprocessing\n\nbind = '0.0.0.0:8002' # 绑定地址\nworkers =  multiprocessing.cpu_count() * 2 + 1 # 根据cpu数量指定线程数量\n\n```\n启动\n```bash\n$ gunicorn -c gunicorn_config.py run:app\n```\n\n更多配置:[http://docs.gunicorn.org/en/stable/settings.html](http://docs.gunicorn.org/en/stable/settings.html)","source":"_posts/python-2017-08-15-gunicorn-run.md","raw":"---\ntitle: 使用 gunicorn 启动你的项目\ndate: 2017-08-15\ntags:\n---\n\n\n专辑: [python 如何构建完整项目](/python/2017/08/15/album-build-project)\n\n> 虽然python自带服务器服务，但是最多只能用作开发环境调试用，在生产环境中如同玩具一样，一碰就坏，今天给大家介绍使用gunicorn启动python项目\n\n## 安装\n```bash\n$ pip install gunicorn\n```\n\n## 启动\n```bash\n$ gunicorn run:app\n\n[2017-08-15 15:25:28 +0800] [26628] [INFO] Starting gunicorn 19.7.1\n[2017-08-15 15:25:28 +0800] [26628] [INFO] Listening at: http://127.0.0.1:8000 (26628)\n[2017-08-15 15:25:28 +0800] [26628] [INFO] Using worker: sync\n[2017-08-15 15:25:28 +0800] [26631] [INFO] Booting worker with pid: 26631\n```\n\n## 配置参数\n### 命令行参数\n\n```bash\n$ gunicorn -w 2 -b 0.0.0.0:8000 run:app \n```\n其中``` -b 或 --bind ``` 指定项目启动绑定域名和端口，``` -w 或 --workers``` 指定启动几个线程\n\n### 配置参数文件\ntouch gunicorn_config.py && vim gunicorn.py\n```bash\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n'''\n配置信息\nhttps://github.com/benoitc/gunicorn/blob/master/examples/example_config.py\n'''\n__author__ = \"wxnacy(wxnacy@gmail.com)\"\n__copyright__ = \"Copyright of wxnacy (2017).\"\n\nimport multiprocessing\n\nbind = '0.0.0.0:8002' # 绑定地址\nworkers =  multiprocessing.cpu_count() * 2 + 1 # 根据cpu数量指定线程数量\n\n```\n启动\n```bash\n$ gunicorn -c gunicorn_config.py run:app\n```\n\n更多配置:[http://docs.gunicorn.org/en/stable/settings.html](http://docs.gunicorn.org/en/stable/settings.html)","slug":"python-2017-08-15-gunicorn-run","published":1,"updated":"2017-09-15T23:32:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9h001bkjxvq6lmg5y9","content":"<p>专辑: <a href=\"/python/2017/08/15/album-build-project\">python 如何构建完整项目</a></p>\n<blockquote>\n<p>虽然python自带服务器服务，但是最多只能用作开发环境调试用，在生产环境中如同玩具一样，一碰就坏，今天给大家介绍使用gunicorn启动python项目</p>\n</blockquote>\n<h2><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pip install gunicorn</div></pre></td></tr></table></figure>\n<h2><span id=\"qi-dong\">启动</span><a href=\"#qi-dong\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gunicorn run:app</div><div class=\"line\"></div><div class=\"line\">[2017-08-15 15:25:28 +0800] [26628] [INFO] Starting gunicorn 19.7.1</div><div class=\"line\">[2017-08-15 15:25:28 +0800] [26628] [INFO] Listening at: http://127.0.0.1:8000 (26628)</div><div class=\"line\">[2017-08-15 15:25:28 +0800] [26628] [INFO] Using worker: sync</div><div class=\"line\">[2017-08-15 15:25:28 +0800] [26631] [INFO] Booting worker with pid: 26631</div></pre></td></tr></table></figure>\n<h2><span id=\"pei-zhi-can-shu\">配置参数</span><a href=\"#pei-zhi-can-shu\" class=\"header-anchor\"></a></h2><h3><span id=\"ming-ling-xing-can-shu\">命令行参数</span><a href=\"#ming-ling-xing-can-shu\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gunicorn -w 2 -b 0.0.0.0:8000 run:app</div></pre></td></tr></table></figure>\n<p>其中<figure class=\"highlight plain\"><figcaption><span>或 --bind ``` 指定项目启动绑定域名和端口，``` -w 或 --workers``` 指定启动几个线程</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 配置参数文件</div><div class=\"line\">touch gunicorn_config.py &amp;&amp; vim gunicorn.py</div><div class=\"line\">```bash</div><div class=\"line\">#!/usr/bin/env python</div><div class=\"line\"># -*- coding: utf-8 -*-</div><div class=\"line\">&apos;&apos;&apos;</div><div class=\"line\">配置信息</div><div class=\"line\">https://github.com/benoitc/gunicorn/blob/master/examples/example_config.py</div><div class=\"line\">&apos;&apos;&apos;</div><div class=\"line\">__author__ = &quot;wxnacy(wxnacy@gmail.com)&quot;</div><div class=\"line\">__copyright__ = &quot;Copyright of wxnacy (2017).&quot;</div><div class=\"line\"></div><div class=\"line\">import multiprocessing</div><div class=\"line\"></div><div class=\"line\">bind = &apos;0.0.0.0:8002&apos; # 绑定地址</div><div class=\"line\">workers =  multiprocessing.cpu_count() * 2 + 1 # 根据cpu数量指定线程数量</div></pre></td></tr></table></figure></p>\n<p>启动<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gunicorn -c gunicorn_config.py run:app</div></pre></td></tr></table></figure></p>\n<p>更多配置:<a href=\"http://docs.gunicorn.org/en/stable/settings.html\" target=\"_blank\" rel=\"external\">http://docs.gunicorn.org/en/stable/settings.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>专辑: <a href=\"/python/2017/08/15/album-build-project\">python 如何构建完整项目</a></p>\n<blockquote>\n<p>虽然python自带服务器服务，但是最多只能用作开发环境调试用，在生产环境中如同玩具一样，一碰就坏，今天给大家介绍使用gunicorn启动python项目</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pip install gunicorn</div></pre></td></tr></table></figure>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gunicorn run:app</div><div class=\"line\"></div><div class=\"line\">[2017-08-15 15:25:28 +0800] [26628] [INFO] Starting gunicorn 19.7.1</div><div class=\"line\">[2017-08-15 15:25:28 +0800] [26628] [INFO] Listening at: http://127.0.0.1:8000 (26628)</div><div class=\"line\">[2017-08-15 15:25:28 +0800] [26628] [INFO] Using worker: sync</div><div class=\"line\">[2017-08-15 15:25:28 +0800] [26631] [INFO] Booting worker with pid: 26631</div></pre></td></tr></table></figure>\n<h2 id=\"配置参数\"><a href=\"#配置参数\" class=\"headerlink\" title=\"配置参数\"></a>配置参数</h2><h3 id=\"命令行参数\"><a href=\"#命令行参数\" class=\"headerlink\" title=\"命令行参数\"></a>命令行参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gunicorn -w 2 -b 0.0.0.0:8000 run:app</div></pre></td></tr></table></figure>\n<p>其中<figure class=\"highlight plain\"><figcaption><span>或 --bind ``` 指定项目启动绑定域名和端口，``` -w 或 --workers``` 指定启动几个线程</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 配置参数文件</div><div class=\"line\">touch gunicorn_config.py &amp;&amp; vim gunicorn.py</div><div class=\"line\">```bash</div><div class=\"line\">#!/usr/bin/env python</div><div class=\"line\"># -*- coding: utf-8 -*-</div><div class=\"line\">&apos;&apos;&apos;</div><div class=\"line\">配置信息</div><div class=\"line\">https://github.com/benoitc/gunicorn/blob/master/examples/example_config.py</div><div class=\"line\">&apos;&apos;&apos;</div><div class=\"line\">__author__ = &quot;wxnacy(wxnacy@gmail.com)&quot;</div><div class=\"line\">__copyright__ = &quot;Copyright of wxnacy (2017).&quot;</div><div class=\"line\"></div><div class=\"line\">import multiprocessing</div><div class=\"line\"></div><div class=\"line\">bind = &apos;0.0.0.0:8002&apos; # 绑定地址</div><div class=\"line\">workers =  multiprocessing.cpu_count() * 2 + 1 # 根据cpu数量指定线程数量</div></pre></td></tr></table></figure></p>\n<p>启动<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gunicorn -c gunicorn_config.py run:app</div></pre></td></tr></table></figure></p>\n<p>更多配置:<a href=\"http://docs.gunicorn.org/en/stable/settings.html\" target=\"_blank\" rel=\"external\">http://docs.gunicorn.org/en/stable/settings.html</a></p>\n"},{"title":"使用 supervisor 管理进程","date":"2017-08-17T16:00:00.000Z","_content":"\n原文:http://liyangliang.me/posts/2015/06/using-supervisor/\n\n> Supervisor (http://supervisord.org) 是一个用 Python 写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，此时可以用 supervisor 同时启动所有应用程序而不是一个一个地敲命令启动。\n\n## 安装\nSupervisor 可以运行在 Linux、Mac OS X 上。如前所述，supervisor 是 Python 编写的，所以安装起来也很方便，可以直接用 pip :\n```bash\nsudo pip install supervisor\n```\n如果是 Ubuntu 系统，还可以使用 apt-get 安装。\n\n## supervisord 配置\n> Supervisor 相当强大，提供了很丰富的功能，不过我们可能只需要用到其中一小部分。安装完成之后，可以编写配置文件，来满足自己的需求。为了方便，我们把配置分成两部分：supervisord（supervisor 是一个 C/S 模型的程序，这是 server 端，对应的有 client 端：supervisorctl）和应用程序（即我们要管理的程序）。\n\n首先来看 supervisord 的配置文件。安装完 supervisor 之后，可以运行echo_supervisord_conf 命令输出默认的配置项，也可以重定向到一个配置文件里：\n```bash\necho_supervisord_conf > /etc/supervisord.conf\n```\n去除里面大部分注释和“不相关”的部分，我们可以先看这些配置：\n```bash\n\n[unix_http_server]\nfile=/tmp/supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用\n;chmod=0700                 ; socket 文件的 mode，默认是 0700\n;chown=nobody:nogroup       ; socket 文件的 owner，格式： uid:gid\n\n;[inet_http_server]         ; HTTP 服务器，提供 web 管理界面\n;port=127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性\n;username=user              ; 登录管理后台的用户名\n;password=123               ; 登录管理后台的密码\n\n[supervisord]\nlogfile=/tmp/supervisord.log ; 日志文件，默认是 $CWD/supervisord.log\nlogfile_maxbytes=50MB        ; 日志文件大小，超出会 rotate，默认 50MB\nlogfile_backups=10           ; 日志文件保留备份数量默认 10\nloglevel=info                ; 日志级别，默认 info，其它: debug,warn,trace\npidfile=/tmp/supervisord.pid ; pid 文件\nnodaemon=false               ; 是否在前台启动，默认是 false，即以 daemon 的方式启动\nminfds=1024                  ; 可以打开的文件描述符的最小值，默认 1024\nminprocs=200                 ; 可以打开的进程数的最小值，默认 200\n\n; the below section must remain in the config file for RPC\n; (supervisorctl/web interface) to work, additional interfaces may be\n; added by defining them in separate rpcinterface: sections\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[supervisorctl]\nserverurl=unix:///tmp/supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致\n;serverurl=http://127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord\n\n; 包含其他的配置文件\n[include]\nfiles = relative/directory/*.ini    ; 可以是 *.conf 或 *.ini\n```\n我们把上面这部分配置保存到 /etc/supervisord.conf（或其他任意有权限访问的文件），然后启动 supervisord（通过 -c 选项指定配置文件路径，如果不指定会按照这个顺序查找配置文件：$CWD/supervisord.conf, $CWD/etc/supervisord.conf, /etc/supervisord.conf）：\n```bash\nsupervisord -c /etc/supervisord.conf\n```\n查看 supervisord 是否在运行：\n```bash\nps aux | grep supervisord\n```\n\n## program 配置\n\n> 上面我们已经把 supervisrod 运行起来了，现在可以添加我们要管理的进程的配置文件。可以把所有配置项都写到 supervisord.conf 文件里，但并不推荐这样做，而是通过 include 的方式把不同的程序（组）写到不同的配置文件里。\n\n为了举例，我们新建一个目录 /etc/supervisor/ 用于存放这些配置文件，相应的，把 /etc/supervisord.conf 里 include 部分的的配置修改一下：\n```bash\n[include]\nfiles = /etc/supervisor/*.conf\n```\n假设有个用 Python 和 Flask 框架编写的用户中心系统，取名 usercenter，用 gunicorn (http://gunicorn.org/) 做 web 服务器。项目代码位于 /home/leon/projects/usercenter，gunicorn 配置文件为 gunicorn.py，WSGI callable 是 wsgi.py 里的 app 属性。所以直接在命令行启动的方式可能是这样的：\n```bash\ncd /home/leon/projects/usercenter\ngunicorn -c gunicorn.py wsgi:app\n```\n现在编写一份配置文件来管理这个进程（需要注意：用 supervisord 管理时，gunicorn 的 daemon 选项需要设置为 False）：\n```bash\n[program:usercenter]\ndirectory = /home/leon/projects/usercenter ; 程序的启动目录\ncommand = gunicorn -c gunicorn.py wsgi:app  ; 启动命令，可以看出与手动在命令行启动的命令是一样的\nautostart = true     ; 在 supervisord 启动的时候也自动启动\nstartsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了\nautorestart = true   ; 程序异常退出后自动重启\nstartretries = 3     ; 启动失败自动重试次数，默认是 3\nuser = leon          ; 用哪个用户启动\nredirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile = /data/logs/usercenter_stdout.log\n\n; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH\n; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere\n```\n一份配置文件至少需要一个 [program:x] 部分的配置，来告诉 supervisord 需要管理那个进程。[program:x] 语法中的 x 表示 program name，会在客户端（supervisorctl 或 web 界面）显示，在 supervisorctl 中通过这个值来对程序进行 start、restart、stop 等操作。\n\n## 使用 supervisorctl\n\n> Supervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定与 supervisord 使用同一份配置文件，否则与 supervisord 一样按照顺序查找配置文件。\n\n```bash\nsupervisorctl -c /etc/supervisord.conf\n```\n上面这个命令会进入 supervisorctl 的 shell 界面，然后可以执行不同的命令了：\n```bash\n> status    # 查看程序状态\n> stop usercenter   # 关闭 usercenter 程序\n> start usercenter  # 启动 usercenter 程序\n> restart usercenter    # 重启 usercenter 程序\n> reread    ＃ 读取有更新（增加）的配置文件，不会启动新添加的程序\n> update    ＃ 重启配置文件修改过的程序\n```\n上面这些命令都有相应的输出，除了进入 supervisorctl 的 shell 界面，也可以直接在 bash 终端运行：\n```bash\n$ supervisorctl status\n$ supervisorctl stop usercenter\n$ supervisorctl start usercenter\n$ supervisorctl restart usercenter\n$ supervisorctl reread\n$ supervisorctl update \n```\n\n## 其它\n\n除了 supervisorctl 之外，还可以配置 supervisrod 启动 web 管理界面，这个 web 后台使用 Basic Auth 的方式进行身份认证。\n\n除了单个进程的控制，还可以配置 group，进行分组管理。\n\n经常查看日志文件，包括 supervisord 的日志和各个 pragram 的日志文件，程序 crash 或抛出异常的信息一半会输出到 stderr，可以查看相应的日志文件来查找问题。\n\nSupervisor 有很丰富的功能，还有其他很多项配置，可以在官方文档获取更多信息：http://supervisord.org/index.html\n\n\n","source":"_posts/python-2017-08-18-basic-supervisor.md","raw":"---\ntitle: 使用 supervisor 管理进程\ndate: 2017-08-18\ntags:\n---\n\n原文:http://liyangliang.me/posts/2015/06/using-supervisor/\n\n> Supervisor (http://supervisord.org) 是一个用 Python 写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，此时可以用 supervisor 同时启动所有应用程序而不是一个一个地敲命令启动。\n\n## 安装\nSupervisor 可以运行在 Linux、Mac OS X 上。如前所述，supervisor 是 Python 编写的，所以安装起来也很方便，可以直接用 pip :\n```bash\nsudo pip install supervisor\n```\n如果是 Ubuntu 系统，还可以使用 apt-get 安装。\n\n## supervisord 配置\n> Supervisor 相当强大，提供了很丰富的功能，不过我们可能只需要用到其中一小部分。安装完成之后，可以编写配置文件，来满足自己的需求。为了方便，我们把配置分成两部分：supervisord（supervisor 是一个 C/S 模型的程序，这是 server 端，对应的有 client 端：supervisorctl）和应用程序（即我们要管理的程序）。\n\n首先来看 supervisord 的配置文件。安装完 supervisor 之后，可以运行echo_supervisord_conf 命令输出默认的配置项，也可以重定向到一个配置文件里：\n```bash\necho_supervisord_conf > /etc/supervisord.conf\n```\n去除里面大部分注释和“不相关”的部分，我们可以先看这些配置：\n```bash\n\n[unix_http_server]\nfile=/tmp/supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用\n;chmod=0700                 ; socket 文件的 mode，默认是 0700\n;chown=nobody:nogroup       ; socket 文件的 owner，格式： uid:gid\n\n;[inet_http_server]         ; HTTP 服务器，提供 web 管理界面\n;port=127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性\n;username=user              ; 登录管理后台的用户名\n;password=123               ; 登录管理后台的密码\n\n[supervisord]\nlogfile=/tmp/supervisord.log ; 日志文件，默认是 $CWD/supervisord.log\nlogfile_maxbytes=50MB        ; 日志文件大小，超出会 rotate，默认 50MB\nlogfile_backups=10           ; 日志文件保留备份数量默认 10\nloglevel=info                ; 日志级别，默认 info，其它: debug,warn,trace\npidfile=/tmp/supervisord.pid ; pid 文件\nnodaemon=false               ; 是否在前台启动，默认是 false，即以 daemon 的方式启动\nminfds=1024                  ; 可以打开的文件描述符的最小值，默认 1024\nminprocs=200                 ; 可以打开的进程数的最小值，默认 200\n\n; the below section must remain in the config file for RPC\n; (supervisorctl/web interface) to work, additional interfaces may be\n; added by defining them in separate rpcinterface: sections\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[supervisorctl]\nserverurl=unix:///tmp/supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致\n;serverurl=http://127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord\n\n; 包含其他的配置文件\n[include]\nfiles = relative/directory/*.ini    ; 可以是 *.conf 或 *.ini\n```\n我们把上面这部分配置保存到 /etc/supervisord.conf（或其他任意有权限访问的文件），然后启动 supervisord（通过 -c 选项指定配置文件路径，如果不指定会按照这个顺序查找配置文件：$CWD/supervisord.conf, $CWD/etc/supervisord.conf, /etc/supervisord.conf）：\n```bash\nsupervisord -c /etc/supervisord.conf\n```\n查看 supervisord 是否在运行：\n```bash\nps aux | grep supervisord\n```\n\n## program 配置\n\n> 上面我们已经把 supervisrod 运行起来了，现在可以添加我们要管理的进程的配置文件。可以把所有配置项都写到 supervisord.conf 文件里，但并不推荐这样做，而是通过 include 的方式把不同的程序（组）写到不同的配置文件里。\n\n为了举例，我们新建一个目录 /etc/supervisor/ 用于存放这些配置文件，相应的，把 /etc/supervisord.conf 里 include 部分的的配置修改一下：\n```bash\n[include]\nfiles = /etc/supervisor/*.conf\n```\n假设有个用 Python 和 Flask 框架编写的用户中心系统，取名 usercenter，用 gunicorn (http://gunicorn.org/) 做 web 服务器。项目代码位于 /home/leon/projects/usercenter，gunicorn 配置文件为 gunicorn.py，WSGI callable 是 wsgi.py 里的 app 属性。所以直接在命令行启动的方式可能是这样的：\n```bash\ncd /home/leon/projects/usercenter\ngunicorn -c gunicorn.py wsgi:app\n```\n现在编写一份配置文件来管理这个进程（需要注意：用 supervisord 管理时，gunicorn 的 daemon 选项需要设置为 False）：\n```bash\n[program:usercenter]\ndirectory = /home/leon/projects/usercenter ; 程序的启动目录\ncommand = gunicorn -c gunicorn.py wsgi:app  ; 启动命令，可以看出与手动在命令行启动的命令是一样的\nautostart = true     ; 在 supervisord 启动的时候也自动启动\nstartsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了\nautorestart = true   ; 程序异常退出后自动重启\nstartretries = 3     ; 启动失败自动重试次数，默认是 3\nuser = leon          ; 用哪个用户启动\nredirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile = /data/logs/usercenter_stdout.log\n\n; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH\n; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere\n```\n一份配置文件至少需要一个 [program:x] 部分的配置，来告诉 supervisord 需要管理那个进程。[program:x] 语法中的 x 表示 program name，会在客户端（supervisorctl 或 web 界面）显示，在 supervisorctl 中通过这个值来对程序进行 start、restart、stop 等操作。\n\n## 使用 supervisorctl\n\n> Supervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定与 supervisord 使用同一份配置文件，否则与 supervisord 一样按照顺序查找配置文件。\n\n```bash\nsupervisorctl -c /etc/supervisord.conf\n```\n上面这个命令会进入 supervisorctl 的 shell 界面，然后可以执行不同的命令了：\n```bash\n> status    # 查看程序状态\n> stop usercenter   # 关闭 usercenter 程序\n> start usercenter  # 启动 usercenter 程序\n> restart usercenter    # 重启 usercenter 程序\n> reread    ＃ 读取有更新（增加）的配置文件，不会启动新添加的程序\n> update    ＃ 重启配置文件修改过的程序\n```\n上面这些命令都有相应的输出，除了进入 supervisorctl 的 shell 界面，也可以直接在 bash 终端运行：\n```bash\n$ supervisorctl status\n$ supervisorctl stop usercenter\n$ supervisorctl start usercenter\n$ supervisorctl restart usercenter\n$ supervisorctl reread\n$ supervisorctl update \n```\n\n## 其它\n\n除了 supervisorctl 之外，还可以配置 supervisrod 启动 web 管理界面，这个 web 后台使用 Basic Auth 的方式进行身份认证。\n\n除了单个进程的控制，还可以配置 group，进行分组管理。\n\n经常查看日志文件，包括 supervisord 的日志和各个 pragram 的日志文件，程序 crash 或抛出异常的信息一半会输出到 stderr，可以查看相应的日志文件来查找问题。\n\nSupervisor 有很丰富的功能，还有其他很多项配置，可以在官方文档获取更多信息：http://supervisord.org/index.html\n\n\n","slug":"python-2017-08-18-basic-supervisor","published":1,"updated":"2017-09-15T23:32:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9h001ckjxv9e28n83w","content":"<p>原文:<a href=\"http://liyangliang.me/posts/2015/06/using-supervisor/\" target=\"_blank\" rel=\"external\">http://liyangliang.me/posts/2015/06/using-supervisor/</a></p>\n<blockquote>\n<p>Supervisor (<a href=\"http://supervisord.org\" target=\"_blank\" rel=\"external\">http://supervisord.org</a>) 是一个用 Python 写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，此时可以用 supervisor 同时启动所有应用程序而不是一个一个地敲命令启动。</p>\n</blockquote>\n<h2><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\"></a></h2><p>Supervisor 可以运行在 Linux、Mac OS X 上。如前所述，supervisor 是 Python 编写的，所以安装起来也很方便，可以直接用 pip :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install supervisor</div></pre></td></tr></table></figure></p>\n<p>如果是 Ubuntu 系统，还可以使用 apt-get 安装。</p>\n<h2><span id=\"supervisord-pei-zhi\">supervisord 配置</span><a href=\"#supervisord-pei-zhi\" class=\"header-anchor\"></a></h2><blockquote>\n<p>Supervisor 相当强大，提供了很丰富的功能，不过我们可能只需要用到其中一小部分。安装完成之后，可以编写配置文件，来满足自己的需求。为了方便，我们把配置分成两部分：supervisord（supervisor 是一个 C/S 模型的程序，这是 server 端，对应的有 client 端：supervisorctl）和应用程序（即我们要管理的程序）。</p>\n</blockquote>\n<p>首先来看 supervisord 的配置文件。安装完 supervisor 之后，可以运行echo_supervisord_conf 命令输出默认的配置项，也可以重定向到一个配置文件里：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo_supervisord_conf &gt; /etc/supervisord.conf</div></pre></td></tr></table></figure></p>\n<p>去除里面大部分注释和“不相关”的部分，我们可以先看这些配置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">[unix_http_server]</div><div class=\"line\">file=/tmp/supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用</div><div class=\"line\">;chmod=0700                 ; socket 文件的 mode，默认是 0700</div><div class=\"line\">;chown=nobody:nogroup       ; socket 文件的 owner，格式： uid:gid</div><div class=\"line\"></div><div class=\"line\">;[inet_http_server]         ; HTTP 服务器，提供 web 管理界面</div><div class=\"line\">;port=127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性</div><div class=\"line\">;username=user              ; 登录管理后台的用户名</div><div class=\"line\">;password=123               ; 登录管理后台的密码</div><div class=\"line\"></div><div class=\"line\">[supervisord]</div><div class=\"line\">logfile=/tmp/supervisord.log ; 日志文件，默认是 <span class=\"variable\">$CWD</span>/supervisord.log</div><div class=\"line\">logfile_maxbytes=50MB        ; 日志文件大小，超出会 rotate，默认 50MB</div><div class=\"line\">logfile_backups=10           ; 日志文件保留备份数量默认 10</div><div class=\"line\">loglevel=info                ; 日志级别，默认 info，其它: debug,warn,trace</div><div class=\"line\">pidfile=/tmp/supervisord.pid ; pid 文件</div><div class=\"line\">nodaemon=<span class=\"literal\">false</span>               ; 是否在前台启动，默认是 <span class=\"literal\">false</span>，即以 daemon 的方式启动</div><div class=\"line\">minfds=1024                  ; 可以打开的文件描述符的最小值，默认 1024</div><div class=\"line\">minprocs=200                 ; 可以打开的进程数的最小值，默认 200</div><div class=\"line\"></div><div class=\"line\">; the below section must remain <span class=\"keyword\">in</span> the config file <span class=\"keyword\">for</span> RPC</div><div class=\"line\">; (supervisorctl/web interface) to work, additional interfaces may be</div><div class=\"line\">; added by defining them <span class=\"keyword\">in</span> separate rpcinterface: sections</div><div class=\"line\">[rpcinterface:supervisor]</div><div class=\"line\">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</div><div class=\"line\"></div><div class=\"line\">[supervisorctl]</div><div class=\"line\">serverurl=unix:///tmp/supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致</div><div class=\"line\">;serverurl=http://127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord</div><div class=\"line\"></div><div class=\"line\">; 包含其他的配置文件</div><div class=\"line\">[include]</div><div class=\"line\">files = relative/directory/*.ini    ; 可以是 *.conf 或 *.ini</div></pre></td></tr></table></figure></p>\n<p>我们把上面这部分配置保存到 /etc/supervisord.conf（或其他任意有权限访问的文件），然后启动 supervisord（通过 -c 选项指定配置文件路径，如果不指定会按照这个顺序查找配置文件：$CWD/supervisord.conf, $CWD/etc/supervisord.conf, /etc/supervisord.conf）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">supervisord -c /etc/supervisord.conf</div></pre></td></tr></table></figure></p>\n<p>查看 supervisord 是否在运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps aux | grep supervisord</div></pre></td></tr></table></figure></p>\n<h2><span id=\"program-pei-zhi\">program 配置</span><a href=\"#program-pei-zhi\" class=\"header-anchor\"></a></h2><blockquote>\n<p>上面我们已经把 supervisrod 运行起来了，现在可以添加我们要管理的进程的配置文件。可以把所有配置项都写到 supervisord.conf 文件里，但并不推荐这样做，而是通过 include 的方式把不同的程序（组）写到不同的配置文件里。</p>\n</blockquote>\n<p>为了举例，我们新建一个目录 /etc/supervisor/ 用于存放这些配置文件，相应的，把 /etc/supervisord.conf 里 include 部分的的配置修改一下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[include]</div><div class=\"line\">files = /etc/supervisor/*.conf</div></pre></td></tr></table></figure></p>\n<p>假设有个用 Python 和 Flask 框架编写的用户中心系统，取名 usercenter，用 gunicorn (<a href=\"http://gunicorn.org/\" target=\"_blank\" rel=\"external\">http://gunicorn.org/</a>) 做 web 服务器。项目代码位于 /home/leon/projects/usercenter，gunicorn 配置文件为 gunicorn.py，WSGI callable 是 wsgi.py 里的 app 属性。所以直接在命令行启动的方式可能是这样的：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /home/leon/projects/usercenter</div><div class=\"line\">gunicorn -c gunicorn.py wsgi:app</div></pre></td></tr></table></figure></p>\n<p>现在编写一份配置文件来管理这个进程（需要注意：用 supervisord 管理时，gunicorn 的 daemon 选项需要设置为 False）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">[program:usercenter]</div><div class=\"line\">directory = /home/leon/projects/usercenter ; 程序的启动目录</div><div class=\"line\"><span class=\"built_in\">command</span> = gunicorn -c gunicorn.py wsgi:app  ; 启动命令，可以看出与手动在命令行启动的命令是一样的</div><div class=\"line\">autostart = <span class=\"literal\">true</span>     ; 在 supervisord 启动的时候也自动启动</div><div class=\"line\">startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了</div><div class=\"line\">autorestart = <span class=\"literal\">true</span>   ; 程序异常退出后自动重启</div><div class=\"line\">startretries = 3     ; 启动失败自动重试次数，默认是 3</div><div class=\"line\">user = leon          ; 用哪个用户启动</div><div class=\"line\">redirect_stderr = <span class=\"literal\">true</span>  ; 把 stderr 重定向到 stdout，默认 <span class=\"literal\">false</span></div><div class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</div><div class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</div><div class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</div><div class=\"line\">stdout_logfile = /data/logs/usercenter_stdout.log</div><div class=\"line\"></div><div class=\"line\">; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH</div><div class=\"line\">; environment=PYTHONPATH=<span class=\"variable\">$PYTHONPATH</span>:/path/to/somewhere</div></pre></td></tr></table></figure></p>\n<p>一份配置文件至少需要一个 [program:x] 部分的配置，来告诉 supervisord 需要管理那个进程。[program:x] 语法中的 x 表示 program name，会在客户端（supervisorctl 或 web 界面）显示，在 supervisorctl 中通过这个值来对程序进行 start、restart、stop 等操作。</p>\n<h2><span id=\"shi-yong-supervisorctl\">使用 supervisorctl</span><a href=\"#shi-yong-supervisorctl\" class=\"header-anchor\"></a></h2><blockquote>\n<p>Supervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定与 supervisord 使用同一份配置文件，否则与 supervisord 一样按照顺序查找配置文件。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">supervisorctl -c /etc/supervisord.conf</div></pre></td></tr></table></figure>\n<p>上面这个命令会进入 supervisorctl 的 shell 界面，然后可以执行不同的命令了：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; status    <span class=\"comment\"># 查看程序状态</span></div><div class=\"line\">&gt; stop usercenter   <span class=\"comment\"># 关闭 usercenter 程序</span></div><div class=\"line\">&gt; start usercenter  <span class=\"comment\"># 启动 usercenter 程序</span></div><div class=\"line\">&gt; restart usercenter    <span class=\"comment\"># 重启 usercenter 程序</span></div><div class=\"line\">&gt; reread    ＃ 读取有更新（增加）的配置文件，不会启动新添加的程序</div><div class=\"line\">&gt; update    ＃ 重启配置文件修改过的程序</div></pre></td></tr></table></figure></p>\n<p>上面这些命令都有相应的输出，除了进入 supervisorctl 的 shell 界面，也可以直接在 bash 终端运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ supervisorctl status</div><div class=\"line\">$ supervisorctl stop usercenter</div><div class=\"line\">$ supervisorctl start usercenter</div><div class=\"line\">$ supervisorctl restart usercenter</div><div class=\"line\">$ supervisorctl reread</div><div class=\"line\">$ supervisorctl update</div></pre></td></tr></table></figure></p>\n<h2><span id=\"qi-ta\">其它</span><a href=\"#qi-ta\" class=\"header-anchor\"></a></h2><p>除了 supervisorctl 之外，还可以配置 supervisrod 启动 web 管理界面，这个 web 后台使用 Basic Auth 的方式进行身份认证。</p>\n<p>除了单个进程的控制，还可以配置 group，进行分组管理。</p>\n<p>经常查看日志文件，包括 supervisord 的日志和各个 pragram 的日志文件，程序 crash 或抛出异常的信息一半会输出到 stderr，可以查看相应的日志文件来查找问题。</p>\n<p>Supervisor 有很丰富的功能，还有其他很多项配置，可以在官方文档获取更多信息：<a href=\"http://supervisord.org/index.html\" target=\"_blank\" rel=\"external\">http://supervisord.org/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文:<a href=\"http://liyangliang.me/posts/2015/06/using-supervisor/\" target=\"_blank\" rel=\"external\">http://liyangliang.me/posts/2015/06/using-supervisor/</a></p>\n<blockquote>\n<p>Supervisor (<a href=\"http://supervisord.org\" target=\"_blank\" rel=\"external\">http://supervisord.org</a>) 是一个用 Python 写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，此时可以用 supervisor 同时启动所有应用程序而不是一个一个地敲命令启动。</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>Supervisor 可以运行在 Linux、Mac OS X 上。如前所述，supervisor 是 Python 编写的，所以安装起来也很方便，可以直接用 pip :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip install supervisor</div></pre></td></tr></table></figure></p>\n<p>如果是 Ubuntu 系统，还可以使用 apt-get 安装。</p>\n<h2 id=\"supervisord-配置\"><a href=\"#supervisord-配置\" class=\"headerlink\" title=\"supervisord 配置\"></a>supervisord 配置</h2><blockquote>\n<p>Supervisor 相当强大，提供了很丰富的功能，不过我们可能只需要用到其中一小部分。安装完成之后，可以编写配置文件，来满足自己的需求。为了方便，我们把配置分成两部分：supervisord（supervisor 是一个 C/S 模型的程序，这是 server 端，对应的有 client 端：supervisorctl）和应用程序（即我们要管理的程序）。</p>\n</blockquote>\n<p>首先来看 supervisord 的配置文件。安装完 supervisor 之后，可以运行echo_supervisord_conf 命令输出默认的配置项，也可以重定向到一个配置文件里：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo_supervisord_conf &gt; /etc/supervisord.conf</div></pre></td></tr></table></figure></p>\n<p>去除里面大部分注释和“不相关”的部分，我们可以先看这些配置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">[unix_http_server]</div><div class=\"line\">file=/tmp/supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用</div><div class=\"line\">;chmod=0700                 ; socket 文件的 mode，默认是 0700</div><div class=\"line\">;chown=nobody:nogroup       ; socket 文件的 owner，格式： uid:gid</div><div class=\"line\"></div><div class=\"line\">;[inet_http_server]         ; HTTP 服务器，提供 web 管理界面</div><div class=\"line\">;port=127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性</div><div class=\"line\">;username=user              ; 登录管理后台的用户名</div><div class=\"line\">;password=123               ; 登录管理后台的密码</div><div class=\"line\"></div><div class=\"line\">[supervisord]</div><div class=\"line\">logfile=/tmp/supervisord.log ; 日志文件，默认是 <span class=\"variable\">$CWD</span>/supervisord.log</div><div class=\"line\">logfile_maxbytes=50MB        ; 日志文件大小，超出会 rotate，默认 50MB</div><div class=\"line\">logfile_backups=10           ; 日志文件保留备份数量默认 10</div><div class=\"line\">loglevel=info                ; 日志级别，默认 info，其它: debug,warn,trace</div><div class=\"line\">pidfile=/tmp/supervisord.pid ; pid 文件</div><div class=\"line\">nodaemon=<span class=\"literal\">false</span>               ; 是否在前台启动，默认是 <span class=\"literal\">false</span>，即以 daemon 的方式启动</div><div class=\"line\">minfds=1024                  ; 可以打开的文件描述符的最小值，默认 1024</div><div class=\"line\">minprocs=200                 ; 可以打开的进程数的最小值，默认 200</div><div class=\"line\"></div><div class=\"line\">; the below section must remain <span class=\"keyword\">in</span> the config file <span class=\"keyword\">for</span> RPC</div><div class=\"line\">; (supervisorctl/web interface) to work, additional interfaces may be</div><div class=\"line\">; added by defining them <span class=\"keyword\">in</span> separate rpcinterface: sections</div><div class=\"line\">[rpcinterface:supervisor]</div><div class=\"line\">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</div><div class=\"line\"></div><div class=\"line\">[supervisorctl]</div><div class=\"line\">serverurl=unix:///tmp/supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致</div><div class=\"line\">;serverurl=http://127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord</div><div class=\"line\"></div><div class=\"line\">; 包含其他的配置文件</div><div class=\"line\">[include]</div><div class=\"line\">files = relative/directory/*.ini    ; 可以是 *.conf 或 *.ini</div></pre></td></tr></table></figure></p>\n<p>我们把上面这部分配置保存到 /etc/supervisord.conf（或其他任意有权限访问的文件），然后启动 supervisord（通过 -c 选项指定配置文件路径，如果不指定会按照这个顺序查找配置文件：$CWD/supervisord.conf, $CWD/etc/supervisord.conf, /etc/supervisord.conf）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">supervisord -c /etc/supervisord.conf</div></pre></td></tr></table></figure></p>\n<p>查看 supervisord 是否在运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps aux | grep supervisord</div></pre></td></tr></table></figure></p>\n<h2 id=\"program-配置\"><a href=\"#program-配置\" class=\"headerlink\" title=\"program 配置\"></a>program 配置</h2><blockquote>\n<p>上面我们已经把 supervisrod 运行起来了，现在可以添加我们要管理的进程的配置文件。可以把所有配置项都写到 supervisord.conf 文件里，但并不推荐这样做，而是通过 include 的方式把不同的程序（组）写到不同的配置文件里。</p>\n</blockquote>\n<p>为了举例，我们新建一个目录 /etc/supervisor/ 用于存放这些配置文件，相应的，把 /etc/supervisord.conf 里 include 部分的的配置修改一下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[include]</div><div class=\"line\">files = /etc/supervisor/*.conf</div></pre></td></tr></table></figure></p>\n<p>假设有个用 Python 和 Flask 框架编写的用户中心系统，取名 usercenter，用 gunicorn (<a href=\"http://gunicorn.org/\" target=\"_blank\" rel=\"external\">http://gunicorn.org/</a>) 做 web 服务器。项目代码位于 /home/leon/projects/usercenter，gunicorn 配置文件为 gunicorn.py，WSGI callable 是 wsgi.py 里的 app 属性。所以直接在命令行启动的方式可能是这样的：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /home/leon/projects/usercenter</div><div class=\"line\">gunicorn -c gunicorn.py wsgi:app</div></pre></td></tr></table></figure></p>\n<p>现在编写一份配置文件来管理这个进程（需要注意：用 supervisord 管理时，gunicorn 的 daemon 选项需要设置为 False）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">[program:usercenter]</div><div class=\"line\">directory = /home/leon/projects/usercenter ; 程序的启动目录</div><div class=\"line\"><span class=\"built_in\">command</span> = gunicorn -c gunicorn.py wsgi:app  ; 启动命令，可以看出与手动在命令行启动的命令是一样的</div><div class=\"line\">autostart = <span class=\"literal\">true</span>     ; 在 supervisord 启动的时候也自动启动</div><div class=\"line\">startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了</div><div class=\"line\">autorestart = <span class=\"literal\">true</span>   ; 程序异常退出后自动重启</div><div class=\"line\">startretries = 3     ; 启动失败自动重试次数，默认是 3</div><div class=\"line\">user = leon          ; 用哪个用户启动</div><div class=\"line\">redirect_stderr = <span class=\"literal\">true</span>  ; 把 stderr 重定向到 stdout，默认 <span class=\"literal\">false</span></div><div class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</div><div class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</div><div class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</div><div class=\"line\">stdout_logfile = /data/logs/usercenter_stdout.log</div><div class=\"line\"></div><div class=\"line\">; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH</div><div class=\"line\">; environment=PYTHONPATH=<span class=\"variable\">$PYTHONPATH</span>:/path/to/somewhere</div></pre></td></tr></table></figure></p>\n<p>一份配置文件至少需要一个 [program:x] 部分的配置，来告诉 supervisord 需要管理那个进程。[program:x] 语法中的 x 表示 program name，会在客户端（supervisorctl 或 web 界面）显示，在 supervisorctl 中通过这个值来对程序进行 start、restart、stop 等操作。</p>\n<h2 id=\"使用-supervisorctl\"><a href=\"#使用-supervisorctl\" class=\"headerlink\" title=\"使用 supervisorctl\"></a>使用 supervisorctl</h2><blockquote>\n<p>Supervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定与 supervisord 使用同一份配置文件，否则与 supervisord 一样按照顺序查找配置文件。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">supervisorctl -c /etc/supervisord.conf</div></pre></td></tr></table></figure>\n<p>上面这个命令会进入 supervisorctl 的 shell 界面，然后可以执行不同的命令了：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; status    <span class=\"comment\"># 查看程序状态</span></div><div class=\"line\">&gt; stop usercenter   <span class=\"comment\"># 关闭 usercenter 程序</span></div><div class=\"line\">&gt; start usercenter  <span class=\"comment\"># 启动 usercenter 程序</span></div><div class=\"line\">&gt; restart usercenter    <span class=\"comment\"># 重启 usercenter 程序</span></div><div class=\"line\">&gt; reread    ＃ 读取有更新（增加）的配置文件，不会启动新添加的程序</div><div class=\"line\">&gt; update    ＃ 重启配置文件修改过的程序</div></pre></td></tr></table></figure></p>\n<p>上面这些命令都有相应的输出，除了进入 supervisorctl 的 shell 界面，也可以直接在 bash 终端运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ supervisorctl status</div><div class=\"line\">$ supervisorctl stop usercenter</div><div class=\"line\">$ supervisorctl start usercenter</div><div class=\"line\">$ supervisorctl restart usercenter</div><div class=\"line\">$ supervisorctl reread</div><div class=\"line\">$ supervisorctl update</div></pre></td></tr></table></figure></p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>除了 supervisorctl 之外，还可以配置 supervisrod 启动 web 管理界面，这个 web 后台使用 Basic Auth 的方式进行身份认证。</p>\n<p>除了单个进程的控制，还可以配置 group，进行分组管理。</p>\n<p>经常查看日志文件，包括 supervisord 的日志和各个 pragram 的日志文件，程序 crash 或抛出异常的信息一半会输出到 stderr，可以查看相应的日志文件来查找问题。</p>\n<p>Supervisor 有很丰富的功能，还有其他很多项配置，可以在官方文档获取更多信息：<a href=\"http://supervisord.org/index.html\" target=\"_blank\" rel=\"external\">http://supervisord.org/index.html</a></p>\n"},{"title":"linux 执行pip：command not found","date":"2017-08-17T16:00:00.000Z","_content":"\n\n```bash\neasy_install pip\n```","source":"_posts/python-2017-08-18-pip_not_found.md","raw":"---\ntitle: linux 执行pip：command not found\ndate: 2017-08-18\ntags:\n---\n\n\n```bash\neasy_install pip\n```","slug":"python-2017-08-18-pip-not-found","published":1,"updated":"2017-09-15T23:32:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9i001dkjxvl0ptpbcd","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">easy_install pip</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">easy_install pip</div></pre></td></tr></table></figure>"},{"title":"python 使用pigar管理requirements.txt","date":"2017-08-18T16:00:00.000Z","_content":"\n\n> 在查看别人的项目时，经常会看到一个requirements.txt文件，里面记录了当前程序的所有依赖包及其精确版本号。类似于java框架管理maven中pom.xml文件或者nodejs中package.json文件\n\npip可以生成和安装 requirements.txt\n\n```bash\npip freeze > requirements.txt # 生成\npip install -r requirements.txt # 安装requirements.txt中依赖包\n```\n\n通过pip生成requirements.txt可以用，但是打开requirements.txt我们会发现，当前python环境下依赖包会全部写到文件中,这时候我们需要另一个工具来真正管理项目中需要的依赖\n\n## pigar\n项目地址:https://github.com/damnever/pigar\n### 安装\n\n```bash\npip install pigar\n```\n### 运行\n进入项目根目录并执行pigar\n```bash\n$ cd project_path\n$ pigar\n\nStarting generate requirements ...\nWriting requirements to \"/root/myproject/requirements.txt\"\nRequirements file has been covered, no difference.\nGenerate requirements done!\n```\n出现如上则为成功，此时查看requirements.txt 会发现，pigar不止记录了依赖和版本，还把在代码中依赖具体出现的位置标了出来\n\n```bash\n# Requirements automatically generated by pigar.\n# https://github.com/Damnever/pigar\n\n# run.py: 3\nFlask == 0.12.2\n```\n\n在大型项目中执行pigar时会出现如下提示：\n```bash\nStarting generate requirements ...\nThe following modules are not found yet:\n  app referenced from:\n    app/common/base.py: 8,9,10,11\n    app/common/decorator.py: 16\n    app/common/elasticsearch.py: 7\n    app/common/markdown.py: 7,8\n    app/common/third/wx.py: 8,9,10\n    app/config.py: 7\n    app/local_config.py: 7\n    app/models.py: 7,8,9\n    app/run.py: 7,8,9,10\n    app/views/index.py: 7,8,9,10\n    run.py: 7,8,9,10,11\n    test/test_article.py: 7\n  oss2 referenced from:\n    app/common/aliyun.py: 7\n    app/common/qiniu.py: 7\nSome of them may not install in local environment.\n\nTry to search PyPI for the missing modules and filter some unnecessary modules? (y/[N]) \n\n```\npigar会提示你本地找不到一些依赖，询问你是否下载，这时候你要看清楚他提示的是需要下载的依赖，还是你写在项目中的module，如果不需要下载输入n继续即可。\n\n### Usage\n\n```bash\n\nusage: pigar [-h] [-v] [-u] [-s NAME [NAME ...]] [-c [PATH]] [-l LOG_LEVEL]\n             [-i DIR [DIR ...]] [-p SAVE_PATH] [-P PROJECT_PATH]\n\nPython requirements tool -- pigar, it will do only one thing at each time.\nDefault action is generate requirements.txt in current directory.\n\noptional arguments:\n  -h, --help          show this help message and exit\n  -v, --version       show pigar version information and exit\n  -u, --update        update database, use it when pigar failed you, exit when\n                      action done\n  -s NAME [NAME ...]  search package name by import name, use it if you do not\n                      know import name come from which package, exit when\n                      action done\n  -c [PATH]           check requirements for the latest version. If file path\n                      not given, search *requirements.txt in current\n                      directory, if not found, generate file requirements.txt,\n                      exit when action done\n  -l LOG_LEVEL        show given level log messages, argument can be (ERROR,\n                      WARNING, INFO), case-insensitive\n  -i DIR [DIR ...]    given a list of directory to ignore, relative directory,\n                      *used for* -c and default action\n  -p SAVE_PATH        save requirements in given file path, *used for* default\n                      action\n  -P PROJECT_PATH     project path, which is directory, *used for* default\n                      action\n```\n","source":"_posts/python-2017-08-19-pigar.md","raw":"---\ntitle: python 使用pigar管理requirements.txt\ndate: 2017-08-19\ntags:\n---\n\n\n> 在查看别人的项目时，经常会看到一个requirements.txt文件，里面记录了当前程序的所有依赖包及其精确版本号。类似于java框架管理maven中pom.xml文件或者nodejs中package.json文件\n\npip可以生成和安装 requirements.txt\n\n```bash\npip freeze > requirements.txt # 生成\npip install -r requirements.txt # 安装requirements.txt中依赖包\n```\n\n通过pip生成requirements.txt可以用，但是打开requirements.txt我们会发现，当前python环境下依赖包会全部写到文件中,这时候我们需要另一个工具来真正管理项目中需要的依赖\n\n## pigar\n项目地址:https://github.com/damnever/pigar\n### 安装\n\n```bash\npip install pigar\n```\n### 运行\n进入项目根目录并执行pigar\n```bash\n$ cd project_path\n$ pigar\n\nStarting generate requirements ...\nWriting requirements to \"/root/myproject/requirements.txt\"\nRequirements file has been covered, no difference.\nGenerate requirements done!\n```\n出现如上则为成功，此时查看requirements.txt 会发现，pigar不止记录了依赖和版本，还把在代码中依赖具体出现的位置标了出来\n\n```bash\n# Requirements automatically generated by pigar.\n# https://github.com/Damnever/pigar\n\n# run.py: 3\nFlask == 0.12.2\n```\n\n在大型项目中执行pigar时会出现如下提示：\n```bash\nStarting generate requirements ...\nThe following modules are not found yet:\n  app referenced from:\n    app/common/base.py: 8,9,10,11\n    app/common/decorator.py: 16\n    app/common/elasticsearch.py: 7\n    app/common/markdown.py: 7,8\n    app/common/third/wx.py: 8,9,10\n    app/config.py: 7\n    app/local_config.py: 7\n    app/models.py: 7,8,9\n    app/run.py: 7,8,9,10\n    app/views/index.py: 7,8,9,10\n    run.py: 7,8,9,10,11\n    test/test_article.py: 7\n  oss2 referenced from:\n    app/common/aliyun.py: 7\n    app/common/qiniu.py: 7\nSome of them may not install in local environment.\n\nTry to search PyPI for the missing modules and filter some unnecessary modules? (y/[N]) \n\n```\npigar会提示你本地找不到一些依赖，询问你是否下载，这时候你要看清楚他提示的是需要下载的依赖，还是你写在项目中的module，如果不需要下载输入n继续即可。\n\n### Usage\n\n```bash\n\nusage: pigar [-h] [-v] [-u] [-s NAME [NAME ...]] [-c [PATH]] [-l LOG_LEVEL]\n             [-i DIR [DIR ...]] [-p SAVE_PATH] [-P PROJECT_PATH]\n\nPython requirements tool -- pigar, it will do only one thing at each time.\nDefault action is generate requirements.txt in current directory.\n\noptional arguments:\n  -h, --help          show this help message and exit\n  -v, --version       show pigar version information and exit\n  -u, --update        update database, use it when pigar failed you, exit when\n                      action done\n  -s NAME [NAME ...]  search package name by import name, use it if you do not\n                      know import name come from which package, exit when\n                      action done\n  -c [PATH]           check requirements for the latest version. If file path\n                      not given, search *requirements.txt in current\n                      directory, if not found, generate file requirements.txt,\n                      exit when action done\n  -l LOG_LEVEL        show given level log messages, argument can be (ERROR,\n                      WARNING, INFO), case-insensitive\n  -i DIR [DIR ...]    given a list of directory to ignore, relative directory,\n                      *used for* -c and default action\n  -p SAVE_PATH        save requirements in given file path, *used for* default\n                      action\n  -P PROJECT_PATH     project path, which is directory, *used for* default\n                      action\n```\n","slug":"python-2017-08-19-pigar","published":1,"updated":"2017-09-15T23:33:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9i001ekjxvykc9u26i","content":"<blockquote>\n<p>在查看别人的项目时，经常会看到一个requirements.txt文件，里面记录了当前程序的所有依赖包及其精确版本号。类似于java框架管理maven中pom.xml文件或者nodejs中package.json文件</p>\n</blockquote>\n<p>pip可以生成和安装 requirements.txt</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip freeze &gt; requirements.txt <span class=\"comment\"># 生成</span></div><div class=\"line\">pip install -r requirements.txt <span class=\"comment\"># 安装requirements.txt中依赖包</span></div></pre></td></tr></table></figure>\n<p>通过pip生成requirements.txt可以用，但是打开requirements.txt我们会发现，当前python环境下依赖包会全部写到文件中,这时候我们需要另一个工具来真正管理项目中需要的依赖</p>\n<h2><span id=\"pigar\">pigar</span><a href=\"#pigar\" class=\"header-anchor\"></a></h2><p>项目地址:<a href=\"https://github.com/damnever/pigar\" target=\"_blank\" rel=\"external\">https://github.com/damnever/pigar</a></p>\n<h3><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install pigar</div></pre></td></tr></table></figure>\n<h3><span id=\"yun-xing\">运行</span><a href=\"#yun-xing\" class=\"header-anchor\"></a></h3><p>进入项目根目录并执行pigar<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> project_path</div><div class=\"line\">$ pigar</div><div class=\"line\"></div><div class=\"line\">Starting generate requirements ...</div><div class=\"line\">Writing requirements to <span class=\"string\">\"/root/myproject/requirements.txt\"</span></div><div class=\"line\">Requirements file has been covered, no difference.</div><div class=\"line\">Generate requirements <span class=\"keyword\">done</span>!</div></pre></td></tr></table></figure></p>\n<p>出现如上则为成功，此时查看requirements.txt 会发现，pigar不止记录了依赖和版本，还把在代码中依赖具体出现的位置标了出来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Requirements automatically generated by pigar.</span></div><div class=\"line\"><span class=\"comment\"># https://github.com/Damnever/pigar</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># run.py: 3</span></div><div class=\"line\">Flask == 0.12.2</div></pre></td></tr></table></figure>\n<p>在大型项目中执行pigar时会出现如下提示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">Starting generate requirements ...</div><div class=\"line\">The following modules are not found yet:</div><div class=\"line\">  app referenced from:</div><div class=\"line\">    app/common/base.py: 8,9,10,11</div><div class=\"line\">    app/common/decorator.py: 16</div><div class=\"line\">    app/common/elasticsearch.py: 7</div><div class=\"line\">    app/common/markdown.py: 7,8</div><div class=\"line\">    app/common/third/wx.py: 8,9,10</div><div class=\"line\">    app/config.py: 7</div><div class=\"line\">    app/local_config.py: 7</div><div class=\"line\">    app/models.py: 7,8,9</div><div class=\"line\">    app/run.py: 7,8,9,10</div><div class=\"line\">    app/views/index.py: 7,8,9,10</div><div class=\"line\">    run.py: 7,8,9,10,11</div><div class=\"line\">    <span class=\"built_in\">test</span>/test_article.py: 7</div><div class=\"line\">  oss2 referenced from:</div><div class=\"line\">    app/common/aliyun.py: 7</div><div class=\"line\">    app/common/qiniu.py: 7</div><div class=\"line\">Some of them may not install <span class=\"keyword\">in</span> <span class=\"built_in\">local</span> environment.</div><div class=\"line\"></div><div class=\"line\">Try to search PyPI <span class=\"keyword\">for</span> the missing modules and filter some unnecessary modules? (y/[N])</div></pre></td></tr></table></figure></p>\n<p>pigar会提示你本地找不到一些依赖，询问你是否下载，这时候你要看清楚他提示的是需要下载的依赖，还是你写在项目中的module，如果不需要下载输入n继续即可。</p>\n<h3><span id=\"usage\">Usage</span><a href=\"#usage\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">usage: pigar [-h] [-v] [-u] [-s NAME [NAME ...]] [-c [PATH]] [-l LOG_LEVEL]</div><div class=\"line\">             [-i DIR [DIR ...]] [-p SAVE_PATH] [-P PROJECT_PATH]</div><div class=\"line\"></div><div class=\"line\">Python requirements tool -- pigar, it will <span class=\"keyword\">do</span> only one thing at each time.</div><div class=\"line\">Default action is generate requirements.txt <span class=\"keyword\">in</span> current directory.</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --<span class=\"built_in\">help</span>          show this <span class=\"built_in\">help</span> message and <span class=\"built_in\">exit</span></div><div class=\"line\">  -v, --version       show pigar version information and <span class=\"built_in\">exit</span></div><div class=\"line\">  -u, --update        update database, use it when pigar failed you, <span class=\"built_in\">exit</span> when</div><div class=\"line\">                      action <span class=\"keyword\">done</span></div><div class=\"line\">  -s NAME [NAME ...]  search package name by import name, use it <span class=\"keyword\">if</span> you <span class=\"keyword\">do</span> not</div><div class=\"line\">                      know import name come from <span class=\"built_in\">which</span> package, <span class=\"built_in\">exit</span> when</div><div class=\"line\">                      action <span class=\"keyword\">done</span></div><div class=\"line\">  -c [PATH]           check requirements <span class=\"keyword\">for</span> the latest version. If file path</div><div class=\"line\">                      not given, search *requirements.txt <span class=\"keyword\">in</span> current</div><div class=\"line\">                      directory, <span class=\"keyword\">if</span> not found, generate file requirements.txt,</div><div class=\"line\">                      <span class=\"built_in\">exit</span> when action <span class=\"keyword\">done</span></div><div class=\"line\">  -l LOG_LEVEL        show given level <span class=\"built_in\">log</span> messages, argument can be (ERROR,</div><div class=\"line\">                      WARNING, INFO), <span class=\"keyword\">case</span>-insensitive</div><div class=\"line\">  -i DIR [DIR ...]    given a list of directory to ignore, relative directory,</div><div class=\"line\">                      *used <span class=\"keyword\">for</span>* -c and default action</div><div class=\"line\">  -p SAVE_PATH        save requirements <span class=\"keyword\">in</span> given file path, *used <span class=\"keyword\">for</span>* default</div><div class=\"line\">                      action</div><div class=\"line\">  -P PROJECT_PATH     project path, <span class=\"built_in\">which</span> is directory, *used <span class=\"keyword\">for</span>* default</div><div class=\"line\">                      action</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在查看别人的项目时，经常会看到一个requirements.txt文件，里面记录了当前程序的所有依赖包及其精确版本号。类似于java框架管理maven中pom.xml文件或者nodejs中package.json文件</p>\n</blockquote>\n<p>pip可以生成和安装 requirements.txt</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip freeze &gt; requirements.txt <span class=\"comment\"># 生成</span></div><div class=\"line\">pip install -r requirements.txt <span class=\"comment\"># 安装requirements.txt中依赖包</span></div></pre></td></tr></table></figure>\n<p>通过pip生成requirements.txt可以用，但是打开requirements.txt我们会发现，当前python环境下依赖包会全部写到文件中,这时候我们需要另一个工具来真正管理项目中需要的依赖</p>\n<h2 id=\"pigar\"><a href=\"#pigar\" class=\"headerlink\" title=\"pigar\"></a>pigar</h2><p>项目地址:<a href=\"https://github.com/damnever/pigar\" target=\"_blank\" rel=\"external\">https://github.com/damnever/pigar</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install pigar</div></pre></td></tr></table></figure>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>进入项目根目录并执行pigar<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> project_path</div><div class=\"line\">$ pigar</div><div class=\"line\"></div><div class=\"line\">Starting generate requirements ...</div><div class=\"line\">Writing requirements to <span class=\"string\">\"/root/myproject/requirements.txt\"</span></div><div class=\"line\">Requirements file has been covered, no difference.</div><div class=\"line\">Generate requirements <span class=\"keyword\">done</span>!</div></pre></td></tr></table></figure></p>\n<p>出现如上则为成功，此时查看requirements.txt 会发现，pigar不止记录了依赖和版本，还把在代码中依赖具体出现的位置标了出来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Requirements automatically generated by pigar.</span></div><div class=\"line\"><span class=\"comment\"># https://github.com/Damnever/pigar</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># run.py: 3</span></div><div class=\"line\">Flask == 0.12.2</div></pre></td></tr></table></figure>\n<p>在大型项目中执行pigar时会出现如下提示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">Starting generate requirements ...</div><div class=\"line\">The following modules are not found yet:</div><div class=\"line\">  app referenced from:</div><div class=\"line\">    app/common/base.py: 8,9,10,11</div><div class=\"line\">    app/common/decorator.py: 16</div><div class=\"line\">    app/common/elasticsearch.py: 7</div><div class=\"line\">    app/common/markdown.py: 7,8</div><div class=\"line\">    app/common/third/wx.py: 8,9,10</div><div class=\"line\">    app/config.py: 7</div><div class=\"line\">    app/local_config.py: 7</div><div class=\"line\">    app/models.py: 7,8,9</div><div class=\"line\">    app/run.py: 7,8,9,10</div><div class=\"line\">    app/views/index.py: 7,8,9,10</div><div class=\"line\">    run.py: 7,8,9,10,11</div><div class=\"line\">    <span class=\"built_in\">test</span>/test_article.py: 7</div><div class=\"line\">  oss2 referenced from:</div><div class=\"line\">    app/common/aliyun.py: 7</div><div class=\"line\">    app/common/qiniu.py: 7</div><div class=\"line\">Some of them may not install <span class=\"keyword\">in</span> <span class=\"built_in\">local</span> environment.</div><div class=\"line\"></div><div class=\"line\">Try to search PyPI <span class=\"keyword\">for</span> the missing modules and filter some unnecessary modules? (y/[N])</div></pre></td></tr></table></figure></p>\n<p>pigar会提示你本地找不到一些依赖，询问你是否下载，这时候你要看清楚他提示的是需要下载的依赖，还是你写在项目中的module，如果不需要下载输入n继续即可。</p>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">usage: pigar [-h] [-v] [-u] [-s NAME [NAME ...]] [-c [PATH]] [-l LOG_LEVEL]</div><div class=\"line\">             [-i DIR [DIR ...]] [-p SAVE_PATH] [-P PROJECT_PATH]</div><div class=\"line\"></div><div class=\"line\">Python requirements tool -- pigar, it will <span class=\"keyword\">do</span> only one thing at each time.</div><div class=\"line\">Default action is generate requirements.txt <span class=\"keyword\">in</span> current directory.</div><div class=\"line\"></div><div class=\"line\">optional arguments:</div><div class=\"line\">  -h, --<span class=\"built_in\">help</span>          show this <span class=\"built_in\">help</span> message and <span class=\"built_in\">exit</span></div><div class=\"line\">  -v, --version       show pigar version information and <span class=\"built_in\">exit</span></div><div class=\"line\">  -u, --update        update database, use it when pigar failed you, <span class=\"built_in\">exit</span> when</div><div class=\"line\">                      action <span class=\"keyword\">done</span></div><div class=\"line\">  -s NAME [NAME ...]  search package name by import name, use it <span class=\"keyword\">if</span> you <span class=\"keyword\">do</span> not</div><div class=\"line\">                      know import name come from <span class=\"built_in\">which</span> package, <span class=\"built_in\">exit</span> when</div><div class=\"line\">                      action <span class=\"keyword\">done</span></div><div class=\"line\">  -c [PATH]           check requirements <span class=\"keyword\">for</span> the latest version. If file path</div><div class=\"line\">                      not given, search *requirements.txt <span class=\"keyword\">in</span> current</div><div class=\"line\">                      directory, <span class=\"keyword\">if</span> not found, generate file requirements.txt,</div><div class=\"line\">                      <span class=\"built_in\">exit</span> when action <span class=\"keyword\">done</span></div><div class=\"line\">  -l LOG_LEVEL        show given level <span class=\"built_in\">log</span> messages, argument can be (ERROR,</div><div class=\"line\">                      WARNING, INFO), <span class=\"keyword\">case</span>-insensitive</div><div class=\"line\">  -i DIR [DIR ...]    given a list of directory to ignore, relative directory,</div><div class=\"line\">                      *used <span class=\"keyword\">for</span>* -c and default action</div><div class=\"line\">  -p SAVE_PATH        save requirements <span class=\"keyword\">in</span> given file path, *used <span class=\"keyword\">for</span>* default</div><div class=\"line\">                      action</div><div class=\"line\">  -P PROJECT_PATH     project path, <span class=\"built_in\">which</span> is directory, *used <span class=\"keyword\">for</span>* default</div><div class=\"line\">                      action</div></pre></td></tr></table></figure>\n"},{"title":"python 获取本地或网络图片的宽高","date":"2017-08-21T16:00:00.000Z","_content":"\n\n## 本地\n```python\nfrom PIL import Image\nfp = '/Users/wxnacy/Documents/WX20170412-190958@2x.png'\ni = Image.open(fp)\nprint(i.size) # 获取宽高 (w,h)\nprint(i.format) # 获取图片格式\n```\n\n## 网络图片\n```python\nfrom PIL import Image\nimport io \nimport requests\nurl = ''\ni = Image.open(io.BytesIO(requests.get(url).content))\nprint(i.size) # 获取宽高 (w,h)\nprint(i.format) # 获取图片格式\n```","source":"_posts/python-2017-08-22-get-image-size.md","raw":"---\ntitle: python 获取本地或网络图片的宽高\ndate: 2017-08-22\ntags:\n---\n\n\n## 本地\n```python\nfrom PIL import Image\nfp = '/Users/wxnacy/Documents/WX20170412-190958@2x.png'\ni = Image.open(fp)\nprint(i.size) # 获取宽高 (w,h)\nprint(i.format) # 获取图片格式\n```\n\n## 网络图片\n```python\nfrom PIL import Image\nimport io \nimport requests\nurl = ''\ni = Image.open(io.BytesIO(requests.get(url).content))\nprint(i.size) # 获取宽高 (w,h)\nprint(i.format) # 获取图片格式\n```","slug":"python-2017-08-22-get-image-size","published":1,"updated":"2017-09-15T23:33:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9k001fkjxv9uikr06e","content":"<h2><span id=\"ben-di\">本地</span><a href=\"#ben-di\" class=\"header-anchor\"></a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</div><div class=\"line\">fp = <span class=\"string\">'/Users/wxnacy/Documents/WX20170412-190958@2x.png'</span></div><div class=\"line\">i = Image.open(fp)</div><div class=\"line\">print(i.size) <span class=\"comment\"># 获取宽高 (w,h)</span></div><div class=\"line\">print(i.format) <span class=\"comment\"># 获取图片格式</span></div></pre></td></tr></table></figure>\n<h2><span id=\"wang-luo-tu-pian\">网络图片</span><a href=\"#wang-luo-tu-pian\" class=\"header-anchor\"></a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</div><div class=\"line\"><span class=\"keyword\">import</span> io </div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\">url = <span class=\"string\">''</span></div><div class=\"line\">i = Image.open(io.BytesIO(requests.get(url).content))</div><div class=\"line\">print(i.size) <span class=\"comment\"># 获取宽高 (w,h)</span></div><div class=\"line\">print(i.format) <span class=\"comment\"># 获取图片格式</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a>本地</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</div><div class=\"line\">fp = <span class=\"string\">'/Users/wxnacy/Documents/WX20170412-190958@2x.png'</span></div><div class=\"line\">i = Image.open(fp)</div><div class=\"line\">print(i.size) <span class=\"comment\"># 获取宽高 (w,h)</span></div><div class=\"line\">print(i.format) <span class=\"comment\"># 获取图片格式</span></div></pre></td></tr></table></figure>\n<h2 id=\"网络图片\"><a href=\"#网络图片\" class=\"headerlink\" title=\"网络图片\"></a>网络图片</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</div><div class=\"line\"><span class=\"keyword\">import</span> io </div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\">url = <span class=\"string\">''</span></div><div class=\"line\">i = Image.open(io.BytesIO(requests.get(url).content))</div><div class=\"line\">print(i.size) <span class=\"comment\"># 获取宽高 (w,h)</span></div><div class=\"line\">print(i.format) <span class=\"comment\"># 获取图片格式</span></div></pre></td></tr></table></figure>"},{"title":"Python Scrapy 入门教程","date":"2017-08-22T16:00:00.000Z","_content":"\n\n## 安装\n```bash\n$ pip install Scrapy\n```\n\n## 创建项目\n```bash\n$ scrapy startproject crawler\n\nNew Scrapy project 'crawler', using template directory '/Users/wxnacy/.pyenv/versions/3.5.0/envs/env_lightcircle/lib/python3.5/site-packages/scrapy/templates/project', created in:\n    /Users/wxnacy/WebstormProjects/wxnacy.github.io/crawler\n\nYou can start your first spider with:\n    cd crawler\n    scrapy genspider example example.com\n\n```\n\n通过提示我们可以通过如下命令创建第一个spider\n```bash\n$ cd crawler\n$ scrapy genspider youtube youtube.com\n\nCreated spider 'youtube' using template 'basic' in module:\n  crawler.spiders.youtube\n\n```","source":"_posts/python-2017-08-23-scrapy-basic.md","raw":"---\ntitle: Python Scrapy 入门教程\ndate: 2017-08-23\ntags:\n---\n\n\n## 安装\n```bash\n$ pip install Scrapy\n```\n\n## 创建项目\n```bash\n$ scrapy startproject crawler\n\nNew Scrapy project 'crawler', using template directory '/Users/wxnacy/.pyenv/versions/3.5.0/envs/env_lightcircle/lib/python3.5/site-packages/scrapy/templates/project', created in:\n    /Users/wxnacy/WebstormProjects/wxnacy.github.io/crawler\n\nYou can start your first spider with:\n    cd crawler\n    scrapy genspider example example.com\n\n```\n\n通过提示我们可以通过如下命令创建第一个spider\n```bash\n$ cd crawler\n$ scrapy genspider youtube youtube.com\n\nCreated spider 'youtube' using template 'basic' in module:\n  crawler.spiders.youtube\n\n```","slug":"python-2017-08-23-scrapy-basic","published":1,"updated":"2017-09-15T23:33:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9l001gkjxvgtot4nqd","content":"<h2><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pip install Scrapy</div></pre></td></tr></table></figure>\n<h2><span id=\"chuang-jian-xiang-mu\">创建项目</span><a href=\"#chuang-jian-xiang-mu\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ scrapy startproject crawler</div><div class=\"line\"></div><div class=\"line\">New Scrapy project <span class=\"string\">'crawler'</span>, using template directory <span class=\"string\">'/Users/wxnacy/.pyenv/versions/3.5.0/envs/env_lightcircle/lib/python3.5/site-packages/scrapy/templates/project'</span>, created <span class=\"keyword\">in</span>:</div><div class=\"line\">    /Users/wxnacy/WebstormProjects/wxnacy.github.io/crawler</div><div class=\"line\"></div><div class=\"line\">You can start your first spider with:</div><div class=\"line\">    <span class=\"built_in\">cd</span> crawler</div><div class=\"line\">    scrapy genspider example example.com</div></pre></td></tr></table></figure>\n<p>通过提示我们可以通过如下命令创建第一个spider<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> crawler</div><div class=\"line\">$ scrapy genspider youtube youtube.com</div><div class=\"line\"></div><div class=\"line\">Created spider <span class=\"string\">'youtube'</span> using template <span class=\"string\">'basic'</span> <span class=\"keyword\">in</span> module:</div><div class=\"line\">  crawler.spiders.youtube</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pip install Scrapy</div></pre></td></tr></table></figure>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ scrapy startproject crawler</div><div class=\"line\"></div><div class=\"line\">New Scrapy project <span class=\"string\">'crawler'</span>, using template directory <span class=\"string\">'/Users/wxnacy/.pyenv/versions/3.5.0/envs/env_lightcircle/lib/python3.5/site-packages/scrapy/templates/project'</span>, created <span class=\"keyword\">in</span>:</div><div class=\"line\">    /Users/wxnacy/WebstormProjects/wxnacy.github.io/crawler</div><div class=\"line\"></div><div class=\"line\">You can start your first spider with:</div><div class=\"line\">    <span class=\"built_in\">cd</span> crawler</div><div class=\"line\">    scrapy genspider example example.com</div></pre></td></tr></table></figure>\n<p>通过提示我们可以通过如下命令创建第一个spider<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> crawler</div><div class=\"line\">$ scrapy genspider youtube youtube.com</div><div class=\"line\"></div><div class=\"line\">Created spider <span class=\"string\">'youtube'</span> using template <span class=\"string\">'basic'</span> <span class=\"keyword\">in</span> module:</div><div class=\"line\">  crawler.spiders.youtube</div></pre></td></tr></table></figure></p>\n"},{"title":"Python 微信公众号接口创建菜单编码问题","date":"2017-09-04T16:00:00.000Z","_content":"\n\n> 错误 {\"errcode\":40033,\"errmsg\":\"invalid charset. please check your request, if include \\\\uxxxx will create fail!\"}\n\n## 方法\n利用python的json内置模块，在进行dumps操作时，使用ensure_ascii=False 参数是中文\n不会被转码\n```python\ndata = json.dumps(data,ensure_ascii=False).encode('utf-8')\n```\n\n## 完整实例\n```python\nimport json\nimport requests\n\nurl = 'https://api.weixin.qq.com/cgi-bin/menu/create?access_token=...'\ndata = json.dumps(data,ensure_ascii=False).encode('utf-8')\nres = requests.post(url,data=data)\nprint(res)\n```\n","source":"_posts/python-2017-09-05-wx-create-menu-err.md","raw":"---\ntitle: Python 微信公众号接口创建菜单编码问题\ndate: 2017-09-05\ntags:\n---\n\n\n> 错误 {\"errcode\":40033,\"errmsg\":\"invalid charset. please check your request, if include \\\\uxxxx will create fail!\"}\n\n## 方法\n利用python的json内置模块，在进行dumps操作时，使用ensure_ascii=False 参数是中文\n不会被转码\n```python\ndata = json.dumps(data,ensure_ascii=False).encode('utf-8')\n```\n\n## 完整实例\n```python\nimport json\nimport requests\n\nurl = 'https://api.weixin.qq.com/cgi-bin/menu/create?access_token=...'\ndata = json.dumps(data,ensure_ascii=False).encode('utf-8')\nres = requests.post(url,data=data)\nprint(res)\n```\n","slug":"python-2017-09-05-wx-create-menu-err","published":1,"updated":"2017-09-15T23:33:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9l001hkjxvjw368gbg","content":"<blockquote>\n<p>错误 {“errcode”:40033,”errmsg”:”invalid charset. please check your request, if include \\uxxxx will create fail!”}</p>\n</blockquote>\n<h2><span id=\"fang-fa\">方法</span><a href=\"#fang-fa\" class=\"header-anchor\"></a></h2><p>利用python的json内置模块，在进行dumps操作时，使用ensure_ascii=False 参数是中文<br>不会被转码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">data = json.dumps(data,ensure_ascii=<span class=\"keyword\">False</span>).encode(<span class=\"string\">'utf-8'</span>)</div></pre></td></tr></table></figure></p>\n<h2><span id=\"wan-zheng-shi-li\">完整实例</span><a href=\"#wan-zheng-shi-li\" class=\"header-anchor\"></a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"></div><div class=\"line\">url = <span class=\"string\">'https://api.weixin.qq.com/cgi-bin/menu/create?access_token=...'</span></div><div class=\"line\">data = json.dumps(data,ensure_ascii=<span class=\"keyword\">False</span>).encode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">res = requests.post(url,data=data)</div><div class=\"line\">print(res)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>错误 {“errcode”:40033,”errmsg”:”invalid charset. please check your request, if include \\uxxxx will create fail!”}</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>利用python的json内置模块，在进行dumps操作时，使用ensure_ascii=False 参数是中文<br>不会被转码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">data = json.dumps(data,ensure_ascii=<span class=\"keyword\">False</span>).encode(<span class=\"string\">'utf-8'</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"完整实例\"><a href=\"#完整实例\" class=\"headerlink\" title=\"完整实例\"></a>完整实例</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"></div><div class=\"line\">url = <span class=\"string\">'https://api.weixin.qq.com/cgi-bin/menu/create?access_token=...'</span></div><div class=\"line\">data = json.dumps(data,ensure_ascii=<span class=\"keyword\">False</span>).encode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">res = requests.post(url,data=data)</div><div class=\"line\">print(res)</div></pre></td></tr></table></figure>\n"},{"title":"Flask api 文档","date":"2017-09-06T16:00:00.000Z","_content":"\n\n- [ 文档 ](http://flask.pocoo.org/docs/0.12/api)\n- [request 得到的数据](http://flask.pocoo.org/docs/0.12/api/#incoming-request-data)\n","source":"_posts/python-2017-09-07-flask-api.md","raw":"---\ntitle: Flask api 文档\ndate: 2017-09-07\ntags:\n---\n\n\n- [ 文档 ](http://flask.pocoo.org/docs/0.12/api)\n- [request 得到的数据](http://flask.pocoo.org/docs/0.12/api/#incoming-request-data)\n","slug":"python-2017-09-07-flask-api","published":1,"updated":"2017-09-15T23:34:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9m001ikjxv8uu9tbx1","content":"<ul>\n<li><a href=\"http://flask.pocoo.org/docs/0.12/api\" target=\"_blank\" rel=\"external\"> 文档 </a></li>\n<li><a href=\"http://flask.pocoo.org/docs/0.12/api/#incoming-request-data\" target=\"_blank\" rel=\"external\">request 得到的数据</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"http://flask.pocoo.org/docs/0.12/api\" target=\"_blank\" rel=\"external\"> 文档 </a></li>\n<li><a href=\"http://flask.pocoo.org/docs/0.12/api/#incoming-request-data\" target=\"_blank\" rel=\"external\">request 得到的数据</a></li>\n</ul>\n"},{"title":"Python 使用markdown","date":"2017-09-05T16:00:00.000Z","_content":"\n\n[TOC]\n\n## mistune\n\n[github](https://github.com/lepture/mistune)\n\n### 安装\n```bash\n$ pip install mistune\n```\n\n### 使用\n```python\nimport mistune\n\nres = mistune.Markdown('# title')\nprint(res)\n\nmd = mistune.Markdown()\ncontent = '# title'\nprint(md(content))\n```\n\n### 更多\n\n[更多用法](https://github.com/lepture/mistune#options)\n\n## markdown\n\n[github](https://github.com/Python-Markdown/markdown)\n\n### 安装\n```bash\n$ pip install markdown\n```\n\n### 使用\n\n```python\nimport markdown\n\nmd = markdown.Markdown()\nres = md.convert('# title')\nprint(res)\n```\n\n### TOC\n\n```python\nimport markdown\n\nEXT = ['markdown.extensions.toc']\nmd = markdown.Markdown(extensions=EXT)\nres = md.convert('# title \\n[TOC]\\n## h2')\nprint(res)\n\n```\n\n### 更多\n[ 官方文档 ](https://pythonhosted.org/Markdown/)\n[更多extensions值](https://pythonhosted.org/Markdown/extensions/index.html)\n\n## markdown2\n\n[github](https://github.com/trentm/python-markdown2)\n\n### 下载\n\n```bash\n$ pip install markdown2\n```\n\n### 使用\n\n```python\nimport markdown2\n\nmd = markdown2.Markdown()\nres = md.convert('# title')\nprint(res)\n```\n\n### TOC\n\n```python\nimport markdown2\n\nmd = markdown2.Markdown(extras=[\"toc\",\"header-ids\"])\nres = md.convert('# title \\n[TOC]\\n## h2')\nprint(res.toc_html)     # 这样只能得到单独生成的目录，不能生成到md文章中\n\n```\n\n### 更多\n[更多extras值](https://github.com/trentm/python-markdown2/wiki/Extras)\n\n","source":"_posts/python-2017-09-06-use-markdown.md","raw":"---\ntitle: Python 使用markdown\ndate: 2017-09-06\ntags:\n---\n\n\n[TOC]\n\n## mistune\n\n[github](https://github.com/lepture/mistune)\n\n### 安装\n```bash\n$ pip install mistune\n```\n\n### 使用\n```python\nimport mistune\n\nres = mistune.Markdown('# title')\nprint(res)\n\nmd = mistune.Markdown()\ncontent = '# title'\nprint(md(content))\n```\n\n### 更多\n\n[更多用法](https://github.com/lepture/mistune#options)\n\n## markdown\n\n[github](https://github.com/Python-Markdown/markdown)\n\n### 安装\n```bash\n$ pip install markdown\n```\n\n### 使用\n\n```python\nimport markdown\n\nmd = markdown.Markdown()\nres = md.convert('# title')\nprint(res)\n```\n\n### TOC\n\n```python\nimport markdown\n\nEXT = ['markdown.extensions.toc']\nmd = markdown.Markdown(extensions=EXT)\nres = md.convert('# title \\n[TOC]\\n## h2')\nprint(res)\n\n```\n\n### 更多\n[ 官方文档 ](https://pythonhosted.org/Markdown/)\n[更多extensions值](https://pythonhosted.org/Markdown/extensions/index.html)\n\n## markdown2\n\n[github](https://github.com/trentm/python-markdown2)\n\n### 下载\n\n```bash\n$ pip install markdown2\n```\n\n### 使用\n\n```python\nimport markdown2\n\nmd = markdown2.Markdown()\nres = md.convert('# title')\nprint(res)\n```\n\n### TOC\n\n```python\nimport markdown2\n\nmd = markdown2.Markdown(extras=[\"toc\",\"header-ids\"])\nres = md.convert('# title \\n[TOC]\\n## h2')\nprint(res.toc_html)     # 这样只能得到单独生成的目录，不能生成到md文章中\n\n```\n\n### 更多\n[更多extras值](https://github.com/trentm/python-markdown2/wiki/Extras)\n\n","slug":"python-2017-09-06-use-markdown","published":1,"updated":"2017-09-15T23:33:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9m001jkjxvqojocz6g","content":"<p>[TOC]</p>\n<h2><span id=\"mistune\">mistune</span><a href=\"#mistune\" class=\"header-anchor\"></a></h2><p><a href=\"https://github.com/lepture/mistune\" target=\"_blank\" rel=\"external\">github</a></p>\n<h3><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pip install mistune</div></pre></td></tr></table></figure>\n<h3><span id=\"shi-yong\">使用</span><a href=\"#shi-yong\" class=\"header-anchor\"></a></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> mistune</div><div class=\"line\"></div><div class=\"line\">res = mistune.Markdown(<span class=\"string\">'# title'</span>)</div><div class=\"line\">print(res)</div><div class=\"line\"></div><div class=\"line\">md = mistune.Markdown()</div><div class=\"line\">content = <span class=\"string\">'# title'</span></div><div class=\"line\">print(md(content))</div></pre></td></tr></table></figure>\n<h3><span id=\"geng-duo\">更多</span><a href=\"#geng-duo\" class=\"header-anchor\"></a></h3><p><a href=\"https://github.com/lepture/mistune#options\" target=\"_blank\" rel=\"external\">更多用法</a></p>\n<h2><span id=\"markdown\">markdown</span><a href=\"#markdown\" class=\"header-anchor\"></a></h2><p><a href=\"https://github.com/Python-Markdown/markdown\" target=\"_blank\" rel=\"external\">github</a></p>\n<h3><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pip install markdown</div></pre></td></tr></table></figure>\n<h3><span id=\"shi-yong\">使用</span><a href=\"#shi-yong\" class=\"header-anchor\"></a></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> markdown</div><div class=\"line\"></div><div class=\"line\">md = markdown.Markdown()</div><div class=\"line\">res = md.convert(<span class=\"string\">'# title'</span>)</div><div class=\"line\">print(res)</div></pre></td></tr></table></figure>\n<h3><span id=\"toc\">TOC</span><a href=\"#toc\" class=\"header-anchor\"></a></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> markdown</div><div class=\"line\"></div><div class=\"line\">EXT = [<span class=\"string\">'markdown.extensions.toc'</span>]</div><div class=\"line\">md = markdown.Markdown(extensions=EXT)</div><div class=\"line\">res = md.convert(<span class=\"string\">'# title \\n[TOC]\\n## h2'</span>)</div><div class=\"line\">print(res)</div></pre></td></tr></table></figure>\n<h3><span id=\"geng-duo\">更多</span><a href=\"#geng-duo\" class=\"header-anchor\"></a></h3><p><a href=\"https://pythonhosted.org/Markdown/\" target=\"_blank\" rel=\"external\"> 官方文档 </a><br><a href=\"https://pythonhosted.org/Markdown/extensions/index.html\" target=\"_blank\" rel=\"external\">更多extensions值</a></p>\n<h2><span id=\"markdown2\">markdown2</span><a href=\"#markdown2\" class=\"header-anchor\"></a></h2><p><a href=\"https://github.com/trentm/python-markdown2\" target=\"_blank\" rel=\"external\">github</a></p>\n<h3><span id=\"xia-zai\">下载</span><a href=\"#xia-zai\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pip install markdown2</div></pre></td></tr></table></figure>\n<h3><span id=\"shi-yong\">使用</span><a href=\"#shi-yong\" class=\"header-anchor\"></a></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> markdown2</div><div class=\"line\"></div><div class=\"line\">md = markdown2.Markdown()</div><div class=\"line\">res = md.convert(<span class=\"string\">'# title'</span>)</div><div class=\"line\">print(res)</div></pre></td></tr></table></figure>\n<h3><span id=\"toc\">TOC</span><a href=\"#toc\" class=\"header-anchor\"></a></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> markdown2</div><div class=\"line\"></div><div class=\"line\">md = markdown2.Markdown(extras=[<span class=\"string\">\"toc\"</span>,<span class=\"string\">\"header-ids\"</span>])</div><div class=\"line\">res = md.convert(<span class=\"string\">'# title \\n[TOC]\\n## h2'</span>)</div><div class=\"line\">print(res.toc_html)     <span class=\"comment\"># 这样只能得到单独生成的目录，不能生成到md文章中</span></div></pre></td></tr></table></figure>\n<h3><span id=\"geng-duo\">更多</span><a href=\"#geng-duo\" class=\"header-anchor\"></a></h3><p><a href=\"https://github.com/trentm/python-markdown2/wiki/Extras\" target=\"_blank\" rel=\"external\">更多extras值</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"mistune\"><a href=\"#mistune\" class=\"headerlink\" title=\"mistune\"></a>mistune</h2><p><a href=\"https://github.com/lepture/mistune\" target=\"_blank\" rel=\"external\">github</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pip install mistune</div></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> mistune</div><div class=\"line\"></div><div class=\"line\">res = mistune.Markdown(<span class=\"string\">'# title'</span>)</div><div class=\"line\">print(res)</div><div class=\"line\"></div><div class=\"line\">md = mistune.Markdown()</div><div class=\"line\">content = <span class=\"string\">'# title'</span></div><div class=\"line\">print(md(content))</div></pre></td></tr></table></figure>\n<h3 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h3><p><a href=\"https://github.com/lepture/mistune#options\" target=\"_blank\" rel=\"external\">更多用法</a></p>\n<h2 id=\"markdown\"><a href=\"#markdown\" class=\"headerlink\" title=\"markdown\"></a>markdown</h2><p><a href=\"https://github.com/Python-Markdown/markdown\" target=\"_blank\" rel=\"external\">github</a></p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pip install markdown</div></pre></td></tr></table></figure>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> markdown</div><div class=\"line\"></div><div class=\"line\">md = markdown.Markdown()</div><div class=\"line\">res = md.convert(<span class=\"string\">'# title'</span>)</div><div class=\"line\">print(res)</div></pre></td></tr></table></figure>\n<h3 id=\"TOC\"><a href=\"#TOC\" class=\"headerlink\" title=\"TOC\"></a>TOC</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> markdown</div><div class=\"line\"></div><div class=\"line\">EXT = [<span class=\"string\">'markdown.extensions.toc'</span>]</div><div class=\"line\">md = markdown.Markdown(extensions=EXT)</div><div class=\"line\">res = md.convert(<span class=\"string\">'# title \\n[TOC]\\n## h2'</span>)</div><div class=\"line\">print(res)</div></pre></td></tr></table></figure>\n<h3 id=\"更多-1\"><a href=\"#更多-1\" class=\"headerlink\" title=\"更多\"></a>更多</h3><p><a href=\"https://pythonhosted.org/Markdown/\" target=\"_blank\" rel=\"external\"> 官方文档 </a><br><a href=\"https://pythonhosted.org/Markdown/extensions/index.html\" target=\"_blank\" rel=\"external\">更多extensions值</a></p>\n<h2 id=\"markdown2\"><a href=\"#markdown2\" class=\"headerlink\" title=\"markdown2\"></a>markdown2</h2><p><a href=\"https://github.com/trentm/python-markdown2\" target=\"_blank\" rel=\"external\">github</a></p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pip install markdown2</div></pre></td></tr></table></figure>\n<h3 id=\"使用-2\"><a href=\"#使用-2\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> markdown2</div><div class=\"line\"></div><div class=\"line\">md = markdown2.Markdown()</div><div class=\"line\">res = md.convert(<span class=\"string\">'# title'</span>)</div><div class=\"line\">print(res)</div></pre></td></tr></table></figure>\n<h3 id=\"TOC-1\"><a href=\"#TOC-1\" class=\"headerlink\" title=\"TOC\"></a>TOC</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> markdown2</div><div class=\"line\"></div><div class=\"line\">md = markdown2.Markdown(extras=[<span class=\"string\">\"toc\"</span>,<span class=\"string\">\"header-ids\"</span>])</div><div class=\"line\">res = md.convert(<span class=\"string\">'# title \\n[TOC]\\n## h2'</span>)</div><div class=\"line\">print(res.toc_html)     <span class=\"comment\"># 这样只能得到单独生成的目录，不能生成到md文章中</span></div></pre></td></tr></table></figure>\n<h3 id=\"更多-2\"><a href=\"#更多-2\" class=\"headerlink\" title=\"更多\"></a>更多</h3><p><a href=\"https://github.com/trentm/python-markdown2/wiki/Extras\" target=\"_blank\" rel=\"external\">更多extras值</a></p>\n"},{"title":"zsh 与 oh-my-zsh 安装与使用","date":"2017-08-15T16:00:00.000Z","_content":"\n\n[TOC]\n\n## 安装 zsh\n### Linux\n```bash\n$ yum install zsh\n$ chsh -s /bin/zsh # 将默认shell改为zsh\n$ echo $SHELL # 查看是否生效\n```\n### Mac\n```bash\n$ brew install zsh\n\n$ which zsh\n/usr/local/bin/zsh  # 执行which命令发现brew将zsh安装到了/usr/local/bin/zsh\n\n# 所以首先需要将zsh执行脚本所在位置写入到/etc/shells 中，在进行chsh操作\n$ sudo vim /etc/shells\n\n# List of acceptable shells for chpass(1).\n  2 # Ftpd will not allow users to connect who are not using\n  3 # one of these shells.\n  4\n  5 /bin/bash\n  6 /bin/csh\n  7 /bin/ksh\n  8 /bin/sh\n  9 /bin/tcsh\n-10 /bin/zsh\n+10 /usr/local/bin/zsh\n\n\n# 保存退出后在更换shell\n$ chsh -s /usr/local/bin/zsh\n$ echo $SHELL # 查看是否生效\n\n```\n\n## 安装 [ oh-my-zsh ](http://ohmyz.sh/)\n\n\ncurl\n```bash\n$ sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\nwget\n```bash\n$ sh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n```\n\n最后修改zshrc兼容bash_profile的环境变量\n```bash\n$ vim ~/.zshrc\n$ source ~/.bash_profile\n```\n\n## 皮肤\n\n```bash\n$ vim ~/.zshrc\n\n...\nZSH_THEME=\"fishy\"       # 修改此处可以更改zsh使用皮肤\n...\n```\n\n[更多皮肤](https://github.com/robbyrussell/oh-my-zsh/wiki/themes)\n","source":"_posts/shell-2017-08-16-zsh-install.md","raw":"---\ntitle: zsh 与 oh-my-zsh 安装与使用\ndate: 2017-08-16\ntags:\n---\n\n\n[TOC]\n\n## 安装 zsh\n### Linux\n```bash\n$ yum install zsh\n$ chsh -s /bin/zsh # 将默认shell改为zsh\n$ echo $SHELL # 查看是否生效\n```\n### Mac\n```bash\n$ brew install zsh\n\n$ which zsh\n/usr/local/bin/zsh  # 执行which命令发现brew将zsh安装到了/usr/local/bin/zsh\n\n# 所以首先需要将zsh执行脚本所在位置写入到/etc/shells 中，在进行chsh操作\n$ sudo vim /etc/shells\n\n# List of acceptable shells for chpass(1).\n  2 # Ftpd will not allow users to connect who are not using\n  3 # one of these shells.\n  4\n  5 /bin/bash\n  6 /bin/csh\n  7 /bin/ksh\n  8 /bin/sh\n  9 /bin/tcsh\n-10 /bin/zsh\n+10 /usr/local/bin/zsh\n\n\n# 保存退出后在更换shell\n$ chsh -s /usr/local/bin/zsh\n$ echo $SHELL # 查看是否生效\n\n```\n\n## 安装 [ oh-my-zsh ](http://ohmyz.sh/)\n\n\ncurl\n```bash\n$ sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\nwget\n```bash\n$ sh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n```\n\n最后修改zshrc兼容bash_profile的环境变量\n```bash\n$ vim ~/.zshrc\n$ source ~/.bash_profile\n```\n\n## 皮肤\n\n```bash\n$ vim ~/.zshrc\n\n...\nZSH_THEME=\"fishy\"       # 修改此处可以更改zsh使用皮肤\n...\n```\n\n[更多皮肤](https://github.com/robbyrussell/oh-my-zsh/wiki/themes)\n","slug":"shell-2017-08-16-zsh-install","published":1,"updated":"2017-09-15T23:34:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9n001kkjxvzgrswwzy","content":"<p>[TOC]</p>\n<h2><span id=\"an-zhuang-zsh\">安装 zsh</span><a href=\"#an-zhuang-zsh\" class=\"header-anchor\"></a></h2><h3><span id=\"linux\">Linux</span><a href=\"#linux\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yum install zsh</div><div class=\"line\">$ chsh -s /bin/zsh <span class=\"comment\"># 将默认shell改为zsh</span></div><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span> <span class=\"comment\"># 查看是否生效</span></div></pre></td></tr></table></figure>\n<h3><span id=\"mac\">Mac</span><a href=\"#mac\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install zsh</div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">which</span> zsh</div><div class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/zsh  <span class=\"comment\"># 执行which命令发现brew将zsh安装到了/usr/local/bin/zsh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 所以首先需要将zsh执行脚本所在位置写入到/etc/shells 中，在进行chsh操作</span></div><div class=\"line\">$ sudo vim /etc/shells</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># List of acceptable shells for chpass(1).</span></div><div class=\"line\">  2 <span class=\"comment\"># Ftpd will not allow users to connect who are not using</span></div><div class=\"line\">  3 <span class=\"comment\"># one of these shells.</span></div><div class=\"line\">  4</div><div class=\"line\">  5 /bin/bash</div><div class=\"line\">  6 /bin/csh</div><div class=\"line\">  7 /bin/ksh</div><div class=\"line\">  8 /bin/sh</div><div class=\"line\">  9 /bin/tcsh</div><div class=\"line\">-10 /bin/zsh</div><div class=\"line\">+10 /usr/<span class=\"built_in\">local</span>/bin/zsh</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 保存退出后在更换shell</span></div><div class=\"line\">$ chsh -s /usr/<span class=\"built_in\">local</span>/bin/zsh</div><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span> <span class=\"comment\"># 查看是否生效</span></div></pre></td></tr></table></figure>\n<h2><span id=\"an-zhuang-oh-my-zsh\">安装 </span><a href=\"#an-zhuang-oh-my-zsh\" class=\"header-anchor\"></a></h2><p>curl<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></div></pre></td></tr></table></figure></p>\n<p>wget<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sh -c <span class=\"string\">\"<span class=\"variable\">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>\"</span></div></pre></td></tr></table></figure></p>\n<p>最后修改zshrc兼容bash_profile的环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim ~/.zshrc</div><div class=\"line\">$ <span class=\"built_in\">source</span> ~/.bash_profile</div></pre></td></tr></table></figure></p>\n<h2><span id=\"pi-fu\">皮肤</span><a href=\"#pi-fu\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim ~/.zshrc</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">ZSH_THEME=<span class=\"string\">\"fishy\"</span>       <span class=\"comment\"># 修改此处可以更改zsh使用皮肤</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/themes\" target=\"_blank\" rel=\"external\">更多皮肤</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"安装-zsh\"><a href=\"#安装-zsh\" class=\"headerlink\" title=\"安装 zsh\"></a>安装 zsh</h2><h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ yum install zsh</div><div class=\"line\">$ chsh -s /bin/zsh <span class=\"comment\"># 将默认shell改为zsh</span></div><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span> <span class=\"comment\"># 查看是否生效</span></div></pre></td></tr></table></figure>\n<h3 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install zsh</div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">which</span> zsh</div><div class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/zsh  <span class=\"comment\"># 执行which命令发现brew将zsh安装到了/usr/local/bin/zsh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 所以首先需要将zsh执行脚本所在位置写入到/etc/shells 中，在进行chsh操作</span></div><div class=\"line\">$ sudo vim /etc/shells</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># List of acceptable shells for chpass(1).</span></div><div class=\"line\">  2 <span class=\"comment\"># Ftpd will not allow users to connect who are not using</span></div><div class=\"line\">  3 <span class=\"comment\"># one of these shells.</span></div><div class=\"line\">  4</div><div class=\"line\">  5 /bin/bash</div><div class=\"line\">  6 /bin/csh</div><div class=\"line\">  7 /bin/ksh</div><div class=\"line\">  8 /bin/sh</div><div class=\"line\">  9 /bin/tcsh</div><div class=\"line\">-10 /bin/zsh</div><div class=\"line\">+10 /usr/<span class=\"built_in\">local</span>/bin/zsh</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 保存退出后在更换shell</span></div><div class=\"line\">$ chsh -s /usr/<span class=\"built_in\">local</span>/bin/zsh</div><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span> <span class=\"comment\"># 查看是否生效</span></div></pre></td></tr></table></figure>\n<h2 id=\"安装-oh-my-zsh\"><a href=\"#安装-oh-my-zsh\" class=\"headerlink\" title=\"安装  oh-my-zsh \"></a>安装 <a href=\"http://ohmyz.sh/\" target=\"_blank\" rel=\"external\"> oh-my-zsh </a></h2><p>curl<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></div></pre></td></tr></table></figure></p>\n<p>wget<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sh -c <span class=\"string\">\"<span class=\"variable\">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>\"</span></div></pre></td></tr></table></figure></p>\n<p>最后修改zshrc兼容bash_profile的环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim ~/.zshrc</div><div class=\"line\">$ <span class=\"built_in\">source</span> ~/.bash_profile</div></pre></td></tr></table></figure></p>\n<h2 id=\"皮肤\"><a href=\"#皮肤\" class=\"headerlink\" title=\"皮肤\"></a>皮肤</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim ~/.zshrc</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">ZSH_THEME=<span class=\"string\">\"fishy\"</span>       <span class=\"comment\"># 修改此处可以更改zsh使用皮肤</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/themes\" target=\"_blank\" rel=\"external\">更多皮肤</a></p>\n"},{"title":"shell 基础命令","date":"2017-09-01T16:00:00.000Z","_content":"\n\n## type\n```bash\n$ type [-tpa] name\n选项与参数：\n    ：不加任何选项与参数时，type 会显示出 name 是外部命令还是 bash 内建命令\n-t  ：当加入 -t 参数时，type 会将 name 以底下这些字眼显示出他的意义：\n      file    ：表示为外部命令；\n      alias   ：表示该命令为命令别名所配置的名称；\n      builtin ：表示该命令为 bash 内建的命令功能；\n-p  ：如果后面接的 name 为外部命令时，才会显示完整文件名；\n-a  ：会由 PATH 变量定义的路径中，将所有含 name 的命令都列出来，包含 alias\n```\n\n## 设置别名alias和历史记录history\n```bash\n$ alias h='history'     # 设置别名\n$ unalias h             # 取消别名\n\n$ history [n]\n$ history [-c]\n$ history [-raw] histfiles\n```\n","source":"_posts/shell-2017-09-02-basic.md","raw":"---\ntitle: shell 基础命令\ndate: 2017-09-02\ntags:\n---\n\n\n## type\n```bash\n$ type [-tpa] name\n选项与参数：\n    ：不加任何选项与参数时，type 会显示出 name 是外部命令还是 bash 内建命令\n-t  ：当加入 -t 参数时，type 会将 name 以底下这些字眼显示出他的意义：\n      file    ：表示为外部命令；\n      alias   ：表示该命令为命令别名所配置的名称；\n      builtin ：表示该命令为 bash 内建的命令功能；\n-p  ：如果后面接的 name 为外部命令时，才会显示完整文件名；\n-a  ：会由 PATH 变量定义的路径中，将所有含 name 的命令都列出来，包含 alias\n```\n\n## 设置别名alias和历史记录history\n```bash\n$ alias h='history'     # 设置别名\n$ unalias h             # 取消别名\n\n$ history [n]\n$ history [-c]\n$ history [-raw] histfiles\n```\n","slug":"shell-2017-09-02-basic","published":1,"updated":"2017-09-15T23:34:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9o001lkjxvb24sg0kz","content":"<h2><span id=\"type\">type</span><a href=\"#type\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">type</span> [-tpa] name</div><div class=\"line\">选项与参数：</div><div class=\"line\">    ：不加任何选项与参数时，<span class=\"built_in\">type</span> 会显示出 name 是外部命令还是 bash 内建命令</div><div class=\"line\">-t  ：当加入 -t 参数时，<span class=\"built_in\">type</span> 会将 name 以底下这些字眼显示出他的意义：</div><div class=\"line\">      file    ：表示为外部命令；</div><div class=\"line\">      <span class=\"built_in\">alias</span>   ：表示该命令为命令别名所配置的名称；</div><div class=\"line\">      <span class=\"built_in\">builtin</span> ：表示该命令为 bash 内建的命令功能；</div><div class=\"line\">-p  ：如果后面接的 name 为外部命令时，才会显示完整文件名；</div><div class=\"line\">-a  ：会由 PATH 变量定义的路径中，将所有含 name 的命令都列出来，包含 <span class=\"built_in\">alias</span></div></pre></td></tr></table></figure>\n<h2><span id=\"she-zhi-bie-ming-alias-he-li-shi-ji-lu-history\">设置别名alias和历史记录history</span><a href=\"#she-zhi-bie-ming-alias-he-li-shi-ji-lu-history\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">alias</span> h=<span class=\"string\">'history'</span>     <span class=\"comment\"># 设置别名</span></div><div class=\"line\">$ <span class=\"built_in\">unalias</span> h             <span class=\"comment\"># 取消别名</span></div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">history</span> [n]</div><div class=\"line\">$ <span class=\"built_in\">history</span> [-c]</div><div class=\"line\">$ <span class=\"built_in\">history</span> [-raw] histfiles</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">type</span> [-tpa] name</div><div class=\"line\">选项与参数：</div><div class=\"line\">    ：不加任何选项与参数时，<span class=\"built_in\">type</span> 会显示出 name 是外部命令还是 bash 内建命令</div><div class=\"line\">-t  ：当加入 -t 参数时，<span class=\"built_in\">type</span> 会将 name 以底下这些字眼显示出他的意义：</div><div class=\"line\">      file    ：表示为外部命令；</div><div class=\"line\">      <span class=\"built_in\">alias</span>   ：表示该命令为命令别名所配置的名称；</div><div class=\"line\">      <span class=\"built_in\">builtin</span> ：表示该命令为 bash 内建的命令功能；</div><div class=\"line\">-p  ：如果后面接的 name 为外部命令时，才会显示完整文件名；</div><div class=\"line\">-a  ：会由 PATH 变量定义的路径中，将所有含 name 的命令都列出来，包含 <span class=\"built_in\">alias</span></div></pre></td></tr></table></figure>\n<h2 id=\"设置别名alias和历史记录history\"><a href=\"#设置别名alias和历史记录history\" class=\"headerlink\" title=\"设置别名alias和历史记录history\"></a>设置别名alias和历史记录history</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">alias</span> h=<span class=\"string\">'history'</span>     <span class=\"comment\"># 设置别名</span></div><div class=\"line\">$ <span class=\"built_in\">unalias</span> h             <span class=\"comment\"># 取消别名</span></div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">history</span> [n]</div><div class=\"line\">$ <span class=\"built_in\">history</span> [-c]</div><div class=\"line\">$ <span class=\"built_in\">history</span> [-raw] histfiles</div></pre></td></tr></table></figure>\n"},{"title":"Linux vim 基础命令","date":"2017-08-22T16:00:00.000Z","_content":"\n原文：http://linux.vbird.org/linux_basic/0310vi.php#vi_ex\n\n[TOC]\n## 三种模式\n\n### 一般指令模式 (command mode)\n    以 vi 打開一個檔案就直接進入一般指令模式了(這是預設的模式，也簡稱為一般模式)。在這個模式中， 你可以使用『上下左右』按鍵來移動游標，你可以使用『刪除字元』或『刪除整列』來處理檔案內容， 也可以使用『複製、貼上』來處理你的文件資料。\n\n### 編輯模式 (insert mode)\n    在一般指令模式中可以進行刪除、複製、貼上等等的動作，但是卻無法編輯文件內容的！ 要等到你按下『i, I, o, O, a, A, r, R』等任何一個字母之後才會進入編輯模式。注意了！通常在 Linux 中，按下這些按鍵時，在畫面的左下方會出現『 INSERT 或 REPLACE 』的字樣，此時才可以進行編輯。而如果要回到一般指令模式時， 則必須要按下『Esc』這個按鍵即可退出編輯模式。\n\n### 指令列命令模式 (command-line mode)\n    在一般模式當中，輸入『 : / ? 』三個中的任何一個按鈕，就可以將游標移動到最底下那一列。在這個模式當中， 可以提供你『搜尋資料』的動作，而讀取、存檔、大量取代字元、離開 vi 、顯示行號等等的動作則是在此模式中達成的！\n\n\n## 按鍵說明\n第一部份：一般指令模式可用的按鈕說明，游標移動、複製貼上、搜尋取代等\n### 移动光标的方法\n\n```bash\nh j k l(← ↓ ↑ →)    分别左下上右移动操作 配合数字可以移动多格 如：30j 向左移动格\n\n[Ctrl] + [f]\t    螢幕『向下』移動一頁，相當於 [Page Down]按鍵 (常用)\n[Ctrl] + [b]\t    螢幕『向上』移動一頁，相當於 [Page Up] 按鍵 (常用)\n[Ctrl] + [d]\t    螢幕『向下』移動半頁\n[Ctrl] + [u]\t    螢幕『向上』移動半頁\n\nn<space>\t        n 标示数字，数字加上空格，表示向右移动相应的格数\n0 或功能鍵[Home]\t数字0 可以移动到行首\n$ 或功能鍵[End]\t    移动到行尾\n\nG\t                移动到文档最后一行\nnG\t                n 表示数字，20G表示移动到第20列\ngg\t                移动到文档第一行，相当于1G\nn<Enter>\t        n 表示数字，表示移动多相应的行，等同于nG 常用\n\n# 不常用\nH\t                游標移動到這個螢幕的最上方那一列的第一個字元\nM\t                游標移動到這個螢幕的中央那一列的第一個字元\nL\t                游標移動到這個螢幕的最下方那一列的第一個字元\n+\t                游標移動到非空白字元的下一列\n-\t                游標移動到非空白字元的上一列\n```\n\n### 查找与替换\n\n```bash\n/word\t向游標之下尋找一個名稱為 word 的字串。例如要在檔案內搜尋 vbird 這個字串，就輸入 /vbird 即可！ (常用)\n?word\t向游標之上尋找一個字串名稱為 word 的字串。\nn\t    這個 n 是英文按鍵。代表『重複前一個搜尋的動作』。舉例來說， 如果剛剛我們執行 /vbird 去向下搜尋 vbird 這個字串，則按下 n 後，會向下繼續搜尋下一個名稱為 vbird 的字串。如果是執行 ?vbird 的話，那麼按下 n 則會向上繼續搜尋名稱為 vbird 的字串！\nN\t    這個 N 是英文按鍵。與 n 剛好相反，為『反向』進行前一個搜尋動作。 例如 /vbird 後，按下 N 則表示『向上』搜尋 vbird 。\n\n#使用 /word 配合 n 及 N 是非常有幫助的！可以讓你重複的找到一些你搜尋的關鍵字！\n\n:n1,n2s/word1/word2/g\tn1, n2 表示数字，替换 n1 行到 n2 行的单词\n:1,$s/word1/word2/g\t    全文替换，也可以写成 :%s/word1/word2/g\n:1,$s/word1/word2/gc\t全文替换，并出现确认提示\n```\n\n### 删除、复制和黏贴\n\n```bash\nx, X\t在一列字當中，x 為向後刪除一個字元 (相當於 [del] 按鍵)， X 為向前刪除一個字元(相當於 [backspace] 亦即是倒退鍵) (常用)\nnx\t    n 為數字，連續向後刪除 n 個字元。舉例來說，我要連續刪除 10 個字元， 『10x』。\ndd\t    刪除游標所在的那一整列(常用)\nndd\t    n 為數字。刪除游標所在的向下 n 列，例如 20dd 則是刪除 20 列 (常用)\nd1G\t    刪除游標所在到第一列的所有資料\ndG\t    刪除游標所在到最後一列的所有資料\nd$\t    刪除游標所在處，到該列的最後一個字元\nd0\t    那個是數字的 0 ，刪除游標所在處，到該列的最前面一個字元\nyy\t    複製游標所在的那一列(常用)\nnyy\t    n 為數字。複製游標所在的向下 n 列，例如 20yy 則是複製 20 列(常用)\ny1G\t    複製游標所在列到第一列的所有資料\nyG\t    複製游標所在列到最後一列的所有資料\ny0\t    複製游標所在的那個字元到該列行首的所有資料\ny$\t    複製游標所在的那個字元到該列行尾的所有資料\np, P    \tp 為將已複製的資料在游標下一列貼上，P 則為貼在游標上一列！ 舉例來說，我目前游標在第 20 列，且已經複製了 10 列資料。則按下 p 後， 那 10 列資料會貼在原本的 20 列之後，亦即由 21 列開始貼。但如果是按下 P 呢？ 那麼原本的第 20 列會被推到變成 30 列。 (常用)\nJ\t    將游標所在列與下一列的資料結合成同一列\nc\t    重複刪除多個資料，例如向下刪除 10 列，[ 10cj ]\nu\t    復原前一個動作。(常用)\n[Ctrl]+r\t重做上一個動作。(常用)\n\n# 這個 u 與 [Ctrl]+r 是很常用的指令！一個是復原，另一個則是重做一次～ 利用這兩個功能按鍵，你的編輯，嘿嘿！很快樂的啦！\n\n.\t    不要懷疑！這就是小數點！意思是重複前一個動作的意思。 如果你想要重複刪除、重複貼上等等動作，按下小數點『.』就好了！ (常用)\n```\n\n第二部份：一般指令模式切換到編輯模式的可用的按鈕說明\n\n### 进入插入或替换的编辑模式\n\n```bash\ni       在光标所在处插入\nI       在该行第一个非空字符处插\na       在光标后一个字符插入\nA       在该行最后一个字符后插入\no, O\t進入插入模式(Insert mode)：\no       在光标的下一行插入\nO       在光标的上一行插入\ncw      删除光标后第一个单词，并进入插入模式\n\nr, R\t進入取代模式(Replace mode)：\nr       只會取代游標所在的那一個字元一次；R會一直取代游標所在的文字，直到按下 ESC 為止；(常用)\n<C-a>   光标放在数字上，按下该组合键可以让数字加一\n\n# 上面這些按鍵中，在 vi 畫面的左下角處會出現『--INSERT--』或『--REPLACE--』的字樣。 由名稱就知道該動作了吧！！特別注意的是，我們上面也提過了，你想要在檔案裡面輸入字元時， 一定要在左下角處看到 INSERT 或 REPLACE 才能輸入喔！\n\n\n[Esc]\t退出編輯模式，回到一般指令模式中(常用)\n```\n\n第三部份：一般指令模式切換到指令列模式的可用按钮说明\n\n### 指令列模式的保存、离开等指令\n\n```bash\n:w\t                將編輯的資料寫入硬碟檔案中(常用)\n:w!\t                若檔案屬性為『唯讀』時，強制寫入該檔案。不過，到底能不能寫入， 還是跟你對該檔案的檔案權限有關啊！\n:q\t                離開 vi (常用)\n:q!\t                若曾修改過檔案，又不想儲存，使用 ! 為強制離開不儲存檔案。\n\n# 注意一下啊，那個驚嘆號 (!) 在 vi 當中，常常具有『強制』的意思～\n\n:wq\t                儲存後離開           ，若為 :wq! 則為強制儲存後離開 (常用)\nZZ\t                這是大寫的 Z 喔！若檔案沒有更動，則不儲存離開，若檔案已經被更動過，則儲存後離開！\n:w [filename]\t    將編輯的資料儲存成另一個檔案（類似另存新檔）\n:r [filename]\t    在編輯的資料中，讀入另一個檔案的資料。亦即將 『filename』 這個檔案內容加到游標所在列後面\n:n1,n2 w [filename]\t將 n1 到 n2 的內容儲存成 filename 這個檔案。\n:! command\t        暫時離開 vi 到指令列模式下執行 command 的顯示結果！例如『:! ls /home』即可在 vi 當中察看 /home 底下以 ls 輸出的檔案資訊！\n```\n\n### vim 环境的变更\n\n```bash\n:set nu\t    顯示行號，設定之後，會在每一列的字首顯示該列的行號\n:set nonu\t與 set nu 相反，為取消行號！\n```\n## 额外功能\n### vim 的保存文件、恢复与打开时的警告信息\n當我們在使用 vim 編輯時， vim 會在與被編輯的檔案的目錄下，再建立一個名為 .filename.swp 的檔案。 比如說我們在上一個小節談到的編輯 /tmp/vitest/man_db.conf 這個檔案時， vim 會主動的建立 /tmp/vitest/.man_db.conf.swp 的暫存檔，你對 man_db.conf 做的動作就會被記錄到這個 .man_db.conf.swp 當中喔！如果你的系統因為某些原因斷線了， 導致你編輯的檔案還沒有儲存，這個時候 .man_db.conf.swp 就能夠發揮救援的功能了！我們來測試一下吧！ 底下的練習有些部分的指令我們尚未談到，沒關係，你先照著做，後續再回來瞭解囉！\n```bash\n$ cd /tmp/vitest\n$ vim man_db.conf\n# 此時會進入到 vim 的畫面，請在 vim 的一般指令模式下按下『 [ctrl]-z 』的組合鍵\n\n[1]+  Stopped             vim man_db.conf  <==按下 [ctrl]-z 會告訴你這個訊息\n```\n當我們在 vim 的一般指令模式下按下 [ctrl]-z 的組合按鍵時，你的 vim 會被丟到背景去執行。回到命令提示字元後，接下來我們來模擬將 vim 的工作不正常的中斷吧！\n```bash\n$ ls -al\ndrwxrwxr-x.  2 dmtsai dmtsai    69 Jul  6 23:54 .\ndrwxrwxrwt. 17 root   root    4096 Jul  6 23:53 ..\n-rw-r--r--.  1 dmtsai dmtsai  4850 Jul  6 23:47 man_db.conf\n-rw-r--r--.  1 dmtsai dmtsai 16384 Jul  6 23:54 .man_db.conf.swp  <==就是他，暫存檔\n-rw-rw-r--.  1 dmtsai dmtsai  5442 Jul  6 23:35 man.test.config\n\n$ kill -9 %1 <==這裡模擬斷線停止 vim 工作\n$ ls -al .man_db.conf.swp\n-rw-r--r--. 1 dmtsai dmtsai 16384 Jul  6 23:54 .man_db.conf.swp  <==暫存檔還是會存在！\n\n$ vim man_db.conf\n\nE325: ATTENTION  <==錯誤代碼\nFound a swap file by the name \".man_db.conf.swp\"  <==底下數列說明有暫存檔的存在\n          owned by: dmtsai   dated: Mon Jul  6 23:54:16 2015\n         file name: /tmp/vitest/man_db.conf  <==這個暫存檔屬於哪個實際的檔案？\n          modified: no\n         user name: dmtsai   host name: study.centos.vbird\n        process ID: 31851\nWhile opening file \"man_db.conf\"\n             dated: Mon Jul  6 23:47:21 2015\n\n底下說明可能發生這個錯誤的兩個主要原因與解決方案！\n(1) Another program may be editing the same file.  If this is the case,\n    be careful not to end up with two different instances of the same\n    file when making changes.  Quit, or continue with caution.\n(2) An edit session for this file crashed.\n    If this is the case, use \":recover\" or \"vim -r man_db.conf\"\n    to recover the changes (see \":help recovery\").\n    If you did this already, delete the swap file \".man_db.conf.swp\"\n    to avoid this message.\n\nSwap file \".man_db.conf.swp\" already exists! 底下說明你可進行的動作\n[O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (Q)uit, (A)bort:\n```\n再次打开文件时，会出现六个按钮，他们的作用依次是：\n\n```bash\n[O]pen Read-Only：打開此檔案成為唯讀檔， 可以用在你只是想要查閱該檔案內容並不想要進行編輯行為時。一般來說，在上課時，如果你是登入到同學的電腦去看他的設定檔， 結果發現其實同學他自己也在編輯時，可以使用這個模式；\n\n(E)dit anyway：還是用正常的方式打開你要編輯的那個檔案， 並不會載入暫存檔的內容。不過很容易出現兩個使用者互相改變對方的檔案等問題！不好不好！\n\n(R)ecover：就是載入暫存檔的內容，用在你要救回之前未儲存的工作。 不過當你救回來並且儲存離開 vim 後，還是要手動自行刪除那個暫存檔喔！\n\n(D)elete it：你確定那個暫存檔是無用的！那麼開啟檔案前會先將這個暫存檔刪除！ 這個動作其實是比較常做的！因為你可能不確定這個暫存檔是怎麼來的，所以就刪除掉他吧！哈哈！\n\n(Q)uit：按下 q 就離開 vim ，不會進行任何動作回到命令提示字元。\n\n(A)bort：忽略這個編輯行為，感覺上與 quit 非常類似！ 也會送你回到命令提示字元就是囉！\n```\n\n### 多文件编辑\n\n很多同学任务高集成的IDE比vim好用，是因为vim不能操作一些事情，比如跨文件复制，但其实vim完全可以做到，首先下载文件：http://linux.vbird.org/linux_basic/0310vi/hosts 打开后如下所示:\n```bash\n192.168.1.1    host1.class.net\n192.168.1.2    host2.class.net\n192.168.1.3    host3.class.net\n192.168.1.4    host4.class.net\n.....中間省略......\n```\n\n我们再建一个新文件host2,并进行跨文件复制操作\n```bash\n$ touch host_copy\n$ vim hosts host_copy # 使用vim同时打开两个文件\n```\n下面我们会使用这几个命令\n```bash\n:n\t    編輯下一個檔案\n:N\t    編輯上一個檔案\n:files\t列出目前這個 vim 的開啟的所有檔案\n```\n\n```bash\n:files      # 再打开文件后一般模式下使用改名了查看有几个文件\n\n:files\n  1 %a   \"hosts\"                        line 1      # %a代表当前编辑的文件\n  2      \"host2\"                        line 0\n\n# 使用gg切换到第一行，使用4yy复制前四行\n:n          # 指令该命令编辑下一个文件\n\n# 使用p将刚才复制的内容粘贴到该文件中使用:q退出编辑并查看host2会发现刚才的内容已经复制过来了\n```\n\n\n\n\n\n\n```bash\nv\t        字元選擇，會將游標經過的地方反白選擇！\nV\t        列選擇，會將游標經過的列反白選擇！\n[Ctrl]+v    區塊選擇，可以用長方形的方式選擇資料\ny\t        將反白的地方複製起來\nd\t        將反白的地方刪除掉\np\t        將剛剛複製的區塊，在游標所在處貼上！\n```\n\n## 快替换\n```bash\n[Ctrl] + v 选中块\nc  输入替换文字\n<Esc> 完成替换\n```\n\n## 多窗口\n```bash\n:sp [filename]\t开启一个新窗口，如果有加 filename， 表示在新窗口开启一个新档案，否则表示两个窗口为同一个档案内容(同步显示)。\n[ctrl]+w+↓/j\t按键的按法是：先按下 [ctrl] 不放， 再按下 w 后放开所有的按键，然后再按下 j (或向下箭头键)，则光标可移动到下方的窗口。\n[ctrl]+w+↑/k\t同上，不过光标移动到上面的窗口。\n[ctrl]+w+q  \t其实就是 :q 结束离开啦！ 举例来说，如果我想要结束下方的窗口，那么利用 [ctrl]+w+↓ 移动到下方窗口后，按下 :q 即可离开， 也可以按下 [ctrl]+w+q 啊！\n```\n\n\n```bash\n# set compatible 就是让 vim 关闭所有扩展的功能，尽量模拟 vi 的行为。\n但这样就不应用 vim 的很多强大功能，所以一般没有什么特殊需要的话（比如执行很老的 vi 脚本），都要在 vim 的配置开始，写上 set nocompatible，关闭兼容模式。由于这个选项是最最基础的选项，会连带很多其它选项发生变动（称作副作用），所以它必需是第一个设定的选项。\nset nocompatible\n```\n\n## 快速选中段落\n```bash\nvip         # vip很好记\n```\n\n## 宏\nvim有个非常厉害的功能叫**宏**，它可以将你的操作进行宏录制，放到vim寄存器中，并按照你想要的方式播放出来\n\n### 操作\n\n- 首先准备一个文件，第一行为数字1\n- 光标放在1上并按下 qa（当然也可以 qb，qc，这只是录制宏的名字）开始录制，测试左下角会显示录制字样\n- 输入 yyp 复制当前行到下一行，并输入 <C-a> 将数字增加1，此时第二行数字为2\n- 按下 q 结束录制，并按下 @a 播放宏，此时第三行会变成3，按下 @@ 重复上次播放，第四行会变成4\n- 当按下 100@@ 时，宏会重复播放100次上次的播放记录，自动生成104行数据\n","source":"_posts/vim-2017-08-23-basic-cmd.md","raw":"---\ntitle: Linux vim 基础命令\ndate: 2017-08-23\ntags:\n---\n\n原文：http://linux.vbird.org/linux_basic/0310vi.php#vi_ex\n\n[TOC]\n## 三种模式\n\n### 一般指令模式 (command mode)\n    以 vi 打開一個檔案就直接進入一般指令模式了(這是預設的模式，也簡稱為一般模式)。在這個模式中， 你可以使用『上下左右』按鍵來移動游標，你可以使用『刪除字元』或『刪除整列』來處理檔案內容， 也可以使用『複製、貼上』來處理你的文件資料。\n\n### 編輯模式 (insert mode)\n    在一般指令模式中可以進行刪除、複製、貼上等等的動作，但是卻無法編輯文件內容的！ 要等到你按下『i, I, o, O, a, A, r, R』等任何一個字母之後才會進入編輯模式。注意了！通常在 Linux 中，按下這些按鍵時，在畫面的左下方會出現『 INSERT 或 REPLACE 』的字樣，此時才可以進行編輯。而如果要回到一般指令模式時， 則必須要按下『Esc』這個按鍵即可退出編輯模式。\n\n### 指令列命令模式 (command-line mode)\n    在一般模式當中，輸入『 : / ? 』三個中的任何一個按鈕，就可以將游標移動到最底下那一列。在這個模式當中， 可以提供你『搜尋資料』的動作，而讀取、存檔、大量取代字元、離開 vi 、顯示行號等等的動作則是在此模式中達成的！\n\n\n## 按鍵說明\n第一部份：一般指令模式可用的按鈕說明，游標移動、複製貼上、搜尋取代等\n### 移动光标的方法\n\n```bash\nh j k l(← ↓ ↑ →)    分别左下上右移动操作 配合数字可以移动多格 如：30j 向左移动格\n\n[Ctrl] + [f]\t    螢幕『向下』移動一頁，相當於 [Page Down]按鍵 (常用)\n[Ctrl] + [b]\t    螢幕『向上』移動一頁，相當於 [Page Up] 按鍵 (常用)\n[Ctrl] + [d]\t    螢幕『向下』移動半頁\n[Ctrl] + [u]\t    螢幕『向上』移動半頁\n\nn<space>\t        n 标示数字，数字加上空格，表示向右移动相应的格数\n0 或功能鍵[Home]\t数字0 可以移动到行首\n$ 或功能鍵[End]\t    移动到行尾\n\nG\t                移动到文档最后一行\nnG\t                n 表示数字，20G表示移动到第20列\ngg\t                移动到文档第一行，相当于1G\nn<Enter>\t        n 表示数字，表示移动多相应的行，等同于nG 常用\n\n# 不常用\nH\t                游標移動到這個螢幕的最上方那一列的第一個字元\nM\t                游標移動到這個螢幕的中央那一列的第一個字元\nL\t                游標移動到這個螢幕的最下方那一列的第一個字元\n+\t                游標移動到非空白字元的下一列\n-\t                游標移動到非空白字元的上一列\n```\n\n### 查找与替换\n\n```bash\n/word\t向游標之下尋找一個名稱為 word 的字串。例如要在檔案內搜尋 vbird 這個字串，就輸入 /vbird 即可！ (常用)\n?word\t向游標之上尋找一個字串名稱為 word 的字串。\nn\t    這個 n 是英文按鍵。代表『重複前一個搜尋的動作』。舉例來說， 如果剛剛我們執行 /vbird 去向下搜尋 vbird 這個字串，則按下 n 後，會向下繼續搜尋下一個名稱為 vbird 的字串。如果是執行 ?vbird 的話，那麼按下 n 則會向上繼續搜尋名稱為 vbird 的字串！\nN\t    這個 N 是英文按鍵。與 n 剛好相反，為『反向』進行前一個搜尋動作。 例如 /vbird 後，按下 N 則表示『向上』搜尋 vbird 。\n\n#使用 /word 配合 n 及 N 是非常有幫助的！可以讓你重複的找到一些你搜尋的關鍵字！\n\n:n1,n2s/word1/word2/g\tn1, n2 表示数字，替换 n1 行到 n2 行的单词\n:1,$s/word1/word2/g\t    全文替换，也可以写成 :%s/word1/word2/g\n:1,$s/word1/word2/gc\t全文替换，并出现确认提示\n```\n\n### 删除、复制和黏贴\n\n```bash\nx, X\t在一列字當中，x 為向後刪除一個字元 (相當於 [del] 按鍵)， X 為向前刪除一個字元(相當於 [backspace] 亦即是倒退鍵) (常用)\nnx\t    n 為數字，連續向後刪除 n 個字元。舉例來說，我要連續刪除 10 個字元， 『10x』。\ndd\t    刪除游標所在的那一整列(常用)\nndd\t    n 為數字。刪除游標所在的向下 n 列，例如 20dd 則是刪除 20 列 (常用)\nd1G\t    刪除游標所在到第一列的所有資料\ndG\t    刪除游標所在到最後一列的所有資料\nd$\t    刪除游標所在處，到該列的最後一個字元\nd0\t    那個是數字的 0 ，刪除游標所在處，到該列的最前面一個字元\nyy\t    複製游標所在的那一列(常用)\nnyy\t    n 為數字。複製游標所在的向下 n 列，例如 20yy 則是複製 20 列(常用)\ny1G\t    複製游標所在列到第一列的所有資料\nyG\t    複製游標所在列到最後一列的所有資料\ny0\t    複製游標所在的那個字元到該列行首的所有資料\ny$\t    複製游標所在的那個字元到該列行尾的所有資料\np, P    \tp 為將已複製的資料在游標下一列貼上，P 則為貼在游標上一列！ 舉例來說，我目前游標在第 20 列，且已經複製了 10 列資料。則按下 p 後， 那 10 列資料會貼在原本的 20 列之後，亦即由 21 列開始貼。但如果是按下 P 呢？ 那麼原本的第 20 列會被推到變成 30 列。 (常用)\nJ\t    將游標所在列與下一列的資料結合成同一列\nc\t    重複刪除多個資料，例如向下刪除 10 列，[ 10cj ]\nu\t    復原前一個動作。(常用)\n[Ctrl]+r\t重做上一個動作。(常用)\n\n# 這個 u 與 [Ctrl]+r 是很常用的指令！一個是復原，另一個則是重做一次～ 利用這兩個功能按鍵，你的編輯，嘿嘿！很快樂的啦！\n\n.\t    不要懷疑！這就是小數點！意思是重複前一個動作的意思。 如果你想要重複刪除、重複貼上等等動作，按下小數點『.』就好了！ (常用)\n```\n\n第二部份：一般指令模式切換到編輯模式的可用的按鈕說明\n\n### 进入插入或替换的编辑模式\n\n```bash\ni       在光标所在处插入\nI       在该行第一个非空字符处插\na       在光标后一个字符插入\nA       在该行最后一个字符后插入\no, O\t進入插入模式(Insert mode)：\no       在光标的下一行插入\nO       在光标的上一行插入\ncw      删除光标后第一个单词，并进入插入模式\n\nr, R\t進入取代模式(Replace mode)：\nr       只會取代游標所在的那一個字元一次；R會一直取代游標所在的文字，直到按下 ESC 為止；(常用)\n<C-a>   光标放在数字上，按下该组合键可以让数字加一\n\n# 上面這些按鍵中，在 vi 畫面的左下角處會出現『--INSERT--』或『--REPLACE--』的字樣。 由名稱就知道該動作了吧！！特別注意的是，我們上面也提過了，你想要在檔案裡面輸入字元時， 一定要在左下角處看到 INSERT 或 REPLACE 才能輸入喔！\n\n\n[Esc]\t退出編輯模式，回到一般指令模式中(常用)\n```\n\n第三部份：一般指令模式切換到指令列模式的可用按钮说明\n\n### 指令列模式的保存、离开等指令\n\n```bash\n:w\t                將編輯的資料寫入硬碟檔案中(常用)\n:w!\t                若檔案屬性為『唯讀』時，強制寫入該檔案。不過，到底能不能寫入， 還是跟你對該檔案的檔案權限有關啊！\n:q\t                離開 vi (常用)\n:q!\t                若曾修改過檔案，又不想儲存，使用 ! 為強制離開不儲存檔案。\n\n# 注意一下啊，那個驚嘆號 (!) 在 vi 當中，常常具有『強制』的意思～\n\n:wq\t                儲存後離開           ，若為 :wq! 則為強制儲存後離開 (常用)\nZZ\t                這是大寫的 Z 喔！若檔案沒有更動，則不儲存離開，若檔案已經被更動過，則儲存後離開！\n:w [filename]\t    將編輯的資料儲存成另一個檔案（類似另存新檔）\n:r [filename]\t    在編輯的資料中，讀入另一個檔案的資料。亦即將 『filename』 這個檔案內容加到游標所在列後面\n:n1,n2 w [filename]\t將 n1 到 n2 的內容儲存成 filename 這個檔案。\n:! command\t        暫時離開 vi 到指令列模式下執行 command 的顯示結果！例如『:! ls /home』即可在 vi 當中察看 /home 底下以 ls 輸出的檔案資訊！\n```\n\n### vim 环境的变更\n\n```bash\n:set nu\t    顯示行號，設定之後，會在每一列的字首顯示該列的行號\n:set nonu\t與 set nu 相反，為取消行號！\n```\n## 额外功能\n### vim 的保存文件、恢复与打开时的警告信息\n當我們在使用 vim 編輯時， vim 會在與被編輯的檔案的目錄下，再建立一個名為 .filename.swp 的檔案。 比如說我們在上一個小節談到的編輯 /tmp/vitest/man_db.conf 這個檔案時， vim 會主動的建立 /tmp/vitest/.man_db.conf.swp 的暫存檔，你對 man_db.conf 做的動作就會被記錄到這個 .man_db.conf.swp 當中喔！如果你的系統因為某些原因斷線了， 導致你編輯的檔案還沒有儲存，這個時候 .man_db.conf.swp 就能夠發揮救援的功能了！我們來測試一下吧！ 底下的練習有些部分的指令我們尚未談到，沒關係，你先照著做，後續再回來瞭解囉！\n```bash\n$ cd /tmp/vitest\n$ vim man_db.conf\n# 此時會進入到 vim 的畫面，請在 vim 的一般指令模式下按下『 [ctrl]-z 』的組合鍵\n\n[1]+  Stopped             vim man_db.conf  <==按下 [ctrl]-z 會告訴你這個訊息\n```\n當我們在 vim 的一般指令模式下按下 [ctrl]-z 的組合按鍵時，你的 vim 會被丟到背景去執行。回到命令提示字元後，接下來我們來模擬將 vim 的工作不正常的中斷吧！\n```bash\n$ ls -al\ndrwxrwxr-x.  2 dmtsai dmtsai    69 Jul  6 23:54 .\ndrwxrwxrwt. 17 root   root    4096 Jul  6 23:53 ..\n-rw-r--r--.  1 dmtsai dmtsai  4850 Jul  6 23:47 man_db.conf\n-rw-r--r--.  1 dmtsai dmtsai 16384 Jul  6 23:54 .man_db.conf.swp  <==就是他，暫存檔\n-rw-rw-r--.  1 dmtsai dmtsai  5442 Jul  6 23:35 man.test.config\n\n$ kill -9 %1 <==這裡模擬斷線停止 vim 工作\n$ ls -al .man_db.conf.swp\n-rw-r--r--. 1 dmtsai dmtsai 16384 Jul  6 23:54 .man_db.conf.swp  <==暫存檔還是會存在！\n\n$ vim man_db.conf\n\nE325: ATTENTION  <==錯誤代碼\nFound a swap file by the name \".man_db.conf.swp\"  <==底下數列說明有暫存檔的存在\n          owned by: dmtsai   dated: Mon Jul  6 23:54:16 2015\n         file name: /tmp/vitest/man_db.conf  <==這個暫存檔屬於哪個實際的檔案？\n          modified: no\n         user name: dmtsai   host name: study.centos.vbird\n        process ID: 31851\nWhile opening file \"man_db.conf\"\n             dated: Mon Jul  6 23:47:21 2015\n\n底下說明可能發生這個錯誤的兩個主要原因與解決方案！\n(1) Another program may be editing the same file.  If this is the case,\n    be careful not to end up with two different instances of the same\n    file when making changes.  Quit, or continue with caution.\n(2) An edit session for this file crashed.\n    If this is the case, use \":recover\" or \"vim -r man_db.conf\"\n    to recover the changes (see \":help recovery\").\n    If you did this already, delete the swap file \".man_db.conf.swp\"\n    to avoid this message.\n\nSwap file \".man_db.conf.swp\" already exists! 底下說明你可進行的動作\n[O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (Q)uit, (A)bort:\n```\n再次打开文件时，会出现六个按钮，他们的作用依次是：\n\n```bash\n[O]pen Read-Only：打開此檔案成為唯讀檔， 可以用在你只是想要查閱該檔案內容並不想要進行編輯行為時。一般來說，在上課時，如果你是登入到同學的電腦去看他的設定檔， 結果發現其實同學他自己也在編輯時，可以使用這個模式；\n\n(E)dit anyway：還是用正常的方式打開你要編輯的那個檔案， 並不會載入暫存檔的內容。不過很容易出現兩個使用者互相改變對方的檔案等問題！不好不好！\n\n(R)ecover：就是載入暫存檔的內容，用在你要救回之前未儲存的工作。 不過當你救回來並且儲存離開 vim 後，還是要手動自行刪除那個暫存檔喔！\n\n(D)elete it：你確定那個暫存檔是無用的！那麼開啟檔案前會先將這個暫存檔刪除！ 這個動作其實是比較常做的！因為你可能不確定這個暫存檔是怎麼來的，所以就刪除掉他吧！哈哈！\n\n(Q)uit：按下 q 就離開 vim ，不會進行任何動作回到命令提示字元。\n\n(A)bort：忽略這個編輯行為，感覺上與 quit 非常類似！ 也會送你回到命令提示字元就是囉！\n```\n\n### 多文件编辑\n\n很多同学任务高集成的IDE比vim好用，是因为vim不能操作一些事情，比如跨文件复制，但其实vim完全可以做到，首先下载文件：http://linux.vbird.org/linux_basic/0310vi/hosts 打开后如下所示:\n```bash\n192.168.1.1    host1.class.net\n192.168.1.2    host2.class.net\n192.168.1.3    host3.class.net\n192.168.1.4    host4.class.net\n.....中間省略......\n```\n\n我们再建一个新文件host2,并进行跨文件复制操作\n```bash\n$ touch host_copy\n$ vim hosts host_copy # 使用vim同时打开两个文件\n```\n下面我们会使用这几个命令\n```bash\n:n\t    編輯下一個檔案\n:N\t    編輯上一個檔案\n:files\t列出目前這個 vim 的開啟的所有檔案\n```\n\n```bash\n:files      # 再打开文件后一般模式下使用改名了查看有几个文件\n\n:files\n  1 %a   \"hosts\"                        line 1      # %a代表当前编辑的文件\n  2      \"host2\"                        line 0\n\n# 使用gg切换到第一行，使用4yy复制前四行\n:n          # 指令该命令编辑下一个文件\n\n# 使用p将刚才复制的内容粘贴到该文件中使用:q退出编辑并查看host2会发现刚才的内容已经复制过来了\n```\n\n\n\n\n\n\n```bash\nv\t        字元選擇，會將游標經過的地方反白選擇！\nV\t        列選擇，會將游標經過的列反白選擇！\n[Ctrl]+v    區塊選擇，可以用長方形的方式選擇資料\ny\t        將反白的地方複製起來\nd\t        將反白的地方刪除掉\np\t        將剛剛複製的區塊，在游標所在處貼上！\n```\n\n## 快替换\n```bash\n[Ctrl] + v 选中块\nc  输入替换文字\n<Esc> 完成替换\n```\n\n## 多窗口\n```bash\n:sp [filename]\t开启一个新窗口，如果有加 filename， 表示在新窗口开启一个新档案，否则表示两个窗口为同一个档案内容(同步显示)。\n[ctrl]+w+↓/j\t按键的按法是：先按下 [ctrl] 不放， 再按下 w 后放开所有的按键，然后再按下 j (或向下箭头键)，则光标可移动到下方的窗口。\n[ctrl]+w+↑/k\t同上，不过光标移动到上面的窗口。\n[ctrl]+w+q  \t其实就是 :q 结束离开啦！ 举例来说，如果我想要结束下方的窗口，那么利用 [ctrl]+w+↓ 移动到下方窗口后，按下 :q 即可离开， 也可以按下 [ctrl]+w+q 啊！\n```\n\n\n```bash\n# set compatible 就是让 vim 关闭所有扩展的功能，尽量模拟 vi 的行为。\n但这样就不应用 vim 的很多强大功能，所以一般没有什么特殊需要的话（比如执行很老的 vi 脚本），都要在 vim 的配置开始，写上 set nocompatible，关闭兼容模式。由于这个选项是最最基础的选项，会连带很多其它选项发生变动（称作副作用），所以它必需是第一个设定的选项。\nset nocompatible\n```\n\n## 快速选中段落\n```bash\nvip         # vip很好记\n```\n\n## 宏\nvim有个非常厉害的功能叫**宏**，它可以将你的操作进行宏录制，放到vim寄存器中，并按照你想要的方式播放出来\n\n### 操作\n\n- 首先准备一个文件，第一行为数字1\n- 光标放在1上并按下 qa（当然也可以 qb，qc，这只是录制宏的名字）开始录制，测试左下角会显示录制字样\n- 输入 yyp 复制当前行到下一行，并输入 <C-a> 将数字增加1，此时第二行数字为2\n- 按下 q 结束录制，并按下 @a 播放宏，此时第三行会变成3，按下 @@ 重复上次播放，第四行会变成4\n- 当按下 100@@ 时，宏会重复播放100次上次的播放记录，自动生成104行数据\n","slug":"vim-2017-08-23-basic-cmd","published":1,"updated":"2017-09-15T23:34:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9o001mkjxv7fjc79cb","content":"<p>原文：<a href=\"http://linux.vbird.org/linux_basic/0310vi.php#vi_ex\" target=\"_blank\" rel=\"external\">http://linux.vbird.org/linux_basic/0310vi.php#vi_ex</a></p>\n<p>[TOC]</p>\n<h2><span id=\"san-chong-mo-shi\">三种模式</span><a href=\"#san-chong-mo-shi\" class=\"header-anchor\"></a></h2><h3><span id=\"yi-ban-zhi-ling-mo-shi-command-mode\">一般指令模式 (command mode)</span><a href=\"#yi-ban-zhi-ling-mo-shi-command-mode\" class=\"header-anchor\"></a></h3><pre><code>以 vi 打開一個檔案就直接進入一般指令模式了(這是預設的模式，也簡稱為一般模式)。在這個模式中， 你可以使用『上下左右』按鍵來移動游標，你可以使用『刪除字元』或『刪除整列』來處理檔案內容， 也可以使用『複製、貼上』來處理你的文件資料。\n</code></pre><h3><span id=\"bian-ji-mo-shi-insert-mode\">編輯模式 (insert mode)</span><a href=\"#bian-ji-mo-shi-insert-mode\" class=\"header-anchor\"></a></h3><pre><code>在一般指令模式中可以進行刪除、複製、貼上等等的動作，但是卻無法編輯文件內容的！ 要等到你按下『i, I, o, O, a, A, r, R』等任何一個字母之後才會進入編輯模式。注意了！通常在 Linux 中，按下這些按鍵時，在畫面的左下方會出現『 INSERT 或 REPLACE 』的字樣，此時才可以進行編輯。而如果要回到一般指令模式時， 則必須要按下『Esc』這個按鍵即可退出編輯模式。\n</code></pre><h3><span id=\"zhi-ling-lie-ming-ling-mo-shi-command-line-mode\">指令列命令模式 (command-line mode)</span><a href=\"#zhi-ling-lie-ming-ling-mo-shi-command-line-mode\" class=\"header-anchor\"></a></h3><pre><code>在一般模式當中，輸入『 : / ? 』三個中的任何一個按鈕，就可以將游標移動到最底下那一列。在這個模式當中， 可以提供你『搜尋資料』的動作，而讀取、存檔、大量取代字元、離開 vi 、顯示行號等等的動作則是在此模式中達成的！\n</code></pre><h2><span id=\"an-jian-shuo-ming\">按鍵說明</span><a href=\"#an-jian-shuo-ming\" class=\"header-anchor\"></a></h2><p>第一部份：一般指令模式可用的按鈕說明，游標移動、複製貼上、搜尋取代等</p>\n<h3><span id=\"yi-dong-guang-biao-de-fang-fa\">移动光标的方法</span><a href=\"#yi-dong-guang-biao-de-fang-fa\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">h j k l(← ↓ ↑ →)    分别左下上右移动操作 配合数字可以移动多格 如：30j 向左移动格</div><div class=\"line\"></div><div class=\"line\">[Ctrl] + [f]\t    螢幕『向下』移動一頁，相當於 [Page Down]按鍵 (常用)</div><div class=\"line\">[Ctrl] + [b]\t    螢幕『向上』移動一頁，相當於 [Page Up] 按鍵 (常用)</div><div class=\"line\">[Ctrl] + [d]\t    螢幕『向下』移動半頁</div><div class=\"line\">[Ctrl] + [u]\t    螢幕『向上』移動半頁</div><div class=\"line\"></div><div class=\"line\">n&lt;space&gt;\t        n 标示数字，数字加上空格，表示向右移动相应的格数</div><div class=\"line\">0 或功能鍵[Home]\t数字0 可以移动到行首</div><div class=\"line\">$ 或功能鍵[End]\t    移动到行尾</div><div class=\"line\"></div><div class=\"line\">G\t                移动到文档最后一行</div><div class=\"line\">nG\t                n 表示数字，20G表示移动到第20列</div><div class=\"line\">gg\t                移动到文档第一行，相当于1G</div><div class=\"line\">n&lt;Enter&gt;\t        n 表示数字，表示移动多相应的行，等同于nG 常用</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 不常用</span></div><div class=\"line\">H\t                游標移動到這個螢幕的最上方那一列的第一個字元</div><div class=\"line\">M\t                游標移動到這個螢幕的中央那一列的第一個字元</div><div class=\"line\">L\t                游標移動到這個螢幕的最下方那一列的第一個字元</div><div class=\"line\">+\t                游標移動到非空白字元的下一列</div><div class=\"line\">-\t                游標移動到非空白字元的上一列</div></pre></td></tr></table></figure>\n<h3><span id=\"cha-zhao-yu-ti-huan\">查找与替换</span><a href=\"#cha-zhao-yu-ti-huan\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/word\t向游標之下尋找一個名稱為 word 的字串。例如要在檔案內搜尋 vbird 這個字串，就輸入 /vbird 即可！ (常用)</div><div class=\"line\">?word\t向游標之上尋找一個字串名稱為 word 的字串。</div><div class=\"line\">n\t    這個 n 是英文按鍵。代表『重複前一個搜尋的動作』。舉例來說， 如果剛剛我們執行 /vbird 去向下搜尋 vbird 這個字串，則按下 n 後，會向下繼續搜尋下一個名稱為 vbird 的字串。如果是執行 ?vbird 的話，那麼按下 n 則會向上繼續搜尋名稱為 vbird 的字串！</div><div class=\"line\">N\t    這個 N 是英文按鍵。與 n 剛好相反，為『反向』進行前一個搜尋動作。 例如 /vbird 後，按下 N 則表示『向上』搜尋 vbird 。</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#使用 /word 配合 n 及 N 是非常有幫助的！可以讓你重複的找到一些你搜尋的關鍵字！</span></div><div class=\"line\"></div><div class=\"line\">:n1,n2s/word1/word2/g\tn1, n2 表示数字，替换 n1 行到 n2 行的单词</div><div class=\"line\">:1,<span class=\"variable\">$s</span>/word1/word2/g\t    全文替换，也可以写成 :%s/word1/word2/g</div><div class=\"line\">:1,<span class=\"variable\">$s</span>/word1/word2/gc\t全文替换，并出现确认提示</div></pre></td></tr></table></figure>\n<h3><span id=\"shan-chu-fu-zhi-he-nian-tie\">删除、复制和黏贴</span><a href=\"#shan-chu-fu-zhi-he-nian-tie\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">x, X\t在一列字當中，x 為向後刪除一個字元 (相當於 [del] 按鍵)， X 為向前刪除一個字元(相當於 [backspace] 亦即是倒退鍵) (常用)</div><div class=\"line\">nx\t    n 為數字，連續向後刪除 n 個字元。舉例來說，我要連續刪除 10 個字元， 『10x』。</div><div class=\"line\">dd\t    刪除游標所在的那一整列(常用)</div><div class=\"line\">ndd\t    n 為數字。刪除游標所在的向下 n 列，例如 20dd 則是刪除 20 列 (常用)</div><div class=\"line\">d1G\t    刪除游標所在到第一列的所有資料</div><div class=\"line\">dG\t    刪除游標所在到最後一列的所有資料</div><div class=\"line\">d$\t    刪除游標所在處，到該列的最後一個字元</div><div class=\"line\">d0\t    那個是數字的 0 ，刪除游標所在處，到該列的最前面一個字元</div><div class=\"line\">yy\t    複製游標所在的那一列(常用)</div><div class=\"line\">nyy\t    n 為數字。複製游標所在的向下 n 列，例如 20yy 則是複製 20 列(常用)</div><div class=\"line\">y1G\t    複製游標所在列到第一列的所有資料</div><div class=\"line\">yG\t    複製游標所在列到最後一列的所有資料</div><div class=\"line\">y0\t    複製游標所在的那個字元到該列行首的所有資料</div><div class=\"line\">y$\t    複製游標所在的那個字元到該列行尾的所有資料</div><div class=\"line\">p, P    \tp 為將已複製的資料在游標下一列貼上，P 則為貼在游標上一列！ 舉例來說，我目前游標在第 20 列，且已經複製了 10 列資料。則按下 p 後， 那 10 列資料會貼在原本的 20 列之後，亦即由 21 列開始貼。但如果是按下 P 呢？ 那麼原本的第 20 列會被推到變成 30 列。 (常用)</div><div class=\"line\">J\t    將游標所在列與下一列的資料結合成同一列</div><div class=\"line\">c\t    重複刪除多個資料，例如向下刪除 10 列，[ 10cj ]</div><div class=\"line\">u\t    復原前一個動作。(常用)</div><div class=\"line\">[Ctrl]+r\t重做上一個動作。(常用)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 這個 u 與 [Ctrl]+r 是很常用的指令！一個是復原，另一個則是重做一次～ 利用這兩個功能按鍵，你的編輯，嘿嘿！很快樂的啦！</span></div><div class=\"line\"></div><div class=\"line\">.\t    不要懷疑！這就是小數點！意思是重複前一個動作的意思。 如果你想要重複刪除、重複貼上等等動作，按下小數點『.』就好了！ (常用)</div></pre></td></tr></table></figure>\n<p>第二部份：一般指令模式切換到編輯模式的可用的按鈕說明</p>\n<h3><span id=\"jin-ru-cha-ru-huo-ti-huan-de-bian-ji-mo-shi\">进入插入或替换的编辑模式</span><a href=\"#jin-ru-cha-ru-huo-ti-huan-de-bian-ji-mo-shi\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">i       在光标所在处插入</div><div class=\"line\">I       在该行第一个非空字符处插</div><div class=\"line\">a       在光标后一个字符插入</div><div class=\"line\">A       在该行最后一个字符后插入</div><div class=\"line\">o, O\t進入插入模式(Insert mode)：</div><div class=\"line\">o       在光标的下一行插入</div><div class=\"line\">O       在光标的上一行插入</div><div class=\"line\">cw      删除光标后第一个单词，并进入插入模式</div><div class=\"line\"></div><div class=\"line\">r, R\t進入取代模式(Replace mode)：</div><div class=\"line\">r       只會取代游標所在的那一個字元一次；R會一直取代游標所在的文字，直到按下 ESC 為止；(常用)</div><div class=\"line\">&lt;C<span class=\"_\">-a</span>&gt;   光标放在数字上，按下该组合键可以让数字加一</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 上面這些按鍵中，在 vi 畫面的左下角處會出現『--INSERT--』或『--REPLACE--』的字樣。 由名稱就知道該動作了吧！！特別注意的是，我們上面也提過了，你想要在檔案裡面輸入字元時， 一定要在左下角處看到 INSERT 或 REPLACE 才能輸入喔！</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">[Esc]\t退出編輯模式，回到一般指令模式中(常用)</div></pre></td></tr></table></figure>\n<p>第三部份：一般指令模式切換到指令列模式的可用按钮说明</p>\n<h3><span id=\"zhi-ling-lie-mo-shi-de-bao-cun-chi-kai-deng-zhi-ling\">指令列模式的保存、离开等指令</span><a href=\"#zhi-ling-lie-mo-shi-de-bao-cun-chi-kai-deng-zhi-ling\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">:w\t                將編輯的資料寫入硬碟檔案中(常用)</div><div class=\"line\">:w!\t                若檔案屬性為『唯讀』時，強制寫入該檔案。不過，到底能不能寫入， 還是跟你對該檔案的檔案權限有關啊！</div><div class=\"line\">:q\t                離開 vi (常用)</div><div class=\"line\">:q!\t                若曾修改過檔案，又不想儲存，使用 ! 為強制離開不儲存檔案。</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 注意一下啊，那個驚嘆號 (!) 在 vi 當中，常常具有『強制』的意思～</span></div><div class=\"line\"></div><div class=\"line\">:wq\t                儲存後離開           ，若為 :wq! 則為強制儲存後離開 (常用)</div><div class=\"line\">ZZ\t                這是大寫的 Z 喔！若檔案沒有更動，則不儲存離開，若檔案已經被更動過，則儲存後離開！</div><div class=\"line\">:w [filename]\t    將編輯的資料儲存成另一個檔案（類似另存新檔）</div><div class=\"line\">:r [filename]\t    在編輯的資料中，讀入另一個檔案的資料。亦即將 『filename』 這個檔案內容加到游標所在列後面</div><div class=\"line\">:n1,n2 w [filename]\t將 n1 到 n2 的內容儲存成 filename 這個檔案。</div><div class=\"line\">:! <span class=\"built_in\">command</span>\t        暫時離開 vi 到指令列模式下執行 <span class=\"built_in\">command</span> 的顯示結果！例如『:! ls /home』即可在 vi 當中察看 /home 底下以 ls 輸出的檔案資訊！</div></pre></td></tr></table></figure>\n<h3><span id=\"vim-huan-jing-de-bian-geng\">vim 环境的变更</span><a href=\"#vim-huan-jing-de-bian-geng\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">:<span class=\"built_in\">set</span> nu\t    顯示行號，設定之後，會在每一列的字首顯示該列的行號</div><div class=\"line\">:<span class=\"built_in\">set</span> nonu\t與 <span class=\"built_in\">set</span> nu 相反，為取消行號！</div></pre></td></tr></table></figure>\n<h2><span id=\"e-wai-gong-neng\">额外功能</span><a href=\"#e-wai-gong-neng\" class=\"header-anchor\"></a></h2><h3><span id=\"vim-de-bao-cun-wen-jian-hui-fu-yu-da-kai-shi-de-jing-gao-xin-xi\">vim 的保存文件、恢复与打开时的警告信息</span><a href=\"#vim-de-bao-cun-wen-jian-hui-fu-yu-da-kai-shi-de-jing-gao-xin-xi\" class=\"header-anchor\"></a></h3><p>當我們在使用 vim 編輯時， vim 會在與被編輯的檔案的目錄下，再建立一個名為 .filename.swp 的檔案。 比如說我們在上一個小節談到的編輯 /tmp/vitest/man_db.conf 這個檔案時， vim 會主動的建立 /tmp/vitest/.man_db.conf.swp 的暫存檔，你對 man_db.conf 做的動作就會被記錄到這個 .man_db.conf.swp 當中喔！如果你的系統因為某些原因斷線了， 導致你編輯的檔案還沒有儲存，這個時候 .man_db.conf.swp 就能夠發揮救援的功能了！我們來測試一下吧！ 底下的練習有些部分的指令我們尚未談到，沒關係，你先照著做，後續再回來瞭解囉！<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /tmp/vitest</div><div class=\"line\">$ vim man_db.conf</div><div class=\"line\"><span class=\"comment\"># 此時會進入到 vim 的畫面，請在 vim 的一般指令模式下按下『 [ctrl]-z 』的組合鍵</span></div><div class=\"line\"></div><div class=\"line\">[1]+  Stopped             vim man_db.conf  &lt;==按下 [ctrl]-z 會告訴你這個訊息</div></pre></td></tr></table></figure></p>\n<p>當我們在 vim 的一般指令模式下按下 [ctrl]-z 的組合按鍵時，你的 vim 會被丟到背景去執行。回到命令提示字元後，接下來我們來模擬將 vim 的工作不正常的中斷吧！<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al</div><div class=\"line\">drwxrwxr-x.  2 dmtsai dmtsai    69 Jul  6 23:54 .</div><div class=\"line\">drwxrwxrwt. 17 root   root    4096 Jul  6 23:53 ..</div><div class=\"line\">-rw-r--r--.  1 dmtsai dmtsai  4850 Jul  6 23:47 man_db.conf</div><div class=\"line\">-rw-r--r--.  1 dmtsai dmtsai 16384 Jul  6 23:54 .man_db.conf.swp  &lt;==就是他，暫存檔</div><div class=\"line\">-rw-rw-r--.  1 dmtsai dmtsai  5442 Jul  6 23:35 man.test.config</div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">kill</span> -9 %1 &lt;==這裡模擬斷線停止 vim 工作</div><div class=\"line\">$ ls -al .man_db.conf.swp</div><div class=\"line\">-rw-r--r--. 1 dmtsai dmtsai 16384 Jul  6 23:54 .man_db.conf.swp  &lt;==暫存檔還是會存在！</div><div class=\"line\"></div><div class=\"line\">$ vim man_db.conf</div><div class=\"line\"></div><div class=\"line\">E325: ATTENTION  &lt;==錯誤代碼</div><div class=\"line\">Found a swap file by the name <span class=\"string\">\".man_db.conf.swp\"</span>  &lt;==底下數列說明有暫存檔的存在</div><div class=\"line\">          owned by: dmtsai   dated: Mon Jul  6 23:54:16 2015</div><div class=\"line\">         file name: /tmp/vitest/man_db.conf  &lt;==這個暫存檔屬於哪個實際的檔案？</div><div class=\"line\">          modified: no</div><div class=\"line\">         user name: dmtsai   host name: study.centos.vbird</div><div class=\"line\">        process ID: 31851</div><div class=\"line\">While opening file <span class=\"string\">\"man_db.conf\"</span></div><div class=\"line\">             dated: Mon Jul  6 23:47:21 2015</div><div class=\"line\"></div><div class=\"line\">底下說明可能發生這個錯誤的兩個主要原因與解決方案！</div><div class=\"line\">(1) Another program may be editing the same file.  If this is the <span class=\"keyword\">case</span>,</div><div class=\"line\">    be careful not to end up with two different instances of the same</div><div class=\"line\">    file when making changes.  Quit, or <span class=\"built_in\">continue</span> with caution.</div><div class=\"line\">(2) An edit session <span class=\"keyword\">for</span> this file crashed.</div><div class=\"line\">    If this is the <span class=\"keyword\">case</span>, use <span class=\"string\">\":recover\"</span> or <span class=\"string\">\"vim -r man_db.conf\"</span></div><div class=\"line\">    to recover the changes (see <span class=\"string\">\":help recovery\"</span>).</div><div class=\"line\">    If you did this already, delete the swap file <span class=\"string\">\".man_db.conf.swp\"</span></div><div class=\"line\">    to avoid this message.</div><div class=\"line\"></div><div class=\"line\">Swap file <span class=\"string\">\".man_db.conf.swp\"</span> already exists! 底下說明你可進行的動作</div><div class=\"line\">[O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (Q)uit, (A)bort:</div></pre></td></tr></table></figure></p>\n<p>再次打开文件时，会出现六个按钮，他们的作用依次是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[O]pen Read-Only：打開此檔案成為唯讀檔， 可以用在你只是想要查閱該檔案內容並不想要進行編輯行為時。一般來說，在上課時，如果你是登入到同學的電腦去看他的設定檔， 結果發現其實同學他自己也在編輯時，可以使用這個模式；</div><div class=\"line\"></div><div class=\"line\">(E)dit anyway：還是用正常的方式打開你要編輯的那個檔案， 並不會載入暫存檔的內容。不過很容易出現兩個使用者互相改變對方的檔案等問題！不好不好！</div><div class=\"line\"></div><div class=\"line\">(R)ecover：就是載入暫存檔的內容，用在你要救回之前未儲存的工作。 不過當你救回來並且儲存離開 vim 後，還是要手動自行刪除那個暫存檔喔！</div><div class=\"line\"></div><div class=\"line\">(D)elete it：你確定那個暫存檔是無用的！那麼開啟檔案前會先將這個暫存檔刪除！ 這個動作其實是比較常做的！因為你可能不確定這個暫存檔是怎麼來的，所以就刪除掉他吧！哈哈！</div><div class=\"line\"></div><div class=\"line\">(Q)uit：按下 q 就離開 vim ，不會進行任何動作回到命令提示字元。</div><div class=\"line\"></div><div class=\"line\">(A)bort：忽略這個編輯行為，感覺上與 quit 非常類似！ 也會送你回到命令提示字元就是囉！</div></pre></td></tr></table></figure>\n<h3><span id=\"duo-wen-jian-bian-ji\">多文件编辑</span><a href=\"#duo-wen-jian-bian-ji\" class=\"header-anchor\"></a></h3><p>很多同学任务高集成的IDE比vim好用，是因为vim不能操作一些事情，比如跨文件复制，但其实vim完全可以做到，首先下载文件：<a href=\"http://linux.vbird.org/linux_basic/0310vi/hosts\" target=\"_blank\" rel=\"external\">http://linux.vbird.org/linux_basic/0310vi/hosts</a> 打开后如下所示:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">192.168.1.1    host1.class.net</div><div class=\"line\">192.168.1.2    host2.class.net</div><div class=\"line\">192.168.1.3    host3.class.net</div><div class=\"line\">192.168.1.4    host4.class.net</div><div class=\"line\">.....中間省略......</div></pre></td></tr></table></figure></p>\n<p>我们再建一个新文件host2,并进行跨文件复制操作<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ touch host_copy</div><div class=\"line\">$ vim hosts host_copy <span class=\"comment\"># 使用vim同时打开两个文件</span></div></pre></td></tr></table></figure></p>\n<p>下面我们会使用这几个命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">:n\t    編輯下一個檔案</div><div class=\"line\">:N\t    編輯上一個檔案</div><div class=\"line\">:files\t列出目前這個 vim 的開啟的所有檔案</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">:files      <span class=\"comment\"># 再打开文件后一般模式下使用改名了查看有几个文件</span></div><div class=\"line\"></div><div class=\"line\">:files</div><div class=\"line\">  1 %a   <span class=\"string\">\"hosts\"</span>                        line 1      <span class=\"comment\"># %a代表当前编辑的文件</span></div><div class=\"line\">  2      <span class=\"string\">\"host2\"</span>                        line 0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用gg切换到第一行，使用4yy复制前四行</span></div><div class=\"line\">:n          <span class=\"comment\"># 指令该命令编辑下一个文件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用p将刚才复制的内容粘贴到该文件中使用:q退出编辑并查看host2会发现刚才的内容已经复制过来了</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">v\t        字元選擇，會將游標經過的地方反白選擇！</div><div class=\"line\">V\t        列選擇，會將游標經過的列反白選擇！</div><div class=\"line\">[Ctrl]+v    區塊選擇，可以用長方形的方式選擇資料</div><div class=\"line\">y\t        將反白的地方複製起來</div><div class=\"line\">d\t        將反白的地方刪除掉</div><div class=\"line\">p\t        將剛剛複製的區塊，在游標所在處貼上！</div></pre></td></tr></table></figure>\n<h2><span id=\"kuai-ti-huan\">快替换</span><a href=\"#kuai-ti-huan\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Ctrl] + v 选中块</div><div class=\"line\">c  输入替换文字</div><div class=\"line\">&lt;Esc&gt; 完成替换</div></pre></td></tr></table></figure>\n<h2><span id=\"duo-chuang-kou\">多窗口</span><a href=\"#duo-chuang-kou\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">:sp [filename]\t开启一个新窗口，如果有加 filename， 表示在新窗口开启一个新档案，否则表示两个窗口为同一个档案内容(同步显示)。</div><div class=\"line\">[ctrl]+w+↓/j\t按键的按法是：先按下 [ctrl] 不放， 再按下 w 后放开所有的按键，然后再按下 j (或向下箭头键)，则光标可移动到下方的窗口。</div><div class=\"line\">[ctrl]+w+↑/k\t同上，不过光标移动到上面的窗口。</div><div class=\"line\">[ctrl]+w+q  \t其实就是 :q 结束离开啦！ 举例来说，如果我想要结束下方的窗口，那么利用 [ctrl]+w+↓ 移动到下方窗口后，按下 :q 即可离开， 也可以按下 [ctrl]+w+q 啊！</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># set compatible 就是让 vim 关闭所有扩展的功能，尽量模拟 vi 的行为。</span></div><div class=\"line\">但这样就不应用 vim 的很多强大功能，所以一般没有什么特殊需要的话（比如执行很老的 vi 脚本），都要在 vim 的配置开始，写上 <span class=\"built_in\">set</span> nocompatible，关闭兼容模式。由于这个选项是最最基础的选项，会连带很多其它选项发生变动（称作副作用），所以它必需是第一个设定的选项。</div><div class=\"line\"><span class=\"built_in\">set</span> nocompatible</div></pre></td></tr></table></figure>\n<h2><span id=\"kuai-su-xuan-zhong-duan-luo\">快速选中段落</span><a href=\"#kuai-su-xuan-zhong-duan-luo\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vip         <span class=\"comment\"># vip很好记</span></div></pre></td></tr></table></figure>\n<h2><span id=\"hong\">宏</span><a href=\"#hong\" class=\"header-anchor\"></a></h2><p>vim有个非常厉害的功能叫<strong>宏</strong>，它可以将你的操作进行宏录制，放到vim寄存器中，并按照你想要的方式播放出来</p>\n<h3><span id=\"cao-zuo\">操作</span><a href=\"#cao-zuo\" class=\"header-anchor\"></a></h3><ul>\n<li>首先准备一个文件，第一行为数字1</li>\n<li>光标放在1上并按下 qa（当然也可以 qb，qc，这只是录制宏的名字）开始录制，测试左下角会显示录制字样</li>\n<li>输入 yyp 复制当前行到下一行，并输入 <c-a> 将数字增加1，此时第二行数字为2</c-a></li>\n<li>按下 q 结束录制，并按下 @a 播放宏，此时第三行会变成3，按下 @@ 重复上次播放，第四行会变成4</li>\n<li>当按下 100@@ 时，宏会重复播放100次上次的播放记录，自动生成104行数据</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>原文：<a href=\"http://linux.vbird.org/linux_basic/0310vi.php#vi_ex\" target=\"_blank\" rel=\"external\">http://linux.vbird.org/linux_basic/0310vi.php#vi_ex</a></p>\n<p>[TOC]</p>\n<h2 id=\"三种模式\"><a href=\"#三种模式\" class=\"headerlink\" title=\"三种模式\"></a>三种模式</h2><h3 id=\"一般指令模式-command-mode\"><a href=\"#一般指令模式-command-mode\" class=\"headerlink\" title=\"一般指令模式 (command mode)\"></a>一般指令模式 (command mode)</h3><pre><code>以 vi 打開一個檔案就直接進入一般指令模式了(這是預設的模式，也簡稱為一般模式)。在這個模式中， 你可以使用『上下左右』按鍵來移動游標，你可以使用『刪除字元』或『刪除整列』來處理檔案內容， 也可以使用『複製、貼上』來處理你的文件資料。\n</code></pre><h3 id=\"編輯模式-insert-mode\"><a href=\"#編輯模式-insert-mode\" class=\"headerlink\" title=\"編輯模式 (insert mode)\"></a>編輯模式 (insert mode)</h3><pre><code>在一般指令模式中可以進行刪除、複製、貼上等等的動作，但是卻無法編輯文件內容的！ 要等到你按下『i, I, o, O, a, A, r, R』等任何一個字母之後才會進入編輯模式。注意了！通常在 Linux 中，按下這些按鍵時，在畫面的左下方會出現『 INSERT 或 REPLACE 』的字樣，此時才可以進行編輯。而如果要回到一般指令模式時， 則必須要按下『Esc』這個按鍵即可退出編輯模式。\n</code></pre><h3 id=\"指令列命令模式-command-line-mode\"><a href=\"#指令列命令模式-command-line-mode\" class=\"headerlink\" title=\"指令列命令模式 (command-line mode)\"></a>指令列命令模式 (command-line mode)</h3><pre><code>在一般模式當中，輸入『 : / ? 』三個中的任何一個按鈕，就可以將游標移動到最底下那一列。在這個模式當中， 可以提供你『搜尋資料』的動作，而讀取、存檔、大量取代字元、離開 vi 、顯示行號等等的動作則是在此模式中達成的！\n</code></pre><h2 id=\"按鍵說明\"><a href=\"#按鍵說明\" class=\"headerlink\" title=\"按鍵說明\"></a>按鍵說明</h2><p>第一部份：一般指令模式可用的按鈕說明，游標移動、複製貼上、搜尋取代等</p>\n<h3 id=\"移动光标的方法\"><a href=\"#移动光标的方法\" class=\"headerlink\" title=\"移动光标的方法\"></a>移动光标的方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">h j k l(← ↓ ↑ →)    分别左下上右移动操作 配合数字可以移动多格 如：30j 向左移动格</div><div class=\"line\"></div><div class=\"line\">[Ctrl] + [f]\t    螢幕『向下』移動一頁，相當於 [Page Down]按鍵 (常用)</div><div class=\"line\">[Ctrl] + [b]\t    螢幕『向上』移動一頁，相當於 [Page Up] 按鍵 (常用)</div><div class=\"line\">[Ctrl] + [d]\t    螢幕『向下』移動半頁</div><div class=\"line\">[Ctrl] + [u]\t    螢幕『向上』移動半頁</div><div class=\"line\"></div><div class=\"line\">n&lt;space&gt;\t        n 标示数字，数字加上空格，表示向右移动相应的格数</div><div class=\"line\">0 或功能鍵[Home]\t数字0 可以移动到行首</div><div class=\"line\">$ 或功能鍵[End]\t    移动到行尾</div><div class=\"line\"></div><div class=\"line\">G\t                移动到文档最后一行</div><div class=\"line\">nG\t                n 表示数字，20G表示移动到第20列</div><div class=\"line\">gg\t                移动到文档第一行，相当于1G</div><div class=\"line\">n&lt;Enter&gt;\t        n 表示数字，表示移动多相应的行，等同于nG 常用</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 不常用</span></div><div class=\"line\">H\t                游標移動到這個螢幕的最上方那一列的第一個字元</div><div class=\"line\">M\t                游標移動到這個螢幕的中央那一列的第一個字元</div><div class=\"line\">L\t                游標移動到這個螢幕的最下方那一列的第一個字元</div><div class=\"line\">+\t                游標移動到非空白字元的下一列</div><div class=\"line\">-\t                游標移動到非空白字元的上一列</div></pre></td></tr></table></figure>\n<h3 id=\"查找与替换\"><a href=\"#查找与替换\" class=\"headerlink\" title=\"查找与替换\"></a>查找与替换</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/word\t向游標之下尋找一個名稱為 word 的字串。例如要在檔案內搜尋 vbird 這個字串，就輸入 /vbird 即可！ (常用)</div><div class=\"line\">?word\t向游標之上尋找一個字串名稱為 word 的字串。</div><div class=\"line\">n\t    這個 n 是英文按鍵。代表『重複前一個搜尋的動作』。舉例來說， 如果剛剛我們執行 /vbird 去向下搜尋 vbird 這個字串，則按下 n 後，會向下繼續搜尋下一個名稱為 vbird 的字串。如果是執行 ?vbird 的話，那麼按下 n 則會向上繼續搜尋名稱為 vbird 的字串！</div><div class=\"line\">N\t    這個 N 是英文按鍵。與 n 剛好相反，為『反向』進行前一個搜尋動作。 例如 /vbird 後，按下 N 則表示『向上』搜尋 vbird 。</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#使用 /word 配合 n 及 N 是非常有幫助的！可以讓你重複的找到一些你搜尋的關鍵字！</span></div><div class=\"line\"></div><div class=\"line\">:n1,n2s/word1/word2/g\tn1, n2 表示数字，替换 n1 行到 n2 行的单词</div><div class=\"line\">:1,<span class=\"variable\">$s</span>/word1/word2/g\t    全文替换，也可以写成 :%s/word1/word2/g</div><div class=\"line\">:1,<span class=\"variable\">$s</span>/word1/word2/gc\t全文替换，并出现确认提示</div></pre></td></tr></table></figure>\n<h3 id=\"删除、复制和黏贴\"><a href=\"#删除、复制和黏贴\" class=\"headerlink\" title=\"删除、复制和黏贴\"></a>删除、复制和黏贴</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">x, X\t在一列字當中，x 為向後刪除一個字元 (相當於 [del] 按鍵)， X 為向前刪除一個字元(相當於 [backspace] 亦即是倒退鍵) (常用)</div><div class=\"line\">nx\t    n 為數字，連續向後刪除 n 個字元。舉例來說，我要連續刪除 10 個字元， 『10x』。</div><div class=\"line\">dd\t    刪除游標所在的那一整列(常用)</div><div class=\"line\">ndd\t    n 為數字。刪除游標所在的向下 n 列，例如 20dd 則是刪除 20 列 (常用)</div><div class=\"line\">d1G\t    刪除游標所在到第一列的所有資料</div><div class=\"line\">dG\t    刪除游標所在到最後一列的所有資料</div><div class=\"line\">d$\t    刪除游標所在處，到該列的最後一個字元</div><div class=\"line\">d0\t    那個是數字的 0 ，刪除游標所在處，到該列的最前面一個字元</div><div class=\"line\">yy\t    複製游標所在的那一列(常用)</div><div class=\"line\">nyy\t    n 為數字。複製游標所在的向下 n 列，例如 20yy 則是複製 20 列(常用)</div><div class=\"line\">y1G\t    複製游標所在列到第一列的所有資料</div><div class=\"line\">yG\t    複製游標所在列到最後一列的所有資料</div><div class=\"line\">y0\t    複製游標所在的那個字元到該列行首的所有資料</div><div class=\"line\">y$\t    複製游標所在的那個字元到該列行尾的所有資料</div><div class=\"line\">p, P    \tp 為將已複製的資料在游標下一列貼上，P 則為貼在游標上一列！ 舉例來說，我目前游標在第 20 列，且已經複製了 10 列資料。則按下 p 後， 那 10 列資料會貼在原本的 20 列之後，亦即由 21 列開始貼。但如果是按下 P 呢？ 那麼原本的第 20 列會被推到變成 30 列。 (常用)</div><div class=\"line\">J\t    將游標所在列與下一列的資料結合成同一列</div><div class=\"line\">c\t    重複刪除多個資料，例如向下刪除 10 列，[ 10cj ]</div><div class=\"line\">u\t    復原前一個動作。(常用)</div><div class=\"line\">[Ctrl]+r\t重做上一個動作。(常用)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 這個 u 與 [Ctrl]+r 是很常用的指令！一個是復原，另一個則是重做一次～ 利用這兩個功能按鍵，你的編輯，嘿嘿！很快樂的啦！</span></div><div class=\"line\"></div><div class=\"line\">.\t    不要懷疑！這就是小數點！意思是重複前一個動作的意思。 如果你想要重複刪除、重複貼上等等動作，按下小數點『.』就好了！ (常用)</div></pre></td></tr></table></figure>\n<p>第二部份：一般指令模式切換到編輯模式的可用的按鈕說明</p>\n<h3 id=\"进入插入或替换的编辑模式\"><a href=\"#进入插入或替换的编辑模式\" class=\"headerlink\" title=\"进入插入或替换的编辑模式\"></a>进入插入或替换的编辑模式</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">i       在光标所在处插入</div><div class=\"line\">I       在该行第一个非空字符处插</div><div class=\"line\">a       在光标后一个字符插入</div><div class=\"line\">A       在该行最后一个字符后插入</div><div class=\"line\">o, O\t進入插入模式(Insert mode)：</div><div class=\"line\">o       在光标的下一行插入</div><div class=\"line\">O       在光标的上一行插入</div><div class=\"line\">cw      删除光标后第一个单词，并进入插入模式</div><div class=\"line\"></div><div class=\"line\">r, R\t進入取代模式(Replace mode)：</div><div class=\"line\">r       只會取代游標所在的那一個字元一次；R會一直取代游標所在的文字，直到按下 ESC 為止；(常用)</div><div class=\"line\">&lt;C<span class=\"_\">-a</span>&gt;   光标放在数字上，按下该组合键可以让数字加一</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 上面這些按鍵中，在 vi 畫面的左下角處會出現『--INSERT--』或『--REPLACE--』的字樣。 由名稱就知道該動作了吧！！特別注意的是，我們上面也提過了，你想要在檔案裡面輸入字元時， 一定要在左下角處看到 INSERT 或 REPLACE 才能輸入喔！</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">[Esc]\t退出編輯模式，回到一般指令模式中(常用)</div></pre></td></tr></table></figure>\n<p>第三部份：一般指令模式切換到指令列模式的可用按钮说明</p>\n<h3 id=\"指令列模式的保存、离开等指令\"><a href=\"#指令列模式的保存、离开等指令\" class=\"headerlink\" title=\"指令列模式的保存、离开等指令\"></a>指令列模式的保存、离开等指令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">:w\t                將編輯的資料寫入硬碟檔案中(常用)</div><div class=\"line\">:w!\t                若檔案屬性為『唯讀』時，強制寫入該檔案。不過，到底能不能寫入， 還是跟你對該檔案的檔案權限有關啊！</div><div class=\"line\">:q\t                離開 vi (常用)</div><div class=\"line\">:q!\t                若曾修改過檔案，又不想儲存，使用 ! 為強制離開不儲存檔案。</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 注意一下啊，那個驚嘆號 (!) 在 vi 當中，常常具有『強制』的意思～</span></div><div class=\"line\"></div><div class=\"line\">:wq\t                儲存後離開           ，若為 :wq! 則為強制儲存後離開 (常用)</div><div class=\"line\">ZZ\t                這是大寫的 Z 喔！若檔案沒有更動，則不儲存離開，若檔案已經被更動過，則儲存後離開！</div><div class=\"line\">:w [filename]\t    將編輯的資料儲存成另一個檔案（類似另存新檔）</div><div class=\"line\">:r [filename]\t    在編輯的資料中，讀入另一個檔案的資料。亦即將 『filename』 這個檔案內容加到游標所在列後面</div><div class=\"line\">:n1,n2 w [filename]\t將 n1 到 n2 的內容儲存成 filename 這個檔案。</div><div class=\"line\">:! <span class=\"built_in\">command</span>\t        暫時離開 vi 到指令列模式下執行 <span class=\"built_in\">command</span> 的顯示結果！例如『:! ls /home』即可在 vi 當中察看 /home 底下以 ls 輸出的檔案資訊！</div></pre></td></tr></table></figure>\n<h3 id=\"vim-环境的变更\"><a href=\"#vim-环境的变更\" class=\"headerlink\" title=\"vim 环境的变更\"></a>vim 环境的变更</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">:<span class=\"built_in\">set</span> nu\t    顯示行號，設定之後，會在每一列的字首顯示該列的行號</div><div class=\"line\">:<span class=\"built_in\">set</span> nonu\t與 <span class=\"built_in\">set</span> nu 相反，為取消行號！</div></pre></td></tr></table></figure>\n<h2 id=\"额外功能\"><a href=\"#额外功能\" class=\"headerlink\" title=\"额外功能\"></a>额外功能</h2><h3 id=\"vim-的保存文件、恢复与打开时的警告信息\"><a href=\"#vim-的保存文件、恢复与打开时的警告信息\" class=\"headerlink\" title=\"vim 的保存文件、恢复与打开时的警告信息\"></a>vim 的保存文件、恢复与打开时的警告信息</h3><p>當我們在使用 vim 編輯時， vim 會在與被編輯的檔案的目錄下，再建立一個名為 .filename.swp 的檔案。 比如說我們在上一個小節談到的編輯 /tmp/vitest/man_db.conf 這個檔案時， vim 會主動的建立 /tmp/vitest/.man_db.conf.swp 的暫存檔，你對 man_db.conf 做的動作就會被記錄到這個 .man_db.conf.swp 當中喔！如果你的系統因為某些原因斷線了， 導致你編輯的檔案還沒有儲存，這個時候 .man_db.conf.swp 就能夠發揮救援的功能了！我們來測試一下吧！ 底下的練習有些部分的指令我們尚未談到，沒關係，你先照著做，後續再回來瞭解囉！<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /tmp/vitest</div><div class=\"line\">$ vim man_db.conf</div><div class=\"line\"><span class=\"comment\"># 此時會進入到 vim 的畫面，請在 vim 的一般指令模式下按下『 [ctrl]-z 』的組合鍵</span></div><div class=\"line\"></div><div class=\"line\">[1]+  Stopped             vim man_db.conf  &lt;==按下 [ctrl]-z 會告訴你這個訊息</div></pre></td></tr></table></figure></p>\n<p>當我們在 vim 的一般指令模式下按下 [ctrl]-z 的組合按鍵時，你的 vim 會被丟到背景去執行。回到命令提示字元後，接下來我們來模擬將 vim 的工作不正常的中斷吧！<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al</div><div class=\"line\">drwxrwxr-x.  2 dmtsai dmtsai    69 Jul  6 23:54 .</div><div class=\"line\">drwxrwxrwt. 17 root   root    4096 Jul  6 23:53 ..</div><div class=\"line\">-rw-r--r--.  1 dmtsai dmtsai  4850 Jul  6 23:47 man_db.conf</div><div class=\"line\">-rw-r--r--.  1 dmtsai dmtsai 16384 Jul  6 23:54 .man_db.conf.swp  &lt;==就是他，暫存檔</div><div class=\"line\">-rw-rw-r--.  1 dmtsai dmtsai  5442 Jul  6 23:35 man.test.config</div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">kill</span> -9 %1 &lt;==這裡模擬斷線停止 vim 工作</div><div class=\"line\">$ ls -al .man_db.conf.swp</div><div class=\"line\">-rw-r--r--. 1 dmtsai dmtsai 16384 Jul  6 23:54 .man_db.conf.swp  &lt;==暫存檔還是會存在！</div><div class=\"line\"></div><div class=\"line\">$ vim man_db.conf</div><div class=\"line\"></div><div class=\"line\">E325: ATTENTION  &lt;==錯誤代碼</div><div class=\"line\">Found a swap file by the name <span class=\"string\">\".man_db.conf.swp\"</span>  &lt;==底下數列說明有暫存檔的存在</div><div class=\"line\">          owned by: dmtsai   dated: Mon Jul  6 23:54:16 2015</div><div class=\"line\">         file name: /tmp/vitest/man_db.conf  &lt;==這個暫存檔屬於哪個實際的檔案？</div><div class=\"line\">          modified: no</div><div class=\"line\">         user name: dmtsai   host name: study.centos.vbird</div><div class=\"line\">        process ID: 31851</div><div class=\"line\">While opening file <span class=\"string\">\"man_db.conf\"</span></div><div class=\"line\">             dated: Mon Jul  6 23:47:21 2015</div><div class=\"line\"></div><div class=\"line\">底下說明可能發生這個錯誤的兩個主要原因與解決方案！</div><div class=\"line\">(1) Another program may be editing the same file.  If this is the <span class=\"keyword\">case</span>,</div><div class=\"line\">    be careful not to end up with two different instances of the same</div><div class=\"line\">    file when making changes.  Quit, or <span class=\"built_in\">continue</span> with caution.</div><div class=\"line\">(2) An edit session <span class=\"keyword\">for</span> this file crashed.</div><div class=\"line\">    If this is the <span class=\"keyword\">case</span>, use <span class=\"string\">\":recover\"</span> or <span class=\"string\">\"vim -r man_db.conf\"</span></div><div class=\"line\">    to recover the changes (see <span class=\"string\">\":help recovery\"</span>).</div><div class=\"line\">    If you did this already, delete the swap file <span class=\"string\">\".man_db.conf.swp\"</span></div><div class=\"line\">    to avoid this message.</div><div class=\"line\"></div><div class=\"line\">Swap file <span class=\"string\">\".man_db.conf.swp\"</span> already exists! 底下說明你可進行的動作</div><div class=\"line\">[O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (Q)uit, (A)bort:</div></pre></td></tr></table></figure></p>\n<p>再次打开文件时，会出现六个按钮，他们的作用依次是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[O]pen Read-Only：打開此檔案成為唯讀檔， 可以用在你只是想要查閱該檔案內容並不想要進行編輯行為時。一般來說，在上課時，如果你是登入到同學的電腦去看他的設定檔， 結果發現其實同學他自己也在編輯時，可以使用這個模式；</div><div class=\"line\"></div><div class=\"line\">(E)dit anyway：還是用正常的方式打開你要編輯的那個檔案， 並不會載入暫存檔的內容。不過很容易出現兩個使用者互相改變對方的檔案等問題！不好不好！</div><div class=\"line\"></div><div class=\"line\">(R)ecover：就是載入暫存檔的內容，用在你要救回之前未儲存的工作。 不過當你救回來並且儲存離開 vim 後，還是要手動自行刪除那個暫存檔喔！</div><div class=\"line\"></div><div class=\"line\">(D)elete it：你確定那個暫存檔是無用的！那麼開啟檔案前會先將這個暫存檔刪除！ 這個動作其實是比較常做的！因為你可能不確定這個暫存檔是怎麼來的，所以就刪除掉他吧！哈哈！</div><div class=\"line\"></div><div class=\"line\">(Q)uit：按下 q 就離開 vim ，不會進行任何動作回到命令提示字元。</div><div class=\"line\"></div><div class=\"line\">(A)bort：忽略這個編輯行為，感覺上與 quit 非常類似！ 也會送你回到命令提示字元就是囉！</div></pre></td></tr></table></figure>\n<h3 id=\"多文件编辑\"><a href=\"#多文件编辑\" class=\"headerlink\" title=\"多文件编辑\"></a>多文件编辑</h3><p>很多同学任务高集成的IDE比vim好用，是因为vim不能操作一些事情，比如跨文件复制，但其实vim完全可以做到，首先下载文件：<a href=\"http://linux.vbird.org/linux_basic/0310vi/hosts\" target=\"_blank\" rel=\"external\">http://linux.vbird.org/linux_basic/0310vi/hosts</a> 打开后如下所示:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">192.168.1.1    host1.class.net</div><div class=\"line\">192.168.1.2    host2.class.net</div><div class=\"line\">192.168.1.3    host3.class.net</div><div class=\"line\">192.168.1.4    host4.class.net</div><div class=\"line\">.....中間省略......</div></pre></td></tr></table></figure></p>\n<p>我们再建一个新文件host2,并进行跨文件复制操作<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ touch host_copy</div><div class=\"line\">$ vim hosts host_copy <span class=\"comment\"># 使用vim同时打开两个文件</span></div></pre></td></tr></table></figure></p>\n<p>下面我们会使用这几个命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">:n\t    編輯下一個檔案</div><div class=\"line\">:N\t    編輯上一個檔案</div><div class=\"line\">:files\t列出目前這個 vim 的開啟的所有檔案</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">:files      <span class=\"comment\"># 再打开文件后一般模式下使用改名了查看有几个文件</span></div><div class=\"line\"></div><div class=\"line\">:files</div><div class=\"line\">  1 %a   <span class=\"string\">\"hosts\"</span>                        line 1      <span class=\"comment\"># %a代表当前编辑的文件</span></div><div class=\"line\">  2      <span class=\"string\">\"host2\"</span>                        line 0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用gg切换到第一行，使用4yy复制前四行</span></div><div class=\"line\">:n          <span class=\"comment\"># 指令该命令编辑下一个文件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用p将刚才复制的内容粘贴到该文件中使用:q退出编辑并查看host2会发现刚才的内容已经复制过来了</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">v\t        字元選擇，會將游標經過的地方反白選擇！</div><div class=\"line\">V\t        列選擇，會將游標經過的列反白選擇！</div><div class=\"line\">[Ctrl]+v    區塊選擇，可以用長方形的方式選擇資料</div><div class=\"line\">y\t        將反白的地方複製起來</div><div class=\"line\">d\t        將反白的地方刪除掉</div><div class=\"line\">p\t        將剛剛複製的區塊，在游標所在處貼上！</div></pre></td></tr></table></figure>\n<h2 id=\"快替换\"><a href=\"#快替换\" class=\"headerlink\" title=\"快替换\"></a>快替换</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Ctrl] + v 选中块</div><div class=\"line\">c  输入替换文字</div><div class=\"line\">&lt;Esc&gt; 完成替换</div></pre></td></tr></table></figure>\n<h2 id=\"多窗口\"><a href=\"#多窗口\" class=\"headerlink\" title=\"多窗口\"></a>多窗口</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">:sp [filename]\t开启一个新窗口，如果有加 filename， 表示在新窗口开启一个新档案，否则表示两个窗口为同一个档案内容(同步显示)。</div><div class=\"line\">[ctrl]+w+↓/j\t按键的按法是：先按下 [ctrl] 不放， 再按下 w 后放开所有的按键，然后再按下 j (或向下箭头键)，则光标可移动到下方的窗口。</div><div class=\"line\">[ctrl]+w+↑/k\t同上，不过光标移动到上面的窗口。</div><div class=\"line\">[ctrl]+w+q  \t其实就是 :q 结束离开啦！ 举例来说，如果我想要结束下方的窗口，那么利用 [ctrl]+w+↓ 移动到下方窗口后，按下 :q 即可离开， 也可以按下 [ctrl]+w+q 啊！</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># set compatible 就是让 vim 关闭所有扩展的功能，尽量模拟 vi 的行为。</span></div><div class=\"line\">但这样就不应用 vim 的很多强大功能，所以一般没有什么特殊需要的话（比如执行很老的 vi 脚本），都要在 vim 的配置开始，写上 <span class=\"built_in\">set</span> nocompatible，关闭兼容模式。由于这个选项是最最基础的选项，会连带很多其它选项发生变动（称作副作用），所以它必需是第一个设定的选项。</div><div class=\"line\"><span class=\"built_in\">set</span> nocompatible</div></pre></td></tr></table></figure>\n<h2 id=\"快速选中段落\"><a href=\"#快速选中段落\" class=\"headerlink\" title=\"快速选中段落\"></a>快速选中段落</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vip         <span class=\"comment\"># vip很好记</span></div></pre></td></tr></table></figure>\n<h2 id=\"宏\"><a href=\"#宏\" class=\"headerlink\" title=\"宏\"></a>宏</h2><p>vim有个非常厉害的功能叫<strong>宏</strong>，它可以将你的操作进行宏录制，放到vim寄存器中，并按照你想要的方式播放出来</p>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><ul>\n<li>首先准备一个文件，第一行为数字1</li>\n<li>光标放在1上并按下 qa（当然也可以 qb，qc，这只是录制宏的名字）开始录制，测试左下角会显示录制字样</li>\n<li>输入 yyp 复制当前行到下一行，并输入 <c-a> 将数字增加1，此时第二行数字为2</c-a></li>\n<li>按下 q 结束录制，并按下 @a 播放宏，此时第三行会变成3，按下 @@ 重复上次播放，第四行会变成4</li>\n<li>当按下 100@@ 时，宏会重复播放100次上次的播放记录，自动生成104行数据</li>\n</ul>\n"},{"title":"vim 插件管理","date":"2017-08-28T16:00:00.000Z","_content":"\n\n[TOC]\n\n## Vundle\n官方推荐使用vim插件管理工具\n安装\n```bash\n$ git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n```\n\n配置.vimrc\n```bash\n$ touch ~/.vimrc\n\nset nocompatible              \" required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\n\" alternatively, pass a path where Vundle should install plugins\n\"call vundle#begin('~/some/path/here')\n\n\" let Vundle manage Vundle, required\nPlugin 'gmarik/Vundle.vim'\n\n\" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)\n\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n```\n安装\n```bash\n$ vim\n$ :PluginInstall\n\n\n```\n\n## Powerline\n该工具可以很优雅的显示vim下方的工具栏\n```bash\nPlugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}\n```\n修改.vimrc\n```bash\n$ vim ~/.vimrc\nset laststatus=2\n```\n\n## Solarized\n```bash\nPlugin 'altercation/vim-colors-solarized'\n\n$ vim ~/.vimrc\ncolorscheme solarized\n$ mkdir ~/.vim/colors\n$ cp ~/.vim/bundle/vim-colors-solarized ~/.vim/colors\n```\n\n## YouCompleteMe\n代码补全神器，但是安装也非常复杂，并不想其他插件那样一行命令就可以搞定\n首先还是配置来源\n```bash\nPlugin 'Valloric/YouCompleteMe'\n```\n保存退出后打开vim，在正常模式下输入\n```bash\n:PluginInstall\n```\n等待Vundle将YouCompleteMe安装完成，这个过程会很漫长，除非你的网络环境很好，最好翻墙\n最后进行编译\n```bash\n$ cd ~/.vim/bundle/YouCompleteMe\n$ ./install.sh --clang-completer\n```\n如果不需要c-family的补全，可以去掉--clang-completer。如果需要c#的补全，请加上--omnisharp-completer。\n\n默认使用本地py2的环境进行安装，但是执行install.sh，提示过期，如果使用install.py安装还是修改~/.bash_profile\n```bash\nexport PYTHON_CONFIGURE_OPTS=\"--enable-framework\"\n```\n执行``` source ~/.bash_profile``` 立即生效\n重新使用pyenv下载一个虚拟环境，在install即可\n\n## tarbar\ngithub:https://github.com/majutsushi/tagbar\n\n### 安装\n依赖 vim>7.0 和 [Exuberant ctags](http://ctags.sourceforge.net/)\n```bash\n# ubuntu\nsudo apt-get install ctags\n\n# centos\nsudo yum install ctags\n\n# mac\nbrew install ctags\n```\n在vim中安装\n```bash\nPlugin 'majutsushi/tagbar'\n```\n\n### 使用\n配置快捷键t，编辑文件时按t，自动进入，jk上下移动，回车选中跳转\n最终配置\n```bash\nPlugin 'majutsushi/tagbar'\nnmap t :TagbarToggle<CR>\n\" 启动时自动focus\nlet g:tagbar_autofocus = 1\n\n\" for ruby, delete if you do not need\nlet g:tagbar_type_ruby = {\n    \\ 'kinds' : [\n        \\ 'm:modules',\n        \\ 'c:classes',\n        \\ 'd:describes',\n        \\ 'C:contexts',\n        \\ 'f:methods',\n        \\ 'F:singleton methods'\n    \\ ]\n\\ }\n```\n### 配置markdown\nvim ~/.ctags\n```bash\n--langdef=markdown\n--langmap=markdown:.mkd\n--regex-markdown=/^#[ \\t]+(.*)/\\1/h,Heading_L1/\n--regex-markdown=/^##[ \\t]+(.*)/\\1/i,Heading_L2/\n--regex-markdown=/^###[ \\t]+(.*)/\\1/k,Heading_L3/\n```\nvim ~/.vimc\n```bash\nlet g:tagbar_type_markdown = {\n    \\ 'ctagstype' : 'markdown',\n    \\ 'kinds' : [\n        \\ 'h:Heading_L1',\n        \\ 'i:Heading_L2',\n        \\ 'k:Heading_L3'\n    \\ ]\n\\ }\n```\n### 命令\n```bash\n跳到光标下tag所定义的位置，用鼠标双击此tag功能也一样\no 在一个新打开的窗口中显示光标下tag\n显示光标下tag的原型定义\nu 更新taglist窗口中的tag\ns 更改排序方式，在按名字排序和按出现顺序排序间切换\nx taglist窗口放大和缩小，方便查看较长的tag\n+ 打开一个折叠，同zo\n- 将tag折叠起来，同zc\n* 打开所有的折叠，同zR\n= 将所有tag折叠起来，同zM\n[[ 跳到前一个文件\n]] 跳到后一个文件\nq 关闭taglist窗口\n```\n\n### 更多\n文档：https://github.com/majutsushi/tagbar/wiki\n\n## quickrun\n快速执行\ngithub：https://github.com/thinca/vim-quickrun\n### 安装\n```bash\nPlugin 'thinca/vim-quickrun'                                                \" 快速执行\n```\n### 配置\n```bash\nlet g:quickrun_config = {\n\\   \"_\" : {\n\\       \"outputter\" : \"message\",\n\\   },\n\\}\nlet g:quickrun_no_default_key_mappings = 1\nnmap <Leader>r <Plug>(quickrun)\nmap <F10> :QuickRun<CR>\n```\n\n## airline\n增强状态栏\n\n### 安装\n```bash\nPlugin 'bling/vim-airline'                                                  \" 状态栏\n```\n\n### 配置\n```bash\nif !exists('g:airline_symbols')\nlet g:airline_symbols = {}\nendif\nlet g:airline_left_sep       = '▶'\nlet g:airline_left_alt_sep   = '❯'\nlet g:airline_right_sep      = '◀'\nlet g:airline_right_alt_sep  = '❮'\nlet g:airline_symbols.linenr = '¶'\nlet g:airline_symbols.branch = '⎇'\n```\n\n## nerdcommenter\n> 快速注释/放开注释\n\ngithub：https://github.com/scrooloose/nerdcommentera\n\n### 安装\n```bash\nPlugin 'scrooloose/nerdcommenter'\n```\n\n### 使用\n官方快键键,更多用法见[快捷键](https://github.com/scrooloose/nerdcommenter#default-mappings)\n```\n<header>c<space>    # 自动判断注释还是放开注释\n<header>cy          # 添加注释后自动\n```\n\n### 配置\n常用配置，更多见[文档](https://github.com/scrooloose/nerdcommenter#documentation)\n```bash\nlet g:NERDSpaceDelims = 1   # 注释后添加空格，推荐\n```\n\n## gundo.\n> 查看/跳转历史记录\n\ngithub:https://github.com/sjl/gundo.vim\n### 安装\n```bash\nPlugin 'sjl/gundo.vim'                      \" 查看文件编辑历史记录\n```\n\n### 配置\n```bash\nnnoremap <leader>h :GundoToggle<CR>\n```\n\n### 使用\n```bash\n使用;h打开历史记录，使用<ctrl>w+hl左右移动窗口，在历史记录窗口使用jk上下移动，\n回车跳转到某次记录\n```\n\n## vim-expand-region\n> 区域选择\n\n[ github ](https://github.com/terryma/vim-expand-region)\n\n### 安装\n```bash\nPlugin 'terryma/vim-expand-region'\n```\n\n### 配置\n自定义快捷键 v 区域选择、V 取消选择 这样比较符合vim本身习惯\n```bash\nvmap v <Plug>(expand_region_expand)\nvmap V <Plug>(expand_region_shrink)\n```\n\n### 更多\n见[ 文档 ](https://github.com/terryma/vim-expand-region#setting)\n\n## vim-easy-align 快速对齐\n\n### 安装\n```bash\nPlugin 'junegunn/vim-easy-align'\n```\n\n### 配置\n```bash\nvmap <Leader>a <Plug>(EasyAlign)\nnmap <Leader>a <Plug>(EasyAlign)\nif !exists('g:easy_align_delimiters')\n  let g:easy_align_delimiters = {}\nendif\nlet g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }\n```\n\n### 使用\n绑定快捷键<Leader>a，使用 v 选中目标区域后执行响应命令\n```bash\n<Leader>a=        对齐等号表达\n<Leader>a:        对齐冒号表达式(json/map等)\n\n# 默认左对齐\n<Leader>a<space>  首个空格对齐\n<Leader>a2<space> 第二个空格对齐\n<Leader>a-<space> 倒数第一个空格对齐\n<Leader>a-2<space> 倒数第二个空格对齐\n<Leader>a*<space> 所有空格依次对齐\n\n# 右对齐\n<Leader>a<Enter>*<space>\n```\n\n### 更多\n见[ 文档 ](https://github.com/junegunn/vim-easy-align#demo)\n","source":"_posts/vim-2017-08-29-plug.md","raw":"---\ntitle: vim 插件管理\ndate: 2017-08-29\ntags:\n---\n\n\n[TOC]\n\n## Vundle\n官方推荐使用vim插件管理工具\n安装\n```bash\n$ git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n```\n\n配置.vimrc\n```bash\n$ touch ~/.vimrc\n\nset nocompatible              \" required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\n\" alternatively, pass a path where Vundle should install plugins\n\"call vundle#begin('~/some/path/here')\n\n\" let Vundle manage Vundle, required\nPlugin 'gmarik/Vundle.vim'\n\n\" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)\n\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n```\n安装\n```bash\n$ vim\n$ :PluginInstall\n\n\n```\n\n## Powerline\n该工具可以很优雅的显示vim下方的工具栏\n```bash\nPlugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}\n```\n修改.vimrc\n```bash\n$ vim ~/.vimrc\nset laststatus=2\n```\n\n## Solarized\n```bash\nPlugin 'altercation/vim-colors-solarized'\n\n$ vim ~/.vimrc\ncolorscheme solarized\n$ mkdir ~/.vim/colors\n$ cp ~/.vim/bundle/vim-colors-solarized ~/.vim/colors\n```\n\n## YouCompleteMe\n代码补全神器，但是安装也非常复杂，并不想其他插件那样一行命令就可以搞定\n首先还是配置来源\n```bash\nPlugin 'Valloric/YouCompleteMe'\n```\n保存退出后打开vim，在正常模式下输入\n```bash\n:PluginInstall\n```\n等待Vundle将YouCompleteMe安装完成，这个过程会很漫长，除非你的网络环境很好，最好翻墙\n最后进行编译\n```bash\n$ cd ~/.vim/bundle/YouCompleteMe\n$ ./install.sh --clang-completer\n```\n如果不需要c-family的补全，可以去掉--clang-completer。如果需要c#的补全，请加上--omnisharp-completer。\n\n默认使用本地py2的环境进行安装，但是执行install.sh，提示过期，如果使用install.py安装还是修改~/.bash_profile\n```bash\nexport PYTHON_CONFIGURE_OPTS=\"--enable-framework\"\n```\n执行``` source ~/.bash_profile``` 立即生效\n重新使用pyenv下载一个虚拟环境，在install即可\n\n## tarbar\ngithub:https://github.com/majutsushi/tagbar\n\n### 安装\n依赖 vim>7.0 和 [Exuberant ctags](http://ctags.sourceforge.net/)\n```bash\n# ubuntu\nsudo apt-get install ctags\n\n# centos\nsudo yum install ctags\n\n# mac\nbrew install ctags\n```\n在vim中安装\n```bash\nPlugin 'majutsushi/tagbar'\n```\n\n### 使用\n配置快捷键t，编辑文件时按t，自动进入，jk上下移动，回车选中跳转\n最终配置\n```bash\nPlugin 'majutsushi/tagbar'\nnmap t :TagbarToggle<CR>\n\" 启动时自动focus\nlet g:tagbar_autofocus = 1\n\n\" for ruby, delete if you do not need\nlet g:tagbar_type_ruby = {\n    \\ 'kinds' : [\n        \\ 'm:modules',\n        \\ 'c:classes',\n        \\ 'd:describes',\n        \\ 'C:contexts',\n        \\ 'f:methods',\n        \\ 'F:singleton methods'\n    \\ ]\n\\ }\n```\n### 配置markdown\nvim ~/.ctags\n```bash\n--langdef=markdown\n--langmap=markdown:.mkd\n--regex-markdown=/^#[ \\t]+(.*)/\\1/h,Heading_L1/\n--regex-markdown=/^##[ \\t]+(.*)/\\1/i,Heading_L2/\n--regex-markdown=/^###[ \\t]+(.*)/\\1/k,Heading_L3/\n```\nvim ~/.vimc\n```bash\nlet g:tagbar_type_markdown = {\n    \\ 'ctagstype' : 'markdown',\n    \\ 'kinds' : [\n        \\ 'h:Heading_L1',\n        \\ 'i:Heading_L2',\n        \\ 'k:Heading_L3'\n    \\ ]\n\\ }\n```\n### 命令\n```bash\n跳到光标下tag所定义的位置，用鼠标双击此tag功能也一样\no 在一个新打开的窗口中显示光标下tag\n显示光标下tag的原型定义\nu 更新taglist窗口中的tag\ns 更改排序方式，在按名字排序和按出现顺序排序间切换\nx taglist窗口放大和缩小，方便查看较长的tag\n+ 打开一个折叠，同zo\n- 将tag折叠起来，同zc\n* 打开所有的折叠，同zR\n= 将所有tag折叠起来，同zM\n[[ 跳到前一个文件\n]] 跳到后一个文件\nq 关闭taglist窗口\n```\n\n### 更多\n文档：https://github.com/majutsushi/tagbar/wiki\n\n## quickrun\n快速执行\ngithub：https://github.com/thinca/vim-quickrun\n### 安装\n```bash\nPlugin 'thinca/vim-quickrun'                                                \" 快速执行\n```\n### 配置\n```bash\nlet g:quickrun_config = {\n\\   \"_\" : {\n\\       \"outputter\" : \"message\",\n\\   },\n\\}\nlet g:quickrun_no_default_key_mappings = 1\nnmap <Leader>r <Plug>(quickrun)\nmap <F10> :QuickRun<CR>\n```\n\n## airline\n增强状态栏\n\n### 安装\n```bash\nPlugin 'bling/vim-airline'                                                  \" 状态栏\n```\n\n### 配置\n```bash\nif !exists('g:airline_symbols')\nlet g:airline_symbols = {}\nendif\nlet g:airline_left_sep       = '▶'\nlet g:airline_left_alt_sep   = '❯'\nlet g:airline_right_sep      = '◀'\nlet g:airline_right_alt_sep  = '❮'\nlet g:airline_symbols.linenr = '¶'\nlet g:airline_symbols.branch = '⎇'\n```\n\n## nerdcommenter\n> 快速注释/放开注释\n\ngithub：https://github.com/scrooloose/nerdcommentera\n\n### 安装\n```bash\nPlugin 'scrooloose/nerdcommenter'\n```\n\n### 使用\n官方快键键,更多用法见[快捷键](https://github.com/scrooloose/nerdcommenter#default-mappings)\n```\n<header>c<space>    # 自动判断注释还是放开注释\n<header>cy          # 添加注释后自动\n```\n\n### 配置\n常用配置，更多见[文档](https://github.com/scrooloose/nerdcommenter#documentation)\n```bash\nlet g:NERDSpaceDelims = 1   # 注释后添加空格，推荐\n```\n\n## gundo.\n> 查看/跳转历史记录\n\ngithub:https://github.com/sjl/gundo.vim\n### 安装\n```bash\nPlugin 'sjl/gundo.vim'                      \" 查看文件编辑历史记录\n```\n\n### 配置\n```bash\nnnoremap <leader>h :GundoToggle<CR>\n```\n\n### 使用\n```bash\n使用;h打开历史记录，使用<ctrl>w+hl左右移动窗口，在历史记录窗口使用jk上下移动，\n回车跳转到某次记录\n```\n\n## vim-expand-region\n> 区域选择\n\n[ github ](https://github.com/terryma/vim-expand-region)\n\n### 安装\n```bash\nPlugin 'terryma/vim-expand-region'\n```\n\n### 配置\n自定义快捷键 v 区域选择、V 取消选择 这样比较符合vim本身习惯\n```bash\nvmap v <Plug>(expand_region_expand)\nvmap V <Plug>(expand_region_shrink)\n```\n\n### 更多\n见[ 文档 ](https://github.com/terryma/vim-expand-region#setting)\n\n## vim-easy-align 快速对齐\n\n### 安装\n```bash\nPlugin 'junegunn/vim-easy-align'\n```\n\n### 配置\n```bash\nvmap <Leader>a <Plug>(EasyAlign)\nnmap <Leader>a <Plug>(EasyAlign)\nif !exists('g:easy_align_delimiters')\n  let g:easy_align_delimiters = {}\nendif\nlet g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }\n```\n\n### 使用\n绑定快捷键<Leader>a，使用 v 选中目标区域后执行响应命令\n```bash\n<Leader>a=        对齐等号表达\n<Leader>a:        对齐冒号表达式(json/map等)\n\n# 默认左对齐\n<Leader>a<space>  首个空格对齐\n<Leader>a2<space> 第二个空格对齐\n<Leader>a-<space> 倒数第一个空格对齐\n<Leader>a-2<space> 倒数第二个空格对齐\n<Leader>a*<space> 所有空格依次对齐\n\n# 右对齐\n<Leader>a<Enter>*<space>\n```\n\n### 更多\n见[ 文档 ](https://github.com/junegunn/vim-easy-align#demo)\n","slug":"vim-2017-08-29-plug","published":1,"updated":"2017-09-15T23:34:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7nyko9p001nkjxva7nvciyd","content":"<p>[TOC]</p>\n<h2><span id=\"vundle\">Vundle</span><a href=\"#vundle\" class=\"header-anchor\"></a></h2><p>官方推荐使用vim插件管理工具<br>安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim</div></pre></td></tr></table></figure></p>\n<p>配置.vimrc<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ touch ~/.vimrc</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span> nocompatible              <span class=\"string\">\" required</span></div><div class=\"line\"><span class=\"string\">filetype off                  \"</span> required</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\" set the runtime path to include Vundle and initialize</span></div><div class=\"line\"><span class=\"string\">set rtp+=~/.vim/bundle/Vundle.vim</span></div><div class=\"line\"><span class=\"string\">call vundle#begin()</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">\"</span> alternatively, pass a path <span class=\"built_in\">where</span> Vundle should install plugins</div><div class=\"line\"><span class=\"string\">\"call vundle#begin('~/some/path/here')</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">\"</span> <span class=\"built_in\">let</span> Vundle manage Vundle, required</div><div class=\"line\">Plugin <span class=\"string\">'gmarik/Vundle.vim'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">\"</span> All of your Plugins must be added before the following line</div><div class=\"line\">call vundle<span class=\"comment\">#end()            \" required</span></div><div class=\"line\">filetype plugin indent on    <span class=\"string\">\" required</span></div></pre></td></tr></table></figure></p>\n<p>安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim</div><div class=\"line\">$ :PluginInstall</div></pre></td></tr></table></figure></p>\n<h2><span id=\"powerline\">Powerline</span><a href=\"#powerline\" class=\"header-anchor\"></a></h2><p>该工具可以很优雅的显示vim下方的工具栏<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'Lokaltog/powerline'</span>, &#123;<span class=\"string\">'rtp'</span>: <span class=\"string\">'powerline/bindings/vim/'</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>修改.vimrc<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim ~/.vimrc</div><div class=\"line\"><span class=\"built_in\">set</span> laststatus=2</div></pre></td></tr></table></figure></p>\n<h2><span id=\"solarized\">Solarized</span><a href=\"#solarized\" class=\"header-anchor\"></a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'altercation/vim-colors-solarized'</span></div><div class=\"line\"></div><div class=\"line\">$ vim ~/.vimrc</div><div class=\"line\">colorscheme solarized</div><div class=\"line\">$ mkdir ~/.vim/colors</div><div class=\"line\">$ cp ~/.vim/bundle/vim-colors-solarized ~/.vim/colors</div></pre></td></tr></table></figure>\n<h2><span id=\"youcompleteme\">YouCompleteMe</span><a href=\"#youcompleteme\" class=\"header-anchor\"></a></h2><p>代码补全神器，但是安装也非常复杂，并不想其他插件那样一行命令就可以搞定<br>首先还是配置来源<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'Valloric/YouCompleteMe'</span></div></pre></td></tr></table></figure></p>\n<p>保存退出后打开vim，在正常模式下输入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">:PluginInstall</div></pre></td></tr></table></figure></p>\n<p>等待Vundle将YouCompleteMe安装完成，这个过程会很漫长，除非你的网络环境很好，最好翻墙<br>最后进行编译<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~/.vim/bundle/YouCompleteMe</div><div class=\"line\">$ ./install.sh --clang-completer</div></pre></td></tr></table></figure></p>\n<p>如果不需要c-family的补全，可以去掉–clang-completer。如果需要c#的补全，请加上–omnisharp-completer。</p>\n<p>默认使用本地py2的环境进行安装，但是执行install.sh，提示过期，如果使用install.py安装还是修改~/.bash_profile<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> PYTHON_CONFIGURE_OPTS=<span class=\"string\">\"--enable-framework\"</span></div></pre></td></tr></table></figure></p>\n<p>执行<figure class=\"highlight plain\"><figcaption><span>~/.bash_profile``` 立即生效</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">重新使用pyenv下载一个虚拟环境，在install即可</div><div class=\"line\"></div><div class=\"line\">## tarbar</div><div class=\"line\">github:https://github.com/majutsushi/tagbar</div><div class=\"line\"></div><div class=\"line\">### 安装</div><div class=\"line\">依赖 vim&gt;7.0 和 [Exuberant ctags](http://ctags.sourceforge.net/)</div><div class=\"line\">```bash</div><div class=\"line\"># ubuntu</div><div class=\"line\">sudo apt-get install ctags</div><div class=\"line\"></div><div class=\"line\"># centos</div><div class=\"line\">sudo yum install ctags</div><div class=\"line\"></div><div class=\"line\"># mac</div><div class=\"line\">brew install ctags</div></pre></td></tr></table></figure></p>\n<p>在vim中安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'majutsushi/tagbar'</span></div></pre></td></tr></table></figure></p>\n<h3><span id=\"shi-yong\">使用</span><a href=\"#shi-yong\" class=\"header-anchor\"></a></h3><p>配置快捷键t，编辑文件时按t，自动进入，jk上下移动，回车选中跳转<br>最终配置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'majutsushi/tagbar'</span></div><div class=\"line\">nmap t :TagbarToggle&lt;CR&gt;</div><div class=\"line\"><span class=\"string\">\" 启动时自动focus</span></div><div class=\"line\"><span class=\"string\">let g:tagbar_autofocus = 1</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">\"</span> <span class=\"keyword\">for</span> ruby, delete <span class=\"keyword\">if</span> you <span class=\"keyword\">do</span> not need</div><div class=\"line\"><span class=\"built_in\">let</span> g:tagbar_type_ruby = &#123;</div><div class=\"line\">    \\ <span class=\"string\">'kinds'</span> : [</div><div class=\"line\">        \\ <span class=\"string\">'m:modules'</span>,</div><div class=\"line\">        \\ <span class=\"string\">'c:classes'</span>,</div><div class=\"line\">        \\ <span class=\"string\">'d:describes'</span>,</div><div class=\"line\">        \\ <span class=\"string\">'C:contexts'</span>,</div><div class=\"line\">        \\ <span class=\"string\">'f:methods'</span>,</div><div class=\"line\">        \\ <span class=\"string\">'F:singleton methods'</span></div><div class=\"line\">    \\ ]</div><div class=\"line\">\\ &#125;</div></pre></td></tr></table></figure></p>\n<h3><span id=\"pei-zhi-markdown\">配置markdown</span><a href=\"#pei-zhi-markdown\" class=\"header-anchor\"></a></h3><p>vim ~/.ctags<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">--langdef=markdown</div><div class=\"line\">--langmap=markdown:.mkd</div><div class=\"line\">--regex-markdown=/^<span class=\"comment\">#[ \\t]+(.*)/\\1/h,Heading_L1/</span></div><div class=\"line\">--regex-markdown=/^<span class=\"comment\">##[ \\t]+(.*)/\\1/i,Heading_L2/</span></div><div class=\"line\">--regex-markdown=/^<span class=\"comment\">###[ \\t]+(.*)/\\1/k,Heading_L3/</span></div></pre></td></tr></table></figure></p>\n<p>vim ~/.vimc<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">let</span> g:tagbar_type_markdown = &#123;</div><div class=\"line\">    \\ <span class=\"string\">'ctagstype'</span> : <span class=\"string\">'markdown'</span>,</div><div class=\"line\">    \\ <span class=\"string\">'kinds'</span> : [</div><div class=\"line\">        \\ <span class=\"string\">'h:Heading_L1'</span>,</div><div class=\"line\">        \\ <span class=\"string\">'i:Heading_L2'</span>,</div><div class=\"line\">        \\ <span class=\"string\">'k:Heading_L3'</span></div><div class=\"line\">    \\ ]</div><div class=\"line\">\\ &#125;</div></pre></td></tr></table></figure></p>\n<h3><span id=\"ming-ling\">命令</span><a href=\"#ming-ling\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">跳到光标下tag所定义的位置，用鼠标双击此tag功能也一样</div><div class=\"line\">o 在一个新打开的窗口中显示光标下tag</div><div class=\"line\">显示光标下tag的原型定义</div><div class=\"line\">u 更新taglist窗口中的tag</div><div class=\"line\">s 更改排序方式，在按名字排序和按出现顺序排序间切换</div><div class=\"line\">x taglist窗口放大和缩小，方便查看较长的tag</div><div class=\"line\">+ 打开一个折叠，同zo</div><div class=\"line\">- 将tag折叠起来，同zc</div><div class=\"line\">* 打开所有的折叠，同zR</div><div class=\"line\">= 将所有tag折叠起来，同zM</div><div class=\"line\">[[ 跳到前一个文件</div><div class=\"line\">]] 跳到后一个文件</div><div class=\"line\">q 关闭taglist窗口</div></pre></td></tr></table></figure>\n<h3><span id=\"geng-duo\">更多</span><a href=\"#geng-duo\" class=\"header-anchor\"></a></h3><p>文档：<a href=\"https://github.com/majutsushi/tagbar/wiki\" target=\"_blank\" rel=\"external\">https://github.com/majutsushi/tagbar/wiki</a></p>\n<h2><span id=\"quickrun\">quickrun</span><a href=\"#quickrun\" class=\"header-anchor\"></a></h2><p>快速执行<br>github：<a href=\"https://github.com/thinca/vim-quickrun\" target=\"_blank\" rel=\"external\">https://github.com/thinca/vim-quickrun</a></p>\n<h3><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'thinca/vim-quickrun'</span>                                                <span class=\"string\">\" 快速执行</span></div></pre></td></tr></table></figure>\n<h3><span id=\"pei-zhi\">配置</span><a href=\"#pei-zhi\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">let</span> g:quickrun_config = &#123;</div><div class=\"line\">\\   <span class=\"string\">\"_\"</span> : &#123;</div><div class=\"line\">\\       <span class=\"string\">\"outputter\"</span> : <span class=\"string\">\"message\"</span>,</div><div class=\"line\">\\   &#125;,</div><div class=\"line\">\\&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> g:quickrun_no_default_key_mappings = 1</div><div class=\"line\">nmap &lt;Leader&gt;r &lt;Plug&gt;(quickrun)</div><div class=\"line\">map &lt;F10&gt; :QuickRun&lt;CR&gt;</div></pre></td></tr></table></figure>\n<h2><span id=\"airline\">airline</span><a href=\"#airline\" class=\"header-anchor\"></a></h2><p>增强状态栏</p>\n<h3><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'bling/vim-airline'</span>                                                  <span class=\"string\">\" 状态栏</span></div></pre></td></tr></table></figure>\n<h3><span id=\"pei-zhi\">配置</span><a href=\"#pei-zhi\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> !exists(<span class=\"string\">'g:airline_symbols'</span>)</div><div class=\"line\"><span class=\"built_in\">let</span> g:airline_symbols = &#123;&#125;</div><div class=\"line\">endif</div><div class=\"line\"><span class=\"built_in\">let</span> g:airline_left_sep       = <span class=\"string\">'▶'</span></div><div class=\"line\"><span class=\"built_in\">let</span> g:airline_left_alt_sep   = <span class=\"string\">'❯'</span></div><div class=\"line\"><span class=\"built_in\">let</span> g:airline_right_sep      = <span class=\"string\">'◀'</span></div><div class=\"line\"><span class=\"built_in\">let</span> g:airline_right_alt_sep  = <span class=\"string\">'❮'</span></div><div class=\"line\"><span class=\"built_in\">let</span> g:airline_symbols.linenr = <span class=\"string\">'¶'</span></div><div class=\"line\"><span class=\"built_in\">let</span> g:airline_symbols.branch = <span class=\"string\">'⎇'</span></div></pre></td></tr></table></figure>\n<h2><span id=\"nerdcommenter\">nerdcommenter</span><a href=\"#nerdcommenter\" class=\"header-anchor\"></a></h2><blockquote>\n<p>快速注释/放开注释</p>\n</blockquote>\n<p>github：<a href=\"https://github.com/scrooloose/nerdcommentera\" target=\"_blank\" rel=\"external\">https://github.com/scrooloose/nerdcommentera</a></p>\n<h3><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'scrooloose/nerdcommenter'</span></div></pre></td></tr></table></figure>\n<h3><span id=\"shi-yong\">使用</span><a href=\"#shi-yong\" class=\"header-anchor\"></a></h3><p>官方快键键,更多用法见<a href=\"https://github.com/scrooloose/nerdcommenter#default-mappings\" target=\"_blank\" rel=\"external\">快捷键</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;header&gt;c&lt;space&gt;    # 自动判断注释还是放开注释</div><div class=\"line\">&lt;header&gt;cy          # 添加注释后自动</div></pre></td></tr></table></figure></p>\n<h3><span id=\"pei-zhi\">配置</span><a href=\"#pei-zhi\" class=\"header-anchor\"></a></h3><p>常用配置，更多见<a href=\"https://github.com/scrooloose/nerdcommenter#documentation\" target=\"_blank\" rel=\"external\">文档</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">let</span> g:NERDSpaceDelims = 1   <span class=\"comment\"># 注释后添加空格，推荐</span></div></pre></td></tr></table></figure></p>\n<h2><span id=\"gundo\">gundo.</span><a href=\"#gundo\" class=\"header-anchor\"></a></h2><blockquote>\n<p>查看/跳转历史记录</p>\n</blockquote>\n<p>github:<a href=\"https://github.com/sjl/gundo.vim\" target=\"_blank\" rel=\"external\">https://github.com/sjl/gundo.vim</a></p>\n<h3><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'sjl/gundo.vim'</span>                      <span class=\"string\">\" 查看文件编辑历史记录</span></div></pre></td></tr></table></figure>\n<h3><span id=\"pei-zhi\">配置</span><a href=\"#pei-zhi\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nnoremap &lt;leader&gt;h :GundoToggle&lt;CR&gt;</div></pre></td></tr></table></figure>\n<h3><span id=\"shi-yong\">使用</span><a href=\"#shi-yong\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用;h打开历史记录，使用&lt;ctrl&gt;w+hl左右移动窗口，在历史记录窗口使用jk上下移动，</div><div class=\"line\">回车跳转到某次记录</div></pre></td></tr></table></figure>\n<h2><span id=\"vim-expand-region\">vim-expand-region</span><a href=\"#vim-expand-region\" class=\"header-anchor\"></a></h2><blockquote>\n<p>区域选择</p>\n</blockquote>\n<p><a href=\"https://github.com/terryma/vim-expand-region\" target=\"_blank\" rel=\"external\"> github </a></p>\n<h3><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'terryma/vim-expand-region'</span></div></pre></td></tr></table></figure>\n<h3><span id=\"pei-zhi\">配置</span><a href=\"#pei-zhi\" class=\"header-anchor\"></a></h3><p>自定义快捷键 v 区域选择、V 取消选择 这样比较符合vim本身习惯<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vmap v &lt;Plug&gt;(expand_region_expand)</div><div class=\"line\">vmap V &lt;Plug&gt;(expand_region_shrink)</div></pre></td></tr></table></figure></p>\n<h3><span id=\"geng-duo\">更多</span><a href=\"#geng-duo\" class=\"header-anchor\"></a></h3><p>见<a href=\"https://github.com/terryma/vim-expand-region#setting\" target=\"_blank\" rel=\"external\"> 文档 </a></p>\n<h2><span id=\"vim-easy-align-kuai-su-dui-qi\">vim-easy-align 快速对齐</span><a href=\"#vim-easy-align-kuai-su-dui-qi\" class=\"header-anchor\"></a></h2><h3><span id=\"an-zhuang\">安装</span><a href=\"#an-zhuang\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'junegunn/vim-easy-align'</span></div></pre></td></tr></table></figure>\n<h3><span id=\"pei-zhi\">配置</span><a href=\"#pei-zhi\" class=\"header-anchor\"></a></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">vmap &lt;Leader&gt;a &lt;Plug&gt;(EasyAlign)</div><div class=\"line\">nmap &lt;Leader&gt;a &lt;Plug&gt;(EasyAlign)</div><div class=\"line\"><span class=\"keyword\">if</span> !exists(<span class=\"string\">'g:easy_align_delimiters'</span>)</div><div class=\"line\">  <span class=\"built_in\">let</span> g:easy_align_delimiters = &#123;&#125;</div><div class=\"line\">endif</div><div class=\"line\"><span class=\"built_in\">let</span> g:easy_align_delimiters[<span class=\"string\">'#'</span>] = &#123; <span class=\"string\">'pattern'</span>: <span class=\"string\">'#'</span>, <span class=\"string\">'ignore_groups'</span>: [<span class=\"string\">'String'</span>] &#125;</div></pre></td></tr></table></figure>\n<h3><span id=\"shi-yong\">使用</span><a href=\"#shi-yong\" class=\"header-anchor\"></a></h3><p>绑定快捷键<leader>a，使用 v 选中目标区域后执行响应命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Leader&gt;a=        对齐等号表达</div><div class=\"line\">&lt;Leader&gt;a:        对齐冒号表达式(json/map等)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 默认左对齐</span></div><div class=\"line\">&lt;Leader&gt;a&lt;space&gt;  首个空格对齐</div><div class=\"line\">&lt;Leader&gt;a2&lt;space&gt; 第二个空格对齐</div><div class=\"line\">&lt;Leader&gt;a-&lt;space&gt; 倒数第一个空格对齐</div><div class=\"line\">&lt;Leader&gt;a-2&lt;space&gt; 倒数第二个空格对齐</div><div class=\"line\">&lt;Leader&gt;a*&lt;space&gt; 所有空格依次对齐</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 右对齐</span></div><div class=\"line\">&lt;Leader&gt;a&lt;Enter&gt;*&lt;space&gt;</div></pre></td></tr></table></figure></leader></p>\n<h3><span id=\"geng-duo\">更多</span><a href=\"#geng-duo\" class=\"header-anchor\"></a></h3><p>见<a href=\"https://github.com/junegunn/vim-easy-align#demo\" target=\"_blank\" rel=\"external\"> 文档 </a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"Vundle\"><a href=\"#Vundle\" class=\"headerlink\" title=\"Vundle\"></a>Vundle</h2><p>官方推荐使用vim插件管理工具<br>安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim</div></pre></td></tr></table></figure></p>\n<p>配置.vimrc<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ touch ~/.vimrc</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span> nocompatible              <span class=\"string\">\" required</span></div><div class=\"line\"><span class=\"string\">filetype off                  \"</span> required</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\" set the runtime path to include Vundle and initialize</span></div><div class=\"line\"><span class=\"string\">set rtp+=~/.vim/bundle/Vundle.vim</span></div><div class=\"line\"><span class=\"string\">call vundle#begin()</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">\"</span> alternatively, pass a path <span class=\"built_in\">where</span> Vundle should install plugins</div><div class=\"line\"><span class=\"string\">\"call vundle#begin('~/some/path/here')</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">\"</span> <span class=\"built_in\">let</span> Vundle manage Vundle, required</div><div class=\"line\">Plugin <span class=\"string\">'gmarik/Vundle.vim'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">\"</span> All of your Plugins must be added before the following line</div><div class=\"line\">call vundle<span class=\"comment\">#end()            \" required</span></div><div class=\"line\">filetype plugin indent on    <span class=\"string\">\" required</span></div></pre></td></tr></table></figure></p>\n<p>安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim</div><div class=\"line\">$ :PluginInstall</div></pre></td></tr></table></figure></p>\n<h2 id=\"Powerline\"><a href=\"#Powerline\" class=\"headerlink\" title=\"Powerline\"></a>Powerline</h2><p>该工具可以很优雅的显示vim下方的工具栏<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'Lokaltog/powerline'</span>, &#123;<span class=\"string\">'rtp'</span>: <span class=\"string\">'powerline/bindings/vim/'</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>修改.vimrc<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim ~/.vimrc</div><div class=\"line\"><span class=\"built_in\">set</span> laststatus=2</div></pre></td></tr></table></figure></p>\n<h2 id=\"Solarized\"><a href=\"#Solarized\" class=\"headerlink\" title=\"Solarized\"></a>Solarized</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'altercation/vim-colors-solarized'</span></div><div class=\"line\"></div><div class=\"line\">$ vim ~/.vimrc</div><div class=\"line\">colorscheme solarized</div><div class=\"line\">$ mkdir ~/.vim/colors</div><div class=\"line\">$ cp ~/.vim/bundle/vim-colors-solarized ~/.vim/colors</div></pre></td></tr></table></figure>\n<h2 id=\"YouCompleteMe\"><a href=\"#YouCompleteMe\" class=\"headerlink\" title=\"YouCompleteMe\"></a>YouCompleteMe</h2><p>代码补全神器，但是安装也非常复杂，并不想其他插件那样一行命令就可以搞定<br>首先还是配置来源<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'Valloric/YouCompleteMe'</span></div></pre></td></tr></table></figure></p>\n<p>保存退出后打开vim，在正常模式下输入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">:PluginInstall</div></pre></td></tr></table></figure></p>\n<p>等待Vundle将YouCompleteMe安装完成，这个过程会很漫长，除非你的网络环境很好，最好翻墙<br>最后进行编译<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~/.vim/bundle/YouCompleteMe</div><div class=\"line\">$ ./install.sh --clang-completer</div></pre></td></tr></table></figure></p>\n<p>如果不需要c-family的补全，可以去掉–clang-completer。如果需要c#的补全，请加上–omnisharp-completer。</p>\n<p>默认使用本地py2的环境进行安装，但是执行install.sh，提示过期，如果使用install.py安装还是修改~/.bash_profile<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> PYTHON_CONFIGURE_OPTS=<span class=\"string\">\"--enable-framework\"</span></div></pre></td></tr></table></figure></p>\n<p>执行<figure class=\"highlight plain\"><figcaption><span>~/.bash_profile``` 立即生效</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">重新使用pyenv下载一个虚拟环境，在install即可</div><div class=\"line\"></div><div class=\"line\">## tarbar</div><div class=\"line\">github:https://github.com/majutsushi/tagbar</div><div class=\"line\"></div><div class=\"line\">### 安装</div><div class=\"line\">依赖 vim&gt;7.0 和 [Exuberant ctags](http://ctags.sourceforge.net/)</div><div class=\"line\">```bash</div><div class=\"line\"># ubuntu</div><div class=\"line\">sudo apt-get install ctags</div><div class=\"line\"></div><div class=\"line\"># centos</div><div class=\"line\">sudo yum install ctags</div><div class=\"line\"></div><div class=\"line\"># mac</div><div class=\"line\">brew install ctags</div></pre></td></tr></table></figure></p>\n<p>在vim中安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'majutsushi/tagbar'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>配置快捷键t，编辑文件时按t，自动进入，jk上下移动，回车选中跳转<br>最终配置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'majutsushi/tagbar'</span></div><div class=\"line\">nmap t :TagbarToggle&lt;CR&gt;</div><div class=\"line\"><span class=\"string\">\" 启动时自动focus</span></div><div class=\"line\"><span class=\"string\">let g:tagbar_autofocus = 1</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">\"</span> <span class=\"keyword\">for</span> ruby, delete <span class=\"keyword\">if</span> you <span class=\"keyword\">do</span> not need</div><div class=\"line\"><span class=\"built_in\">let</span> g:tagbar_type_ruby = &#123;</div><div class=\"line\">    \\ <span class=\"string\">'kinds'</span> : [</div><div class=\"line\">        \\ <span class=\"string\">'m:modules'</span>,</div><div class=\"line\">        \\ <span class=\"string\">'c:classes'</span>,</div><div class=\"line\">        \\ <span class=\"string\">'d:describes'</span>,</div><div class=\"line\">        \\ <span class=\"string\">'C:contexts'</span>,</div><div class=\"line\">        \\ <span class=\"string\">'f:methods'</span>,</div><div class=\"line\">        \\ <span class=\"string\">'F:singleton methods'</span></div><div class=\"line\">    \\ ]</div><div class=\"line\">\\ &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置markdown\"><a href=\"#配置markdown\" class=\"headerlink\" title=\"配置markdown\"></a>配置markdown</h3><p>vim ~/.ctags<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">--langdef=markdown</div><div class=\"line\">--langmap=markdown:.mkd</div><div class=\"line\">--regex-markdown=/^<span class=\"comment\">#[ \\t]+(.*)/\\1/h,Heading_L1/</span></div><div class=\"line\">--regex-markdown=/^<span class=\"comment\">##[ \\t]+(.*)/\\1/i,Heading_L2/</span></div><div class=\"line\">--regex-markdown=/^<span class=\"comment\">###[ \\t]+(.*)/\\1/k,Heading_L3/</span></div></pre></td></tr></table></figure></p>\n<p>vim ~/.vimc<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">let</span> g:tagbar_type_markdown = &#123;</div><div class=\"line\">    \\ <span class=\"string\">'ctagstype'</span> : <span class=\"string\">'markdown'</span>,</div><div class=\"line\">    \\ <span class=\"string\">'kinds'</span> : [</div><div class=\"line\">        \\ <span class=\"string\">'h:Heading_L1'</span>,</div><div class=\"line\">        \\ <span class=\"string\">'i:Heading_L2'</span>,</div><div class=\"line\">        \\ <span class=\"string\">'k:Heading_L3'</span></div><div class=\"line\">    \\ ]</div><div class=\"line\">\\ &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">跳到光标下tag所定义的位置，用鼠标双击此tag功能也一样</div><div class=\"line\">o 在一个新打开的窗口中显示光标下tag</div><div class=\"line\">显示光标下tag的原型定义</div><div class=\"line\">u 更新taglist窗口中的tag</div><div class=\"line\">s 更改排序方式，在按名字排序和按出现顺序排序间切换</div><div class=\"line\">x taglist窗口放大和缩小，方便查看较长的tag</div><div class=\"line\">+ 打开一个折叠，同zo</div><div class=\"line\">- 将tag折叠起来，同zc</div><div class=\"line\">* 打开所有的折叠，同zR</div><div class=\"line\">= 将所有tag折叠起来，同zM</div><div class=\"line\">[[ 跳到前一个文件</div><div class=\"line\">]] 跳到后一个文件</div><div class=\"line\">q 关闭taglist窗口</div></pre></td></tr></table></figure>\n<h3 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h3><p>文档：<a href=\"https://github.com/majutsushi/tagbar/wiki\" target=\"_blank\" rel=\"external\">https://github.com/majutsushi/tagbar/wiki</a></p>\n<h2 id=\"quickrun\"><a href=\"#quickrun\" class=\"headerlink\" title=\"quickrun\"></a>quickrun</h2><p>快速执行<br>github：<a href=\"https://github.com/thinca/vim-quickrun\" target=\"_blank\" rel=\"external\">https://github.com/thinca/vim-quickrun</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'thinca/vim-quickrun'</span>                                                <span class=\"string\">\" 快速执行</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">let</span> g:quickrun_config = &#123;</div><div class=\"line\">\\   <span class=\"string\">\"_\"</span> : &#123;</div><div class=\"line\">\\       <span class=\"string\">\"outputter\"</span> : <span class=\"string\">\"message\"</span>,</div><div class=\"line\">\\   &#125;,</div><div class=\"line\">\\&#125;</div><div class=\"line\"><span class=\"built_in\">let</span> g:quickrun_no_default_key_mappings = 1</div><div class=\"line\">nmap &lt;Leader&gt;r &lt;Plug&gt;(quickrun)</div><div class=\"line\">map &lt;F10&gt; :QuickRun&lt;CR&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"airline\"><a href=\"#airline\" class=\"headerlink\" title=\"airline\"></a>airline</h2><p>增强状态栏</p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'bling/vim-airline'</span>                                                  <span class=\"string\">\" 状态栏</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> !exists(<span class=\"string\">'g:airline_symbols'</span>)</div><div class=\"line\"><span class=\"built_in\">let</span> g:airline_symbols = &#123;&#125;</div><div class=\"line\">endif</div><div class=\"line\"><span class=\"built_in\">let</span> g:airline_left_sep       = <span class=\"string\">'▶'</span></div><div class=\"line\"><span class=\"built_in\">let</span> g:airline_left_alt_sep   = <span class=\"string\">'❯'</span></div><div class=\"line\"><span class=\"built_in\">let</span> g:airline_right_sep      = <span class=\"string\">'◀'</span></div><div class=\"line\"><span class=\"built_in\">let</span> g:airline_right_alt_sep  = <span class=\"string\">'❮'</span></div><div class=\"line\"><span class=\"built_in\">let</span> g:airline_symbols.linenr = <span class=\"string\">'¶'</span></div><div class=\"line\"><span class=\"built_in\">let</span> g:airline_symbols.branch = <span class=\"string\">'⎇'</span></div></pre></td></tr></table></figure>\n<h2 id=\"nerdcommenter\"><a href=\"#nerdcommenter\" class=\"headerlink\" title=\"nerdcommenter\"></a>nerdcommenter</h2><blockquote>\n<p>快速注释/放开注释</p>\n</blockquote>\n<p>github：<a href=\"https://github.com/scrooloose/nerdcommentera\" target=\"_blank\" rel=\"external\">https://github.com/scrooloose/nerdcommentera</a></p>\n<h3 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'scrooloose/nerdcommenter'</span></div></pre></td></tr></table></figure>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>官方快键键,更多用法见<a href=\"https://github.com/scrooloose/nerdcommenter#default-mappings\" target=\"_blank\" rel=\"external\">快捷键</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;header&gt;c&lt;space&gt;    # 自动判断注释还是放开注释</div><div class=\"line\">&lt;header&gt;cy          # 添加注释后自动</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置-2\"><a href=\"#配置-2\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>常用配置，更多见<a href=\"https://github.com/scrooloose/nerdcommenter#documentation\" target=\"_blank\" rel=\"external\">文档</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">let</span> g:NERDSpaceDelims = 1   <span class=\"comment\"># 注释后添加空格，推荐</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"gundo\"><a href=\"#gundo\" class=\"headerlink\" title=\"gundo.\"></a>gundo.</h2><blockquote>\n<p>查看/跳转历史记录</p>\n</blockquote>\n<p>github:<a href=\"https://github.com/sjl/gundo.vim\" target=\"_blank\" rel=\"external\">https://github.com/sjl/gundo.vim</a></p>\n<h3 id=\"安装-3\"><a href=\"#安装-3\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'sjl/gundo.vim'</span>                      <span class=\"string\">\" 查看文件编辑历史记录</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置-3\"><a href=\"#配置-3\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nnoremap &lt;leader&gt;h :GundoToggle&lt;CR&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"使用-2\"><a href=\"#使用-2\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用;h打开历史记录，使用&lt;ctrl&gt;w+hl左右移动窗口，在历史记录窗口使用jk上下移动，</div><div class=\"line\">回车跳转到某次记录</div></pre></td></tr></table></figure>\n<h2 id=\"vim-expand-region\"><a href=\"#vim-expand-region\" class=\"headerlink\" title=\"vim-expand-region\"></a>vim-expand-region</h2><blockquote>\n<p>区域选择</p>\n</blockquote>\n<p><a href=\"https://github.com/terryma/vim-expand-region\" target=\"_blank\" rel=\"external\"> github </a></p>\n<h3 id=\"安装-4\"><a href=\"#安装-4\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'terryma/vim-expand-region'</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置-4\"><a href=\"#配置-4\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>自定义快捷键 v 区域选择、V 取消选择 这样比较符合vim本身习惯<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vmap v &lt;Plug&gt;(expand_region_expand)</div><div class=\"line\">vmap V &lt;Plug&gt;(expand_region_shrink)</div></pre></td></tr></table></figure></p>\n<h3 id=\"更多-1\"><a href=\"#更多-1\" class=\"headerlink\" title=\"更多\"></a>更多</h3><p>见<a href=\"https://github.com/terryma/vim-expand-region#setting\" target=\"_blank\" rel=\"external\"> 文档 </a></p>\n<h2 id=\"vim-easy-align-快速对齐\"><a href=\"#vim-easy-align-快速对齐\" class=\"headerlink\" title=\"vim-easy-align 快速对齐\"></a>vim-easy-align 快速对齐</h2><h3 id=\"安装-5\"><a href=\"#安装-5\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Plugin <span class=\"string\">'junegunn/vim-easy-align'</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置-5\"><a href=\"#配置-5\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">vmap &lt;Leader&gt;a &lt;Plug&gt;(EasyAlign)</div><div class=\"line\">nmap &lt;Leader&gt;a &lt;Plug&gt;(EasyAlign)</div><div class=\"line\"><span class=\"keyword\">if</span> !exists(<span class=\"string\">'g:easy_align_delimiters'</span>)</div><div class=\"line\">  <span class=\"built_in\">let</span> g:easy_align_delimiters = &#123;&#125;</div><div class=\"line\">endif</div><div class=\"line\"><span class=\"built_in\">let</span> g:easy_align_delimiters[<span class=\"string\">'#'</span>] = &#123; <span class=\"string\">'pattern'</span>: <span class=\"string\">'#'</span>, <span class=\"string\">'ignore_groups'</span>: [<span class=\"string\">'String'</span>] &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用-3\"><a href=\"#使用-3\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>绑定快捷键<leader>a，使用 v 选中目标区域后执行响应命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Leader&gt;a=        对齐等号表达</div><div class=\"line\">&lt;Leader&gt;a:        对齐冒号表达式(json/map等)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 默认左对齐</span></div><div class=\"line\">&lt;Leader&gt;a&lt;space&gt;  首个空格对齐</div><div class=\"line\">&lt;Leader&gt;a2&lt;space&gt; 第二个空格对齐</div><div class=\"line\">&lt;Leader&gt;a-&lt;space&gt; 倒数第一个空格对齐</div><div class=\"line\">&lt;Leader&gt;a-2&lt;space&gt; 倒数第二个空格对齐</div><div class=\"line\">&lt;Leader&gt;a*&lt;space&gt; 所有空格依次对齐</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 右对齐</span></div><div class=\"line\">&lt;Leader&gt;a&lt;Enter&gt;*&lt;space&gt;</div></pre></td></tr></table></figure></leader></p>\n<h3 id=\"更多-2\"><a href=\"#更多-2\" class=\"headerlink\" title=\"更多\"></a>更多</h3><p>见<a href=\"https://github.com/junegunn/vim-easy-align#demo\" target=\"_blank\" rel=\"external\"> 文档 </a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}