<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>温欣爸比的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wxnacy.com/"/>
  <updated>2019-02-07T04:29:23.982Z</updated>
  <id>http://wxnacy.com/</id>
  
  <author>
    <name>温欣爸比</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS 6 搭建 SS 服务器（自动脚本）</title>
    <link href="http://wxnacy.com/2019/02/07/linux-install-ssr/"/>
    <id>http://wxnacy.com/2019/02/07/linux-install-ssr/</id>
    <published>2019-02-07T04:27:33.000Z</published>
    <updated>2019-02-07T04:29:23.982Z</updated>
    
    <content type="html"><![CDATA[<p>以 <a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">自建ss服务器教程</a> 为教程，使用 expect 编写了自动部署脚本。</p><a id="more"></a><div class="toc"><br><br><!-- toc --><ul><li><a href="#an-zhuang-ssr">安装 SSR</a></li><li><a href="#an-zhuang-rui-su">安装锐速</a></li></ul><!-- tocstop --></div><p>直接安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget -N --no-check-certificate https://raw.githubusercontent.com/wxnacy/wshell/master/bin/ssr/centos_install_ssr</span><br><span class="line">$ bash centos_install_ssr</span><br></pre></td></tr></table></figure><p>执行完后服务器自动重启，稍后登陆执行命令，完成锐速加速</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash serverspeeder-all.sh</span><br></pre></td></tr></table></figure><p>或者使用 <a href="https://github.com/wxnacy/wshell" target="_blank" rel="noopener">wshell</a> 进行安装</p><p>原理：</p><ul><li>选用 CentOS6 系统</li><li>安装 SSR 客户端</li><li>使用锐速加速器</li></ul><p>使用 vultr 购买 CentOS 6 服务器，教程有很详细的讲解，不再赘述。</p><h2><span id="an-zhuang-ssr">安装 SSR</span><a href="#an-zhuang-ssr" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y wget expect</span><br><span class="line">$ wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh</span><br></pre></td></tr></table></figure><p>创建自动部署脚本 <code>install_ssr</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env expect</span><br><span class="line"></span><br><span class="line">spawn sh -c &quot;bash ssr.sh&quot;</span><br><span class="line">expect &quot;*1-15*&quot;</span><br><span class="line"># 安装</span><br><span class="line">send &quot;1\r&quot;</span><br><span class="line">expect &quot;(默认: 2333):&quot;</span><br><span class="line">send &quot;\r&quot;</span><br><span class="line">expect &quot;(默认: doub.io)&quot;</span><br><span class="line">send &quot;\r&quot;</span><br><span class="line">expect &quot;(默认: 5. aes-128-ctr):&quot;</span><br><span class="line">send &quot;10\r&quot;</span><br><span class="line">expect &quot;(默认: 2. auth_sha1_v4):&quot;</span><br><span class="line">send &quot;\r&quot;</span><br><span class="line">expect &quot;*Y*n&quot;</span><br><span class="line">send &quot;y\r&quot;</span><br><span class="line">expect &quot;(默认: 1. plain):&quot;</span><br><span class="line">send &quot;\r&quot;</span><br><span class="line">expect &quot;(默认: 无限):&quot;</span><br><span class="line">send &quot;\r&quot;</span><br><span class="line">expect &quot;(默认: 无限):&quot;</span><br><span class="line">send &quot;\r&quot;</span><br><span class="line">expect &quot;(默认: 无限):&quot;</span><br><span class="line">send &quot;\r&quot;</span><br><span class="line">expect &quot;*y*N*&quot;</span><br><span class="line">send &quot;y\r&quot;</span><br><span class="line">expect &quot;*y*N*&quot;</span><br><span class="line">send &quot;y\r&quot;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure><p>使用 expect 运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x install_ssr</span><br><span class="line">$ expect install_ssr</span><br></pre></td></tr></table></figure><p>随后会使用教程使用的默认参数进行自动安装</p><h2><span id="an-zhuang-rui-su">安装锐速</span><a href="#an-zhuang-rui-su" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget --no-check-certificate https://blog.asuhu.com/sh/ruisu.sh</span><br><span class="line">$ wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh</span><br><span class="line">$ bash ruisu.sh</span><br></pre></td></tr></table></figure><p>执行时间会有点长，完毕后机器会自动重启，稍后登陆在进行加速操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash serverspeeder-all.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以 &lt;a href=&quot;https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自建ss服务器教程&lt;/a&gt; 为教程，使用 expect 编写了自动部署脚本。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://wxnacy.com/tags/linux/"/>
    
      <category term="ssr" scheme="http://wxnacy.com/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>Python 实现 Mysql hash 分表的增删改查</title>
    <link href="http://wxnacy.com/2019/02/02/python-mysql-hash-split-table/"/>
    <id>http://wxnacy.com/2019/02/02/python-mysql-hash-split-table/</id>
    <published>2019-02-02T05:59:44.000Z</published>
    <updated>2019-02-02T06:16:22.405Z</updated>
    
    <content type="html"><![CDATA[<p>Mysql 水平分表方式中，比较适合频繁操作全部数据的方式为 hash 取模，比如用户表，所有数据都会频繁使用，使用 hash 取模的方式可以平均的将数据分配到各个表中。</p><a id="more"></a><div class="toc"><br><br><!-- toc --><!-- tocstop --></div><p>理解起来并不难，但是在写代码时需要讲究一些方法，如果有 10 个表，我们总不能写 10 个 Model 进行查询操作吧。</p><p>好在 Python 中可以利用 <code>type()</code> 方法动态创建 <code>class</code>，我们可以根据 id 来生成相应的 Model。</p><p>先来创建两个表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `test_1` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(32) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;名字&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT=&apos;测试&apos;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `test_0` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(32) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;名字&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT=&apos;测试&apos;;</span><br></pre></td></tr></table></figure><p>我们使用 <code>flask-sqlalchemy</code> 模块来进行 ORM 操作，正常的写法应该是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: wxnacy(wxnacy@gmail.com)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'test_0'</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = db.Column(db.String, default=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t.id = <span class="number">1</span></span><br><span class="line">t.name  = <span class="string">'test'</span></span><br><span class="line">db.session.add(t)</span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"></span><br><span class="line">Test.query.filter_by(id=<span class="number">1</span>).first()</span><br></pre></td></tr></table></figure><p>我说过我不想在写一个 <code>Test1</code> 来对应 <code>test_1</code> 表了，所以我需要对 <code>Test</code> 做一些修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: wxnacy(wxnacy@gmail.com)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></span><br><span class="line">    _model = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(test_id)</span>:</span></span><br><span class="line">        <span class="comment"># 通过取余的方式将数据平均分配到两个表中</span></span><br><span class="line">        index = test_id % <span class="number">2</span></span><br><span class="line">        tablename = <span class="string">'test_&#123;&#125;'</span>.format(index)</span><br><span class="line">        classname = <span class="string">'Test_&#123;&#125;'</span>.format(index)</span><br><span class="line"></span><br><span class="line">        Model = Test._model.get(classname)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Model:</span><br><span class="line">            Model = type(classname, (BaseModel, db.Model), &#123;</span><br><span class="line">                <span class="string">'__module__'</span>: __name__,</span><br><span class="line">                <span class="string">'__name__'</span>: classname,</span><br><span class="line">                <span class="string">'__tablename__'</span>: tablename,</span><br><span class="line"></span><br><span class="line">                <span class="string">'id'</span> : db.Column(db.BIGINT, primary_key=<span class="keyword">True</span>),</span><br><span class="line">                <span class="string">'name'</span> : db.Column(db.String, default=<span class="string">""</span>, doc=<span class="string">""</span>),</span><br><span class="line">            &#125;)</span><br><span class="line">            Test._model[classname] = Model</span><br><span class="line">        <span class="keyword">return</span> Model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line"></span><br><span class="line">T = Test.model(<span class="number">1</span>)</span><br><span class="line">t = T()</span><br><span class="line">t.id = <span class="number">1</span></span><br><span class="line">t.name = <span class="string">'test'</span></span><br><span class="line">db.session.add(t)</span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"></span><br><span class="line">T.query.filter_by(id=<span class="number">1</span>).first()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mysql 水平分表方式中，比较适合频繁操作全部数据的方式为 hash 取模，比如用户表，所有数据都会频繁使用，使用 hash 取模的方式可以平均的将数据分配到各个表中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://wxnacy.com/tags/python/"/>
    
      <category term="mysql" scheme="http://wxnacy.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux wc 命令：计算行数、字数、字节数</title>
    <link href="http://wxnacy.com/2019/02/01/linux-wc/"/>
    <id>http://wxnacy.com/2019/02/01/linux-wc/</id>
    <published>2019-02-01T03:56:30.000Z</published>
    <updated>2019-02-01T04:15:55.803Z</updated>
    
    <content type="html"><![CDATA[<p>wc 命令用于查看文件的行数、字数、字节数</p><a id="more"></a><div class="toc"><br><br><!-- toc --><ul><li><a href="#kuai-su-shi-yong">快速使用</a></li><li><a href="#geng-duo-can-shu">更多参数</a></li><li><a href="#yan-shen-shi-yong">延伸使用</a></li></ul><!-- tocstop --></div><h2><span id="kuai-su-shi-yong">快速使用</span><a href="#kuai-su-shi-yong" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wc wsh.log</span><br><span class="line">   901    3226   13803 wsh.log</span><br></pre></td></tr></table></figure><p>查询的三个数字分别为行数、单词数、字节数</p><h2><span id="geng-duo-can-shu">更多参数</span><a href="#geng-duo-can-shu" class="header-anchor"></a></h2><p>使用 <code>man</code> 命令可以查看 wc 的完整文档、还有如下参数</p><ul><li><code>-c</code>: 查看字节数</li><li><code>-m</code>: 查看字符数</li><li><code>-w</code>: 查看单词数</li><li><code>-l</code>: 查看行数<br>macOS 没有下面的命令</li><li><code>-L</code>: 查看最长行的长度</li><li><code>--help</code>: 查看在线帮助</li><li><code>--version</code>: 查看版本</li></ul><h2><span id="yan-shen-shi-yong">延伸使用</span><a href="#yan-shen-shi-yong" class="header-anchor"></a></h2><p>wc 也可以接受管道信息，我们可以查看当前目录文件数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls | wc -l</span><br></pre></td></tr></table></figure><p>这是包含文件夹的，如果只想要查看文件数，可以借助 <code>grep</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ll | grep ^- | wc -l</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;wc 命令用于查看文件的行数、字数、字节数&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://wxnacy.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 查询 JSON 结果的相关函数</title>
    <link href="http://wxnacy.com/2019/01/26/mysql-json-functions/"/>
    <id>http://wxnacy.com/2019/01/26/mysql-json-functions/</id>
    <published>2019-01-26T09:25:23.000Z</published>
    <updated>2019-01-26T11:43:14.929Z</updated>
    
    <content type="html"><![CDATA[<p>JSON 格式字段是 Mysql 5.7 新加的属性，不够它本质上以字符串性质保存在库中的，刚接触时我只了解 <code>$.xx</code> 查询字段的方法，因为大部分时间，有这个就够了，其他交给程序就行了，但是最近一些操作需要更复杂的查询操作，所以赶紧了解下更多的方法。</p><a id="more"></a><div class="toc"><br><br><!-- toc --><ul><li><a href="#json-extract-json-doc-path">JSON_EXTRACT(json_doc [,path])</a></li><li><a href="#json-depth-json-doc">JSON_DEPTH(json_doc)</a></li><li><a href="#json-length-json-doc-path">JSON_LENGTH(json_doc [, path])</a></li><li><a href="#json-type-json-doc">JSON_TYPE(json_doc)</a></li><li><a href="#json-valid">JSON_VALID</a></li></ul><!-- tocstop --></div><h2><span id="json-extract-json-doc-path">JSON_EXTRACT(json_doc [,path])</span><a href="#json-extract-json-doc-path" class="header-anchor"></a></h2><p>查询字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set @j = &apos;&#123;&quot;name&quot;:&quot;wxnacy&quot;&#125;&apos;;</span><br><span class="line">mysql&gt; select JSON_EXTRACT(@j, &apos;$.name&apos;);</span><br><span class="line">+----------------------------+</span><br><span class="line">| JSON_EXTRACT(@j, &apos;$.name&apos;) |</span><br><span class="line">+----------------------------+</span><br><span class="line">| &quot;wxnacy&quot;                   |</span><br><span class="line">+----------------------------+</span><br></pre></td></tr></table></figure><p>还有一种更简洁的方式，但是只能在查询表时使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select ext -&gt; &apos;$.name&apos; from test;</span><br><span class="line">+-----------------+</span><br><span class="line">| ext -&gt; &apos;$.name&apos; |</span><br><span class="line">+-----------------+</span><br><span class="line">| &quot;wxnacy&quot;        |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p>在 <code>$.</code> 后可以正常的使用 JSON 格式获取数据方式，比如数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set @j = &apos;&#123;&quot;a&quot;: [1, 2]&#125;&apos;;</span><br><span class="line">mysql&gt; select JSON_EXTRACT(@j, &apos;$.a[0]&apos;);</span><br><span class="line">+----------------------------+</span><br><span class="line">| JSON_EXTRACT(@j, &apos;$.a[0]&apos;) |</span><br><span class="line">+----------------------------+</span><br><span class="line">| 1                          |</span><br><span class="line">+----------------------------+</span><br></pre></td></tr></table></figure><h2><span id="json-depth-json-doc">JSON_DEPTH(json_doc)</span><a href="#json-depth-json-doc" class="header-anchor"></a></h2><p>计算 JSON 深度，计算方式 <code>{} []</code> 有一个符号即为一层，符号下有数据增加一层，复杂 JSON 算到最深的一次为止，官方文档说 <code>null</code> 值深度为 0，但是实际效果并非如此，列举几个例子</p><p><img src="http://wxnacy-img.oss-cn-beijing.aliyuncs.com/blog/json_depth_360.png" alt="json_depth"></p><h2><span id="json-length-json-doc-path">JSON_LENGTH(json_doc [, path])</span><a href="#json-length-json-doc-path" class="header-anchor"></a></h2><p>计算 JSON 最外层或者指定 path 的长度，标量的长度为1。数组的长度是数组元素的数量，对象的长度是对象成员的数量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT JSON_LENGTH(&apos;[1, 2, &#123;&quot;a&quot;: 3&#125;]&apos;);</span><br><span class="line">+---------------------------------+</span><br><span class="line">| JSON_LENGTH(&apos;[1, 2, &#123;&quot;a&quot;: 3&#125;]&apos;) |</span><br><span class="line">+---------------------------------+</span><br><span class="line">|                               3 |</span><br><span class="line">+---------------------------------+</span><br><span class="line">mysql&gt; SELECT JSON_LENGTH(&apos;&#123;&quot;a&quot;: 1, &quot;b&quot;: &#123;&quot;c&quot;: 30&#125;&#125;&apos;);</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">| JSON_LENGTH(&apos;&#123;&quot;a&quot;: 1, &quot;b&quot;: &#123;&quot;c&quot;: 30&#125;&#125;&apos;) |</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">|                                       2 |</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">mysql&gt; SELECT JSON_LENGTH(&apos;&#123;&quot;a&quot;: 1, &quot;b&quot;: &#123;&quot;c&quot;: 30&#125;&#125;&apos;, &apos;$.b&apos;);</span><br><span class="line">+------------------------------------------------+</span><br><span class="line">| JSON_LENGTH(&apos;&#123;&quot;a&quot;: 1, &quot;b&quot;: &#123;&quot;c&quot;: 30&#125;&#125;&apos;, &apos;$.b&apos;) |</span><br><span class="line">+------------------------------------------------+</span><br><span class="line">|                                              1 |</span><br><span class="line">+------------------------------------------------+</span><br></pre></td></tr></table></figure><h2><span id="json-type-json-doc">JSON_TYPE(json_doc)</span><a href="#json-type-json-doc" class="header-anchor"></a></h2><p>返回一个utf8mb4字符串，指示JSON值的类型。 这可以是对象，数组或标量类型，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SET @j = &apos;&#123;&quot;a&quot;: [10, true]&#125;&apos;;</span><br><span class="line">mysql&gt; SELECT JSON_TYPE(@j);</span><br><span class="line">+---------------+</span><br><span class="line">| JSON_TYPE(@j) |</span><br><span class="line">+---------------+</span><br><span class="line">| OBJECT        |</span><br><span class="line">+---------------+</span><br><span class="line">mysql&gt; SELECT JSON_TYPE(JSON_EXTRACT(@j, &apos;$.a&apos;));</span><br><span class="line">+------------------------------------+</span><br><span class="line">| JSON_TYPE(JSON_EXTRACT(@j, &apos;$.a&apos;)) |</span><br><span class="line">+------------------------------------+</span><br><span class="line">| ARRAY                              |</span><br><span class="line">+------------------------------------+</span><br><span class="line">mysql&gt; SELECT JSON_TYPE(JSON_EXTRACT(@j, &apos;$.a[0]&apos;));</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| JSON_TYPE(JSON_EXTRACT(@j, &apos;$.a[0]&apos;)) |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| INTEGER                               |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">mysql&gt; SELECT JSON_TYPE(JSON_EXTRACT(@j, &apos;$.a[1]&apos;));</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| JSON_TYPE(JSON_EXTRACT(@j, &apos;$.a[1]&apos;)) |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| BOOLEAN                               |</span><br><span class="line">+---------------------------------------+</span><br></pre></td></tr></table></figure><p>可能的返回类型</p><ul><li>纯JSON类型：<ul><li>OBJECT：JSON对象</li><li>ARRAY：JSON数组</li><li>BOOLEAN：JSON真假文字</li><li>NULL：JSON null文字</li></ul></li><li>数字类型：<ul><li>INTEGER：MySQL TINYINT，SMALLINT，MEDIUMINT以及INT和BIGINT标量</li><li>DOUBLE：MySQL DOUBLE FLOAT标量</li><li>DECIMAL：MySQL DECIMAL和NUMERIC标量</li></ul></li><li>时间类型：<ul><li>DATETIME：MySQL DATETIME和TIMESTAMP标量</li><li>日期：MySQL DATE标量</li><li>TIME：MySQL TIME标量</li></ul></li><li>字符串类型：<ul><li>STRING：MySQL utf8字符类型标量：CHAR，VARCHAR，TEXT，ENUM和SET</li></ul></li><li>二进制类型：<ul><li>BLOB：MySQL二进制类型标量，包括BINARY，VARBINARY，BLOB和BIT<br>所有其他类型：<br>OPAQUE（原始位）</li></ul></li></ul><h2><span id="json-valid">JSON_VALID</span><a href="#json-valid" class="header-anchor"></a></h2><p>返回0或1以指示值是否为有效JSON。 如果参数为NULL，则返回NULL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT JSON_VALID(&apos;&#123;&quot;a&quot;: 1&#125;&apos;);</span><br><span class="line">+------------------------+</span><br><span class="line">| JSON_VALID(&apos;&#123;&quot;a&quot;: 1&#125;&apos;) |</span><br><span class="line">+------------------------+</span><br><span class="line">|                      1 |</span><br><span class="line">+------------------------+</span><br><span class="line">mysql&gt; SELECT JSON_VALID(&apos;hello&apos;), JSON_VALID(&apos;&quot;hello&quot;&apos;);</span><br><span class="line">+---------------------+-----------------------+</span><br><span class="line">| JSON_VALID(&apos;hello&apos;) | JSON_VALID(&apos;&quot;hello&quot;&apos;) |</span><br><span class="line">+---------------------+-----------------------+</span><br><span class="line">|                   0 |                     1 |</span><br><span class="line">+---------------------+-----------------------+</span><br></pre></td></tr></table></figure><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html" target="_blank" rel="noopener">Functions That Return JSON Value Attributes</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSON 格式字段是 Mysql 5.7 新加的属性，不够它本质上以字符串性质保存在库中的，刚接触时我只了解 &lt;code&gt;$.xx&lt;/code&gt; 查询字段的方法，因为大部分时间，有这个就够了，其他交给程序就行了，但是最近一些操作需要更复杂的查询操作，所以赶紧了解下更多的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://wxnacy.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose 启动报错</title>
    <link href="http://wxnacy.com/2019/01/23/docker-compose-up-error/"/>
    <id>http://wxnacy.com/2019/01/23/docker-compose-up-error/</id>
    <published>2019-01-23T03:01:41.000Z</published>
    <updated>2019-01-23T03:06:49.052Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Couldn<span class="string">'t connect to Docker daemon at http+docker://localunixsocket - is it running?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If it'</span>s at a non-standard location, specify the URL with the DOCKER_HOST environment variable.</span><br></pre></td></tr></table></figure><a id="more"></a><div class="toc"><br><br><!-- toc --><!-- tocstop --></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure><p><code>docker-compose</code> 启动时报了如上错误，本身对该命令不太熟悉，所以开始一直在纠结 <code>http+docker://localunixsocket</code> 和 <code>DOCKER_HOST</code>，后来搜索下发现很简单。</p><p><code>docker</code> 和 <code>sudo docker</code> 在机器里会有两个启动的可能，<code>docker-compose</code> 也要跟他相对应</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR: Couldn&lt;span class=&quot;string&quot;&gt;&#39;t connect to Docker daemon at http+docker://localunixsocket - is it running?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;If it&#39;&lt;/span&gt;s at a non-standard location, specify the URL with the DOCKER_HOST environment variable.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://wxnacy.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装 PyAudio 出错</title>
    <link href="http://wxnacy.com/2019/01/22/centos7-install-pyaudio-error/"/>
    <id>http://wxnacy.com/2019/01/22/centos7-install-pyaudio-error/</id>
    <published>2019-01-22T08:19:08.000Z</published>
    <updated>2019-01-22T08:25:09.894Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS 7 系统下安装 PyAudio 总是报错，关键信息如下</p><a id="more"></a><div class="toc"><br><br><!-- toc --><!-- tocstop --></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">#include "portaudio.h"</span></span><br><span class="line">...</span><br><span class="line">error: Setup script exited with error: <span class="built_in">command</span> <span class="string">'gcc'</span> failed with <span class="built_in">exit</span> status 1</span><br></pre></td></tr></table></figure><p>错误原因在于缺少 <code>portaudio.h</code> 头文件，安装 portaudio 即可</p><p>访问下载页面 <a href="http://portaudio.com/download.html" target="_blank" rel="noopener">http://portaudio.com/download.html</a> 下载 <code>pa_stable_v190600_20161030.tgz</code> 或更高版本，并解压安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://portaudio.com/archives/pa_stable_v190600_20161030.tgz</span><br><span class="line">$ var -xvf pa_stable_v190600_20161030.tgz</span><br><span class="line">$ <span class="built_in">cd</span> portaudio</span><br><span class="line">$ ./configure</span><br><span class="line">$ sudo make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><p>随后再次下载 PyAudio 即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install PyAudio</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo easy_install PyAudio</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS 7 系统下安装 PyAudio 总是报错，关键信息如下&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://wxnacy.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 解决升级版本后渲染 Markdown TOC 不生效</title>
    <link href="http://wxnacy.com/2019/01/19/hexo-render-toc-error/"/>
    <id>http://wxnacy.com/2019/01/19/hexo-render-toc-error/</id>
    <published>2019-01-19T05:57:46.000Z</published>
    <updated>2019-01-19T06:22:00.301Z</updated>
    
    <content type="html"><![CDATA[<p>这两天因为升级 Node 环境到 <code>10.15.0</code> 版本，导致 Hexo 也做了升级，结果发生了意外。</p><a id="more"></a><div class="toc"><br><br><!-- toc --><!-- tocstop --></div><p>原来的很多文章，渲染 Markdown 文件都出现了问题，并没有渲染成相应的 <code>html</code> 代码，然而另一部分却正常。</p><p>开始以为是某些库的问题，进行了各种清除缓存重新下载的操作，依然有问题。</p><p>愁了好长时间，将没有问题的文章和有问题的一一对比，并且逐渐尝试，终于，终于找到了问题。</p><p>问题出在了 &#60;&#33;&#45;&#45; toc &#45;&#45;&#62; 上，在文章的开头我需要使用这个符号进行目录转义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这两天因为升级 Node 环境到 `10.15.0` 版本，导致 Hexo 也做了升级，结果发生了意外。</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;&lt;!-- toc --&gt;</span><br></pre></td></tr></table></figure><p>如果去掉中间的空行，那么就会解析错误，我认为这是 hexo 插件的 bug，不过显然我等不到它来解决了，只能手动加上了空行。</p><p>不过我查看了，我的文章中有 300 多个有问题的，额，作为一个程序猿，怎么可能手动去改呢，写个程序，将这些全部都刷上空行，搞定。</p><p>经过了这次，也算是一个小教训，以后更加需要关注的是写作规范，每行间手动加上空格，也是一个良好的编写习惯。</p><p>哎！我也只能这样安慰自己。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天因为升级 Node 环境到 &lt;code&gt;10.15.0&lt;/code&gt; 版本，导致 Hexo 也做了升级，结果发生了意外。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://wxnacy.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>React 通过入门项目 create-react-app 了解其语法</title>
    <link href="http://wxnacy.com/2019/01/18/create-react-app/"/>
    <id>http://wxnacy.com/2019/01/18/create-react-app/</id>
    <published>2019-01-18T06:26:20.000Z</published>
    <updated>2019-01-19T09:10:37.177Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a> 是 React 的入门项目，通过它可以窥见 React 项目的简单构成和基本语法。</p><a id="more"></a><div class="toc"><br><br><!-- toc --><ul><li><a href="#an-zhuang">安装</a></li><li><a href="#qi-dong-liu-cheng">启动流程</a></li><li><a href="#gou-jian-jing-tai-ye-mian">构建静态页面</a></li><li><a href="#wei-shi-me-ru-kou-zhi-you-index-html">为什么入口只有 index.html</a></li></ul><!-- tocstop --></div><h2><span id="an-zhuang">安装</span><a href="#an-zhuang" class="header-anchor"></a></h2><p>三种方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app my-app</span><br></pre></td></tr></table></figure><p>npx 来自 npm 5.2+ 或更高版本自带软件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init react-app my-app</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn create react-app my-app</span><br></pre></td></tr></table></figure><p><strong>启动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> my-app</span><br><span class="line">$ yarn start</span><br></pre></td></tr></table></figure><p>随后会启动 <code>3000</code> 端口服务，并自动在浏览器中打开地址 <code>http://localhost:300</code>，如图</p><p><img src="https://wxnacy-img.oss-cn-beijing.aliyuncs.com/blog/react.png" alt="react-app"></p><p>为什么使用 <code>yarn start</code> 命令可以启动，原因在于 <code>package.json</code> 中的关键代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "react-scripts start",</span><br><span class="line">    "build": "react-scripts build",</span><br><span class="line">    "test": "react-scripts test",</span><br><span class="line">    "eject": "react-scripts eject"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管是 <code>npm</code> 还是 <code>yarn</code>，相应的命令都会在 <code>scripts</code> 字段中转换为相应的 <code>react-scripts</code> 命令</p><h2><span id="qi-dong-liu-cheng">启动流程</span><a href="#qi-dong-liu-cheng" class="header-anchor"></a></h2><p>以下为 React 项目简单结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my-app</span><br><span class="line">├── README.md</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── .gitignore</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── manifest.json</span><br><span class="line">└── src</span><br><span class="line">    ├── App.css</span><br><span class="line">    ├── App.js</span><br><span class="line">    ├── App.test.js</span><br><span class="line">    ├── index.css</span><br><span class="line">    ├── index.js</span><br><span class="line">    ├── logo.svg</span><br><span class="line">    └── serviceWorker.js</span><br></pre></td></tr></table></figure><p>通过项目结构，我们慢慢了解下，React 的启动流程。</p><p><strong>启动程序</strong></p><p>首先这是一个 Node 项目，所以默认的启动程序为 <code>src/index.js</code> 文件。</p><p>通过文件中的关键代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App from <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App /&gt;, document.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><p>可以看到，<code>ReactDOM</code> 将 <code>&lt;App /&gt;</code> 渲染到 <code>document.getElementById(&#39;root&#39;)</code> 中，<code>root</code> 是从 <code>public/index.html</code> 获取的。</p><p><strong>渲染程序</strong></p><p>查看 <code>App.js</code> 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; from <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo from <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;header className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">          &lt;img src=&#123;logo&#125; className=<span class="string">"App-logo"</span> alt=<span class="string">"logo"</span> /&gt;</span><br><span class="line">          &lt;p&gt;</span><br><span class="line">            Edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.</span><br><span class="line">          &lt;/p&gt;</span><br><span class="line">          &lt;a</span><br><span class="line">            className=<span class="string">"App-link"</span></span><br><span class="line">            href=<span class="string">"https://reactjs.org"</span></span><br><span class="line">            target=<span class="string">"_blank"</span></span><br><span class="line">            rel=<span class="string">"noopener noreferrer"</span></span><br><span class="line">          &gt;</span><br><span class="line">            Learn React</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">        &lt;/header&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p><code>class App</code> 是渲染页面组件，在类中可以通过各种内置或自己写的 JS 方法，对页面进行处理，并通过 <code>render()</code> 方法渲染页面，在这个方法内返回的是由 JSX 语法编写的代码，该语法我认为就是由 <code>js/html/css</code> 组合而成，所以 React 也是经常被认为是大逆不道将 三种语言写在同一个文件里。</p><h2><span id="gou-jian-jing-tai-ye-mian">构建静态页面</span><a href="#gou-jian-jing-tai-ye-mian" class="header-anchor"></a></h2><p>虽然是 Node 项目，但是作为前端页面，我们总要将它构建成静态页面，才能发布到服务中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn build</span><br></pre></td></tr></table></figure><p>运行后，会在根目录生成 <code>build</code> 文件夹，构建后的静态内容都在其中，结构如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">build</span><br><span class="line">├── asset-manifest.json</span><br><span class="line">├── favicon.ico</span><br><span class="line">├── index.html</span><br><span class="line">├── manifest.json</span><br><span class="line">├── precache-manifest.3351d163fa29e67b0b41ea8c711c59df.js</span><br><span class="line">├── service-worker.js</span><br><span class="line">└── static</span><br><span class="line">    ├── css</span><br><span class="line">    │   ├── main.27a53a32.chunk.css</span><br><span class="line">    │   └── main.27a53a32.chunk.css.map</span><br><span class="line">    ├── js</span><br><span class="line">    │   ├── 1.fa92c112.chunk.js</span><br><span class="line">    │   ├── 1.fa92c112.chunk.js.map</span><br><span class="line">    │   ├── main.881217d8.chunk.js</span><br><span class="line">    │   ├── main.881217d8.chunk.js.map</span><br><span class="line">    │   ├── runtime~main.229c360f.js</span><br><span class="line">    │   └── runtime~main.229c360f.js.map</span><br><span class="line">    └── media</span><br><span class="line">        └── logo.5d5d9eef.svg</span><br><span class="line"></span><br><span class="line">4 directories, 15 files</span><br></pre></td></tr></table></figure><p>页面入口为 <code>index.html</code>，静态文件在 <code>static</code> 文件夹中。</p><p>不过整个文件夹为什么只有一个 <code>index.html</code>，如果有多个页面，它可以完成任务吗？</p><h2><span id="wei-shi-me-ru-kou-zhi-you-index-html">为什么入口只有 index.html</span><a href="#wei-shi-me-ru-kou-zhi-you-index-html" class="header-anchor"></a></h2><p>首先回答上面那个问题，React 项目只需要一个 <code>index.html</code> 就可以访问所有页面。</p><p>为什么呢？要回答这个问题需要看下源码。</p><p>上边我们说到 <code>index.js</code> 加载了 <code>App.js</code> 渲染的页面，那么我们可以写多个类似 <code>App.js</code> 的“页面”，而 <code>index.js</code> 中可以通过访问地址来决定渲染那个页面。</p><p>当然这需要借助其他依赖包，不在我们本次讨论返回内。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/facebook/create-react-app&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;create-react-app&lt;/a&gt; 是 React 的入门项目，通过它可以窥见 React 项目的简单构成和基本语法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://wxnacy.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Golang 图片压缩</title>
    <link href="http://wxnacy.com/2019/01/15/go-nfnt-resize/"/>
    <id>http://wxnacy.com/2019/01/15/go-nfnt-resize/</id>
    <published>2019-01-15T09:22:56.000Z</published>
    <updated>2019-01-21T03:57:53.895Z</updated>
    
    <content type="html"><![CDATA[<p>Golang 图片压缩可以直接使用第三方包 <a href="https://github.com/nfnt/resize" target="_blank" rel="noopener">resize</a></p><a id="more"></a><div class="toc"><br><br><!-- toc --><ul><li><a href="#an-zhuang">安装</a></li><li><a href="#shi-yong">使用</a></li></ul><!-- tocstop --></div><h2><span id="an-zhuang">安装</span><a href="#an-zhuang" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/nfnt/resize</span><br></pre></td></tr></table></figure><h2><span id="shi-yong">使用</span><a href="#shi-yong" class="header-anchor"></a></h2><p><strong>导入</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"github.com/nfnt/resize"</span></span><br></pre></td></tr></table></figure><p><strong>语法</strong></p><p><code>resize</code> 有两个方法 <code>Resize</code> <code>Thumbnail</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resize.Resize(width, height <span class="keyword">uint</span>, img image.Image, interp resize.InterpolationFunction) image.Image</span><br><span class="line"><span class="comment">// resize.Resize 使用插值函数interp创建具有新尺寸（宽度，高度）的缩放图像。 如果宽度或高度设置为0，则将其设置为保留宽高比值。</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resize.Thumbnail(maxWidth, maxHeight <span class="keyword">uint</span>, img image.Image, interp resize.InterpolationFunction) image.Image</span><br><span class="line"><span class="comment">// resize.Thumbnail 缩小图像，将其纵横比保持为最大尺寸（maxWidth，maxHeight）。 如果原始尺寸小于提供的尺寸，它将返回原始图像。</span></span><br></pre></td></tr></table></figure><p><strong>简单使用</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"github.com/nfnt/resize"</span></span><br><span class="line">    <span class="string">"image/png"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    file_path := <span class="string">"/Users/wxnacy/Downloads/react-app1.png"</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">    file, err := os.Open(file_path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// decode jpeg into image.Image</span></span><br><span class="line">img, err := png.Decode(file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// resize to width 1000 using Lanczos resampling</span></span><br><span class="line"><span class="comment">// and preserve aspect ratio</span></span><br><span class="line">    m := resize.Resize(<span class="number">800</span>, <span class="number">0</span>, img, resize.NearestNeighbor)</span><br><span class="line"></span><br><span class="line">out, err := os.Create(<span class="string">"react.NearestNeighbor.png"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> out.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// write new image to file</span></span><br><span class="line">png.Encode(out, m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里边需要关注的是参数 <code>resize.InterpolationFunction</code>，它有几个值</p><ul><li>NearestNeighbor: <a href="https://en.wikipedia.org/wiki/Nearest-neighbor_interpolation" target="_blank" rel="noopener">Nearest-neighbor interpolation</a></li><li><a href="https://en.wikipedia.org/wiki/Bilinear_interpolation" target="_blank" rel="noopener">Bilinear: Bilinear interpolation</a></li><li>Bicubic: <a href="https://en.wikipedia.org/wiki/Bicubic_interpolation" target="_blank" rel="noopener">Bicubic interpolation</a></li><li>MitchellNetravali: <a href="https://dl.acm.org/citation.cfm?id=378514" target="_blank" rel="noopener">Mitchell-Netravali interpolation</a></li><li>Lanczos2: <a href="https://en.wikipedia.org/wiki/Lanczos_resampling" target="_blank" rel="noopener">Lanczos resampling</a> with a=2</li><li>Lanczos3: <a href="https://en.wikipedia.org/wiki/Lanczos_resampling" target="_blank" rel="noopener">Lanczos resampling</a> with a=3</li></ul><p>这个压缩方式的展示效果可以从这里看到 <a href="https://github.com/nfnt/resize#downsizing-samples" target="_blank" rel="noopener">https://github.com/nfnt/resize#downsizing-samples</a></p><p>我挨个点连接进行，发现实在不想去纠结他们的具体原理，我只想比较压缩后的文件大小</p><p>我依次按照集中格式进行了压缩，我们对比下文件大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--@  1 wxnacy  staff  64633 Jan 18 18:01 react-app1.png</span><br><span class="line">-rw-r--r--@  1 wxnacy  staff  19857 Jan 19 17:13 react.NearestNeighbor.png</span><br><span class="line">-rw-r--r--   1 wxnacy  staff  23336 Jan 19 17:12 react.Bilinear.png</span><br><span class="line">-rw-r--r--   1 wxnacy  staff  25966 Jan 19 17:12 react.MitchellNetravali.png</span><br><span class="line">-rw-r--r--@  1 wxnacy  staff  27241 Jan 19 17:12 react.Lanczos2.png</span><br><span class="line">-rw-r--r--   1 wxnacy  staff  27356 Jan 19 17:12 react.Bicubic.png</span><br><span class="line">-rw-r--r--@  1 wxnacy  staff  31222 Jan 19 17:09 react.Lanczos3.png</span><br></pre></td></tr></table></figure><p>经过对比，<code>Lanczos3</code> 算法文件最大，图片最清晰，<code>NearestNeighbor</code> 最差</p><p>ok，这样我们就知道了，如果你追求清晰的或者文件大小该选什么类型了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Golang 图片压缩可以直接使用第三方包 &lt;a href=&quot;https://github.com/nfnt/resize&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;resize&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="go" scheme="http://wxnacy.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Linux ab 使用 localhost 报错</title>
    <link href="http://wxnacy.com/2019/01/14/ab-lh-error/"/>
    <id>http://wxnacy.com/2019/01/14/ab-lh-error/</id>
    <published>2019-01-14T07:34:36.000Z</published>
    <updated>2019-01-19T05:30:00.709Z</updated>
    
    <content type="html"><![CDATA[<p>使用 ab 测试本地接口时报错</p><a id="more"></a><div class="toc"><br><br><!-- toc --><!-- tocstop --><p></div><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1826891 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking localhost (be patient)...</span><br><span class="line">Test aborted after 10 failures</span><br><span class="line"></span><br><span class="line">apr_socket_connect(): Invalid argument (22)</span><br></pre></td></tr></table></figure></p><p>原因在于它无法识别 <code>localhost</code> 地址替换为 <code>127.0.0.1</code> 即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 ab 测试本地接口时报错&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://wxnacy.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>重新学 Java 系列：Maven 下载的 jar 包去哪了</title>
    <link href="http://wxnacy.com/2019/01/11/java-renew-maven-where-jar/"/>
    <id>http://wxnacy.com/2019/01/11/java-renew-maven-where-jar/</id>
    <published>2019-01-11T10:18:45.000Z</published>
    <updated>2019-01-19T04:06:42.181Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这个是一个系列阅读，关于为什么重新学习，我在文章 <a href="/2018/12/29/java-renew-why/">重新学 Java 系列：新系列、新开始</a>(<a href="https://wxnacy.com/2018/12/29/java-renew-why/">https://wxnacy.com/2018/12/29/java-renew-why/</a>) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。</p></blockquote><a id="more"></a><div class="toc"><br><br><!-- toc --><ul><li><a href="#ben-di-cang-ku">本地仓库</a></li><li><a href="#an-zhuang-ben-di-xiang-mu-dao-cang-ku">安装本地项目到仓库</a></li></ul><!-- tocstop --><p></div></p><h2><span id="ben-di-cang-ku">本地仓库</span><a href="#ben-di-cang-ku" class="header-anchor"></a></h2><p>在 Maven 项目中，<code>pom.xml</code> 文件中的 <code>dependencies</code> 节点为项目需要的数据包，那编<br>译运行时 jar 包都下载到哪里呢？</p><p>Maven 有本地的仓库，地址默认为 <code>~/.m2/repository</code></p><p>进入目录会发现，本地所以项目的依赖包都以包名加版本号的形式存放在里边，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.m2/repository/org/jdom/jdom/1.1</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── _remote.repositories</span><br><span class="line">├── jdom-1.1.jar</span><br><span class="line">├── jdom-1.1.jar.sha1</span><br><span class="line">├── jdom-1.1.pom</span><br><span class="line">└── jdom-1.1.pom.sha1</span><br><span class="line"></span><br><span class="line">0 directories, 5 files</span><br></pre></td></tr></table></figure><p>本地仓库的位置可以通过配置文件修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/<span class="built_in">local</span>/Cellar/maven/3.6.0/libexec/conf/settings.xml</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;/path/to/<span class="built_in">local</span>/repo&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><h2><span id="an-zhuang-ben-di-xiang-mu-dao-cang-ku">安装本地项目到仓库</span><a href="#an-zhuang-ben-di-xiang-mu-dao-cang-ku" class="header-anchor"></a></h2><p>假如我们写完一个项目，希望它可以像其他 jar 包一样，可以在其他项目中使用，首先我们可以先安装到本地仓库。</p><p>根目录下执行安装命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn install</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个是一个系列阅读，关于为什么重新学习，我在文章 &lt;a href=&quot;/2018/12/29/java-renew-why/&quot;&gt;重新学 Java 系列：新系列、新开始&lt;/a&gt;(&lt;a href=&quot;https://wxnacy.com/2018/12/29/java-renew-why/&quot;&gt;https://wxnacy.com/2018/12/29/java-renew-why/&lt;/a&gt;) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>重新学 Java 系列：Maven 快速入门</title>
    <link href="http://wxnacy.com/2019/01/10/java-renew-maven-start/"/>
    <id>http://wxnacy.com/2019/01/10/java-renew-maven-start/</id>
    <published>2019-01-10T02:24:40.000Z</published>
    <updated>2019-01-19T04:06:42.181Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这个是一个系列阅读，关于为什么重新学习，我在文章 <a href="/2018/12/29/java-renew-why/">重新学 Java 系列：新系列、新开始</a>(<a href="https://wxnacy.com/2018/12/29/java-renew-why/">https://wxnacy.com/2018/12/29/java-renew-why/</a>) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。</p></blockquote><a id="more"></a><div class="toc"><br><br><!-- toc --><ul><li><a href="#xia-zai">下载</a></li><li><a href="#chuang-jian-xiang-mu">创建项目</a></li><li><a href="#yun-xing">运行</a></li></ul><!-- tocstop --><p></div><br>如果早几年，可能还会有公司不用 Maven 管理项目，还会有人不知道 Maven。但是现在如果你还不知道 Maven，那你跟门外汉差不多了。</p><p>Maven 是 Java 最好的项目管理软件，就像 npm 对于 Node 一样重要。</p><p>我们先来快速了解下，如何使用 Maven 快速创建一个项目。</p><h2><span id="xia-zai">下载</span><a href="#xia-zai" class="header-anchor"></a></h2><p><strong>MacOS</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install Maven</span><br></pre></td></tr></table></figure><p><strong><em>需要：Java &gt;= 1.7</em></strong></p><p>安装好后查看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ mvn --version</span><br><span class="line">Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-25T02:41:47+08:00)</span><br><span class="line">Maven home: /usr/<span class="built_in">local</span>/Cellar/maven/3.6.0/libexec</span><br><span class="line">Java version: 11.0.1, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home</span><br><span class="line">Default locale: zh_US_<span class="comment">#Hans, platform encoding: UTF-8</span></span><br><span class="line">OS name: <span class="string">"mac os x"</span>, version: <span class="string">"10.14.2"</span>, arch: <span class="string">"x86_64"</span>, family: <span class="string">"mac"</span></span><br></pre></td></tr></table></figure><h2><span id="chuang-jian-xiang-mu">创建项目</span><a href="#chuang-jian-xiang-mu" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ mvn archetype:generate \</span><br><span class="line">    -DgroupId=com.wxnacy.app \</span><br><span class="line">    -DartifactId=<span class="built_in">test</span>-app \</span><br><span class="line">    -DarchetypeArtifactId=maven-archetype-quickstart \</span><br><span class="line">    -DarchetypeVersion=1.4 \</span><br><span class="line">    -DinteractiveMode=<span class="literal">false</span> \</span><br></pre></td></tr></table></figure><p>如果你的电脑第一次运行该命令，可能需要一些时间，因为要下载一些必要包。</p><p>创建完成后，会出现一个目录 <code>test-app</code>，即为项目目录。</p><p>进入目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span>-app</span><br></pre></td></tr></table></figure><p><strong>查看项目结构</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   └── java</span><br><span class="line">    │       └── com</span><br><span class="line">    │           └── wxnacy</span><br><span class="line">    │               └── app</span><br><span class="line">    │                   └── App.java</span><br><span class="line">    └── <span class="built_in">test</span></span><br><span class="line">        └── java</span><br><span class="line">            └── com</span><br><span class="line">                └── wxnacy</span><br><span class="line">                    └── app</span><br><span class="line">                        └── AppTest.java</span><br><span class="line"></span><br><span class="line">11 directories, 3 files</span><br></pre></td></tr></table></figure><p><code>src/main/java</code> 目录中存放源代码，<code>src/test/java</code> 目录中存在测试代码，<code>pom.xml</code> 文件为项目数据模型。具体内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wxnacy.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>test-app<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>内容很多，其实很简单，默认状态下，<code>pluginManagement</code> 节点中的内容为默认插件，已经集成在父 pom 中，所以删除掉也不影响。<code>dependencies</code> 节点为项目需要的数据包。</p><h2><span id="yun-xing">运行</span><a href="#yun-xing" class="header-anchor"></a></h2><p><strong>编译</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn compile</span><br></pre></td></tr></table></figure><p>随后根目录下会生成 <code>target</code> 文件夹，class 文件都存放在 <code>target/classes</code> 文件夹中</p><p><strong>运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java -cp target/classes com.wxnacy.app.App</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><p><strong>打包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn package</span><br></pre></td></tr></table></figure><p>随后会在 <code>target</code> 文件夹中生成 <code>test-app-1.0-SNAPSHOT.jar</code> 文件。</p><p><strong>运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java -cp target/<span class="built_in">test</span>-app-1.0-SNAPSHOT.jar com.wxnacy.app.App</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><ul><li><a href="https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html" target="_blank" rel="noopener">Maven in 5 Minutes</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个是一个系列阅读，关于为什么重新学习，我在文章 &lt;a href=&quot;/2018/12/29/java-renew-why/&quot;&gt;重新学 Java 系列：新系列、新开始&lt;/a&gt;(&lt;a href=&quot;https://wxnacy.com/2018/12/29/java-renew-why/&quot;&gt;https://wxnacy.com/2018/12/29/java-renew-why/&lt;/a&gt;) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>重新学 Java 系列：简单解析 xml 文件的方式</title>
    <link href="http://wxnacy.com/2019/01/09/java-renew-parse-xml/"/>
    <id>http://wxnacy.com/2019/01/09/java-renew-parse-xml/</id>
    <published>2019-01-09T06:19:07.000Z</published>
    <updated>2019-01-19T04:06:42.180Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这个是一个系列阅读，关于为什么重新学习，我在文章 <a href="/2018/12/29/java-renew-why/">重新学 Java 系列：新系列、新开始</a>(<a href="https://wxnacy.com/2018/12/29/java-renew-why/">https://wxnacy.com/2018/12/29/java-renew-why/</a>) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。</p></blockquote><a id="more"></a><div class="toc"><br><br><!-- toc --><!-- tocstop --><p></div><br>现在公认的最好的文本解析格式为 JSON，XML 已经是过时的标准，但是不可避免的一些历史悠久的项目还在用，比如微信的部分 api，比如 Maven 的 pom.xml 文件。</p><p>Java 有很多解析 XML 格式的包，不过我想关注的是最简单的原生方式。</p><p>优先准备一个文件 <code>Stocks.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">stocks</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">stock</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>Citibank<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">price</span>&gt;</span>100<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">quantity</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">quantity</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">stock</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">stock</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>Axis bank<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">price</span>&gt;</span>90<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">quantity</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">quantity</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">stock</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">stocks</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>必备包</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Node;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</span><br></pre></td></tr></table></figure><p><strong>解析 DOM</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">File stocks = <span class="keyword">new</span> File(<span class="string">"Stocks.xml"</span>);</span><br><span class="line">DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();</span><br><span class="line">Document doc = dBuilder.parse(stocks);</span><br><span class="line">doc.getDocumentElement().normalize();</span><br></pre></td></tr></table></figure><p><strong>获取根节点名</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doc.getDocumentElement().getNodeName();</span><br></pre></td></tr></table></figure><p><strong>获取节点列表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NodeList nodes = doc.getElementsByTagName(<span class="string">"stock"</span>);</span><br></pre></td></tr></table></figure><p><strong>遍历节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodes.getLength(); i++) &#123;</span><br><span class="line">    Node node = nodes.item(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取原件内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (node.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">    Element element = (Element) node;</span><br><span class="line">    NodeList nodes = element.getElementsByTagName(<span class="string">"symbol"</span>).item(<span class="number">0</span>).getChildNodes();</span><br><span class="line">    Node node = (Node) nodes.item(<span class="number">0</span>);</span><br><span class="line">    System.out.println(node.getNodeValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>完整代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Node;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DOMExampleJava</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            File stocks = <span class="keyword">new</span> File(<span class="string">"Stocks.xml"</span>);</span><br><span class="line">            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();</span><br><span class="line">            Document doc = dBuilder.parse(stocks);</span><br><span class="line">            doc.getDocumentElement().normalize();</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"root of xml file "</span> + doc.getDocumentElement().getNodeName());</span><br><span class="line">            NodeList nodes = doc.getElementsByTagName(<span class="string">"stock"</span>);</span><br><span class="line">            System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodes.getLength(); i++) &#123;</span><br><span class="line">                Node node = nodes.item(i);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (node.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">                    Element element = (Element) node;</span><br><span class="line">                    System.out.println(<span class="string">"Stock Symbol: "</span> + getValue(<span class="string">"symbol"</span>, element));</span><br><span class="line">                    System.out.println(<span class="string">"Stock Price: "</span> + getValue(<span class="string">"price"</span>, element));</span><br><span class="line">                    System.out.println(<span class="string">"Stock Quantity: "</span> + getValue(<span class="string">"quantity"</span>, element));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(String tag, Element element)</span> </span>&#123;</span><br><span class="line">        NodeList nodes = element.getElementsByTagName(tag).item(<span class="number">0</span>).getChildNodes();</span><br><span class="line">        Node node = (Node) nodes.item(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> node.getNodeValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://javarevisited.blogspot.com/2011/12/parse-xml-file-in-java-example-tutorial.html" target="_blank" rel="noopener">How to Parse or Read XML File in Java &gt;&gt; XML Tutorial Example</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个是一个系列阅读，关于为什么重新学习，我在文章 &lt;a href=&quot;/2018/12/29/java-renew-why/&quot;&gt;重新学 Java 系列：新系列、新开始&lt;/a&gt;(&lt;a href=&quot;https://wxnacy.com/2018/12/29/java-renew-why/&quot;&gt;https://wxnacy.com/2018/12/29/java-renew-why/&lt;/a&gt;) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>重新学 Java 系列：获取 jar 包中类名列表</title>
    <link href="http://wxnacy.com/2019/01/08/java-jar-class-list/"/>
    <id>http://wxnacy.com/2019/01/08/java-jar-class-list/</id>
    <published>2019-01-08T06:55:53.000Z</published>
    <updated>2019-01-19T04:06:42.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这个是一个系列阅读，关于为什么重新学习，我在文章 <a href="/2018/12/29/java-renew-why/">重新学 Java 系列：新系列、新开始</a>(<a href="https://wxnacy.com/2018/12/29/java-renew-why/">https://wxnacy.com/2018/12/29/java-renew-why/</a>) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。</p></blockquote><a id="more"></a><div class="toc"><br><br><!-- toc --><!-- tocstop --><p></div><br>最近想要自己写一下 Vim 中 Java 代码的自动补全，涉及到 <code>import</code> 部分的自动导入，记录下关键步骤。</p><p>想要做自动导入，首先需要知道依赖包中类名的列表，也就是需要反解出 jar 中 class 列表。</p><p>这里需要 <code>java.util.jar</code> 包中的几个类，直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by wxnacy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JarFile jarFile = <span class="keyword">new</span> JarFile(<span class="string">"/Users/wxnacy/.m2/repository/com/alibaba/fastjson/1.1.34/fastjson-1.1.34.jar"</span>);</span><br><span class="line">            Enumeration enu = jarFile.entries();</span><br><span class="line">            <span class="keyword">while</span> (enu.hasMoreElements()) &#123;</span><br><span class="line">                JarEntry jarEntry = (JarEntry) enu.nextElement();</span><br><span class="line">                String name = jarEntry.getName();</span><br><span class="line">                <span class="comment">// 过滤出 class 文件</span></span><br><span class="line">                <span class="keyword">if</span> (name.endsWith(<span class="string">".class"</span>) &amp;&amp; name.indexOf(<span class="string">"$"</span>) == -<span class="number">1</span> ) &#123;</span><br><span class="line">                    <span class="comment">// 重新格式化文件名</span></span><br><span class="line">                    name = name.substring(<span class="number">0</span>, name.indexOf(<span class="string">".class"</span>));</span><br><span class="line">                    name = name.replaceAll(<span class="string">"/"</span>, <span class="string">"."</span>);</span><br><span class="line">                    System.out.println(name);</span><br><span class="line">                    list.add(name);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"list length "</span> + list.size());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个是一个系列阅读，关于为什么重新学习，我在文章 &lt;a href=&quot;/2018/12/29/java-renew-why/&quot;&gt;重新学 Java 系列：新系列、新开始&lt;/a&gt;(&lt;a href=&quot;https://wxnacy.com/2018/12/29/java-renew-why/&quot;&gt;https://wxnacy.com/2018/12/29/java-renew-why/&lt;/a&gt;) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>2019 年读书目录</title>
    <link href="http://wxnacy.com/2019/01/07/2019-books/"/>
    <id>http://wxnacy.com/2019/01/07/2019-books/</id>
    <published>2019-01-07T05:45:40.000Z</published>
    <updated>2019-01-28T10:26:07.373Z</updated>
    
    <content type="html"><![CDATA[<p>本章记录 2019 年读书情况</p><a id="more"></a><div class="toc"><br><br><!-- toc --><ul><li><a href="#mu-biao">目标</a></li><li><a href="#zheng-zai-du">正在读</a></li><li><a href="#du-wan-de">读完的</a></li><li><a href="#shi-jian">时间</a></li><li><a href="#xiang-du-de">想读的</a></li></ul><!-- tocstop --></div><h2><span id="mu-biao">目标</span><a href="#mu-biao" class="header-anchor"></a></h2><p>2019 年每周要至少读够 8 小时书，一年至少读完 40 本书</p><h2><span id="zheng-zai-du">正在读</span><a href="#zheng-zai-du" class="header-anchor"></a></h2><p>《肖申克的救赎》<br>《别独自用餐》</p><h2><span id="du-wan-de">读完的</span><a href="#du-wan-de" class="header-anchor"></a></h2><ul><li>2019-01-18 09:31:48 读完《武动乾坤》                                             花费 36 小时 48 分钟</li><li>2019-01-23 13:08:00 读完《古董局中局》                                           花费 30 小时 30 分钟</li></ul><p>总共 2 本</p><h2><span id="shi-jian">时间</span><a href="#shi-jian" class="header-anchor"></a></h2><p>2019 年第一周读书   12.31 - 01.06 32小时13分钟<br>2019 年第二周读书   01.07 - 01.13 20小时55分钟<br>2019 年第三周读书   01.14 - 01.20 16小时12分钟<br>2019 年第四周读书   01.21 - 01.27 21小时41分钟</p><p>总共 91 小时 01 分钟</p><h2><span id="xiang-du-de">想读的</span><a href="#xiang-du-de" class="header-anchor"></a></h2><p>《瓦尔登湖》<br>《人类简史》<br>《悟空传》<br>《未来简史》<br>《神经浪游者》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章记录 2019 年读书情况&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://wxnacy.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Linux ab 压力测试</title>
    <link href="http://wxnacy.com/2019/01/06/linux-ab/"/>
    <id>http://wxnacy.com/2019/01/06/linux-ab/</id>
    <published>2019-01-06T02:06:23.000Z</published>
    <updated>2019-01-19T05:30:00.702Z</updated>
    
    <content type="html"><![CDATA[<p>ab 是 Apache 附带的接口压力测试功能，非常简单易用。在测试服务端程序自身运行时长和跨区测试接口反馈时长时非常有用。</p><a id="more"></a><div class="toc"><br><br><!-- toc --><ul><li><a href="#xia-zai">下载</a></li><li><a href="#shi-yong">使用</a></li></ul><!-- tocstop --><p></div></p><h2><span id="xia-zai">下载</span><a href="#xia-zai" class="header-anchor"></a></h2><p>CentOS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y httpd</span><br></pre></td></tr></table></figure><p>Ubuntu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install -y apache2-utils</span><br></pre></td></tr></table></figure><h2><span id="shi-yong">使用</span><a href="#shi-yong" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ab -c 10 -n 100 http://ip-api.com/json</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><code>-c</code>: 表示并发数</li><li><code>-n</code>: 表示请求总数</li></ul><p><strong>结果</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ ab -c 10 -n 100 http://ip-api.com/json</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1807734 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking ip-api.com (be patient).....<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:</span><br><span class="line">Server Hostname:        ip-api.com</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /json</span><br><span class="line">Document Length:        306 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   6.184 seconds</span><br><span class="line">Complete requests:      100</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      46200 bytes</span><br><span class="line">HTML transferred:       30600 bytes</span><br><span class="line">Requests per second:    16.17 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       618.369 [ms] (mean)</span><br><span class="line">Time per request:       61.837 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          7.30 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        1    3   1.1      3       6</span><br><span class="line">Processing:   528  572  58.4    550     889</span><br><span class="line">Waiting:      528  571  58.7    549     888</span><br><span class="line">Total:        531  575  58.3    552     891</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    552</span><br><span class="line">  66%    565</span><br><span class="line">  75%    574</span><br><span class="line">  80%    600</span><br><span class="line">  90%    635</span><br><span class="line">  95%    656</span><br><span class="line">  98%    890</span><br><span class="line">  99%    891</span><br><span class="line"> 100%    891 (longest request)</span><br></pre></td></tr></table></figure><p><strong>结果详解</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Server Software:        web服务器软件及版本</span><br><span class="line">Server Hostname:        请求的地址</span><br><span class="line">Server Port:            请求的端口</span><br><span class="line"></span><br><span class="line">Document Path:          请求的页面路径</span><br><span class="line">Document Length:        页面大小</span><br><span class="line"></span><br><span class="line">Concurrency Level:      并发数</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   测试总共花费的时间</span><br><span class="line">Complete requests:      完成的请求数</span><br><span class="line">Failed requests:        失败的请求数</span><br><span class="line">Write errors:           写入错误</span><br><span class="line">Total transferred:      总共传输字节数，包含http的头信息等</span><br><span class="line">HTML transferred:       html字节数，实际的页面传递字节数</span><br><span class="line">Requests per second:    每秒处理的请求数，服务器的吞吐量（重要）</span><br><span class="line">Time per request:       平均数，用户平均请求等待时间</span><br><span class="line">Time per request:       服务器平均处理时间</span><br><span class="line">Transfer rate:          平均传输速率（每秒收到的速率）</span><br></pre></td></tr></table></figure><p><code>Time per request</code> 是我们测试接口时长时非常关键的字段。</p><ul><li><a href="http://blog.51cto.com/zhangdiandong/1166557" target="_blank" rel="noopener">linux下web压力测试工具ab使用及详解</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ab 是 Apache 附带的接口压力测试功能，非常简单易用。在测试服务端程序自身运行时长和跨区测试接口反馈时长时非常有用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://wxnacy.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>重新学 Java 系列：为什么要用 set、get 方法</title>
    <link href="http://wxnacy.com/2019/01/03/java-renew-why-set-get/"/>
    <id>http://wxnacy.com/2019/01/03/java-renew-why-set-get/</id>
    <published>2019-01-03T08:52:13.000Z</published>
    <updated>2019-01-19T04:06:42.178Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这个是一个系列阅读，关于为什么重新学习，我在文章 <a href="/2018/12/29/java-renew-why/">重新学 Java 系列：新系列、新开始</a>(<a href="https://wxnacy.com/2018/12/29/java-renew-why/">https://wxnacy.com/2018/12/29/java-renew-why/</a>) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。</p></blockquote><a id="more"></a><div class="toc"><br><br><!-- toc --><!-- tocstop --></div><p><code>set, get</code> 方法，是 Java 开发者最常见的两个方法，从初学的手敲，到各种 IED 的自动生成，说它是一个项目里最多的方法名也不为过。</p><p>还记得几年前，一位开发 IOS 的同事问我，为什么你们 Java 非要用 <code>set, get</code> 方法操作变量，难道就不直接对变量进行赋值吗，就算不能赋值，还不能直接读取吗？我赶紧写了个类试了一下，哎，可以啊，那为啥呢，想了半天，不知道该怎么回答，憋了一句，这是规范。同事“哦”了一声，“好可怜的规范”。</p><p>大家都很忙的，晚上还要加班呢，谁有空在去深究为什么，大家都这么写嘛，规范嘛。</p><p>既然要重新学习，那自然要搞明白为什么。</p><p>首先我们先来弄清楚变量的作用域，详情可以看我的这篇文章<a href="/2018/12/30/java-renew-modification/">重新学 Java 系列：public private protected friendly 的区别</a>(<a href="https://wxnacy.com/2018/12/30/java-renew-modification/">https://wxnacy.com/2018/12/30/java-renew-modification/</a>)</p><p>我们用到最多的两个修饰符为 <code>public, private</code>，它们的区别在于</p><ul><li><code>public</code>: 所有地方都可以调用。</li><li><code>private</code>: 只有当前类可以调用。</li></ul><p>通常当修饰符为 <code>private</code> 时才需要用到 <code>set, get</code> 方法，因为该修饰符不能像 <code>public</code> 一样被外部方法和修改，那为什么我们不直接用 <code>public</code> 修饰呢。</p><p>真正的原因在于，作为一个类，我的变量想让你访问和修改，但我不希望你随便修改，而是按照我的方式来访问修改。</p><p>比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"wxnacy_"</span> + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age + <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个方法都不是将原数据传入和传出，都经过了类的独特修改才进行的相应操作。</p><p>所以平常我们觉得它们多余，只是很多时候用不到这个特点而已。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个是一个系列阅读，关于为什么重新学习，我在文章 &lt;a href=&quot;/2018/12/29/java-renew-why/&quot;&gt;重新学 Java 系列：新系列、新开始&lt;/a&gt;(&lt;a href=&quot;https://wxnacy.com/2018/12/29/java-renew-why/&quot;&gt;https://wxnacy.com/2018/12/29/java-renew-why/&lt;/a&gt;) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>2019 年，对自己的要求</title>
    <link href="http://wxnacy.com/2019/01/01/2019-begin/"/>
    <id>http://wxnacy.com/2019/01/01/2019-begin/</id>
    <published>2019-01-01T08:42:15.000Z</published>
    <updated>2019-01-19T05:30:00.653Z</updated>
    
    <content type="html"><![CDATA[<p>每年的元旦，我都会做一个年度计划，会在去年的基础上做一些调整，适当增加或减少</p><a id="more"></a><div class="toc"><br><br><!-- toc --><ul><li><a href="#ding-qi-ren-wu">定期任务</a></li><li><a href="#zong-liang-ren-wu">总量任务</a></li></ul><!-- tocstop --><p></div></p><h2><span id="ding-qi-ren-wu">定期任务</span><a href="#ding-qi-ren-wu" class="header-anchor"></a></h2><ul><li>每天至少听一个英文电影原声</li><li>每周 100 个新增英语单词量</li><li>每天一篇博客</li><li>每周至少 8 小时的读书时长</li></ul><h2><span id="zong-liang-ren-wu">总量任务</span><a href="#zong-liang-ren-wu" class="header-anchor"></a></h2><ul><li>完成 <a href="https://vim.wxnacy.com/" target="_blank" rel="noopener">Vim 练级手册</a>的编写</li><li>重学 Java，至可以进行项目开发</li><li>对 Go 语言更加精进</li></ul><p>今年的目标是在去年的基础上做了些调整，希望坚持完成，加油</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每年的元旦，我都会做一个年度计划，会在去年的基础上做一些调整，适当增加或减少&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://wxnacy.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>2018 年，总结</title>
    <link href="http://wxnacy.com/2018/12/31/2018-end/"/>
    <id>http://wxnacy.com/2018/12/31/2018-end/</id>
    <published>2018-12-31T08:56:45.000Z</published>
    <updated>2019-01-19T05:30:00.703Z</updated>
    
    <content type="html"><![CDATA[<p>2018 年最后一天，来总结一下这一年的表现</p><a id="more"></a><div class="toc"><br><br><!-- toc --><ul><li><a href="#hai-zi">孩子</a></li><li><a href="#bo-ke">博客</a></li><li><a href="#du-shu">读书</a></li><li><a href="#xue-xi">学习</a></li><li><a href="#zong-jie">总结</a></li></ul><!-- tocstop --></div><h2><span id="hai-zi">孩子</span><a href="#hai-zi" class="header-anchor"></a></h2><p>今年如果要用到一个关键词，那就是孩子。</p><p>6 月 6 日凌晨，我的宝贝儿欣欣出生了，我断定我娃以后必定 666。</p><p>就这样，以 6 月为中轴，我们今年的生活被分成了两个部分，孕期和产期。</p><p>最辛苦的还是我的老婆大人，6 月 5 号凌晨感觉宫缩，中午去医院，下午就住院，准备开指，晚上孩子就出生了。在旁人来看，整个过程干净利索，然而那天最痛苦的就是老婆了，可以用疼一天来形容，晚上疼的都吃不下饭，最后还要靠着自身的力气生下了大胖欣。而我只能守在产区外面，准备吃的和随时报喜是我唯一能做的。</p><p>从这以后，老婆就再也没睡过一个整觉了，这半年来，我俩每天都要面对的都是孩子晚上睡觉的问题，现在更是几乎每个小时都醒，老婆说打死都不要二胎了，我说嗯嗯嗯。</p><p>有了孩子，以后的日子都要围着孩子转了，老婆说现在我俩唯一约会的机会，就是周末趁着老人看孩子能出来逛下超市，连电影也看不了了，因为时间太长孩子就要闹了。</p><p>女人的伟大，在于身份的不断转变。从公主到女朋友到老婆，再到母亲，她们的心在越来越坚强，越来越让我离不开。</p><p>老婆，我爱你 ლ(′◉❥◉｀ლ)</p><h2><span id="bo-ke">博客</span><a href="#bo-ke" class="header-anchor"></a></h2><p>博客是去年正式开始写的，今年初定的目标是每天一篇，女儿出生前都履行的很好，但是后来就有点力不从心，有时候几天都没时间写，不过这不代表就落下了，以前欠下的我仍然会补上，这就好比欠了钱，不管过了多久，都要还上。</p><h2><span id="du-shu">读书</span><a href="#du-shu" class="header-anchor"></a></h2><p>这一项应该是目前执行最好的一项了，年初定了每周 5 小时，一年 30 本的目标。最后一共读完了 50 本，共 460 多个小时，大大的超出了目标，不过这也是因为目标定的并不高，明年要更上一层楼。</p><h2><span id="xue-xi">学习</span><a href="#xue-xi" class="header-anchor"></a></h2><p>学习也是一直没用拉下的一项，今年趁着有时间，学习 GO 语言，我相信这是未来几年一个很有前途的语言，同时也因此又让我有了重新学习 Java 的想法。</p><p>另外我还开始了写一本关于 Vim 教程的书，叫 <a href="https://vim.wxnacy.com/" target="_blank" rel="noopener">《Vim 练级手册》</a>(<a href="https://vim.wxnacy.com/)，这是我想着手普及" target="_blank" rel="noopener">https://vim.wxnacy.com/)，这是我想着手普及</a> Vim 的一个起点，不过自从女儿出生以后就搁浅了，只写了基础篇的几个章节，明年要把它加到计划里。</p><h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor"></a></h2><p>年初时，我对自己做了一个一年要求，<a href="https://wxnacy.com/2018/01/01/2018-begin/">2018 年，对自己的要求</a>(<a href="https://wxnacy.com/2018/01/01/2018-begin/">https://wxnacy.com/2018/01/01/2018-begin/</a>)</p><p>下面一一列举是否完成</p><p><strong>每天任务</strong></p><p>下面这些周期性的任务都现在正在进行的，接下来只是继续坚持而已。</p><ul><li>复习／背单词一共至少 100 个（未完成，明年的计划需要针对调整）</li><li>每周读书至少 5 小时（完成，部分周的读书时长不够，但都会在次周补上）</li><li>每天写一篇博客（未完成，女儿出生后就时不时会有断裂，不过都会补上）</li><li>每天记录微博（未完成，后期放弃使用微博）</li></ul><p><strong>总量目标</strong></p><ul><li>全年读书至少 30 本（完成，一共读了 50 本）</li><li>争取写一个自己的 Hexo 主题（未完成）</li><li>对 Python 更加精进（完成）</li><li>在 Vim 做到开发 Java 可以称心如意（未完成，同样是明年的目标）</li></ul><p>一晃又是一年，这一年相比以往有些坎坷，不过我还是在一点一点的进步着，我相信量变一定会转变为质变，加油，老温。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018 年最后一天，来总结一下这一年的表现&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://wxnacy.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>重新学 Java 系列：public private protected friendly 的区别</title>
    <link href="http://wxnacy.com/2018/12/30/java-renew-modification/"/>
    <id>http://wxnacy.com/2018/12/30/java-renew-modification/</id>
    <published>2018-12-30T14:28:56.000Z</published>
    <updated>2019-01-19T04:06:42.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这个是一个系列阅读，关于为什么重新学习，我在文章 <a href="/2018/12/29/java-renew-why/">重新学 Java 系列：新系列、新开始</a>(<a href="https://wxnacy.com/2018/12/29/java-renew-why/">https://wxnacy.com/2018/12/29/java-renew-why/</a>) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。</p></blockquote><a id="more"></a><div class="toc"><br><br><!-- toc --><!-- tocstop --><p></div><br>Java 共有四种修饰：<code>public, private, protected, friendly</code>，（默认为：friendly）</p><p>可能调用他们修饰变量和函数的有的作用域有：当前类、当前包、子类、外部类</p><p>从网上找他们的对应的调用权限，很多是各种摘抄，并且存在各种错误，所以我认真对他们进行了实验，得到如下结论</p><table><thead><tr><th>对比</th><th>当前类</th><th>当前包</th><th>子类</th><th>外部类</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>friendly</td><td>√</td><td>√</td><td>√</td><td>×</td></tr></tbody></table><p>如表格，简单总结如下</p><ul><li><code>public</code>: 所有地方都可以调用。</li><li><code>private</code>: 只有当前类可以调用。</li><li><code>protected</code>: 只有外部类不可调用。</li><li><code>friendly</code>: 与 <code>protected</code> 完全相同。</li></ul><p>下载 demo <a href="https://github.com/wxnacy/study/tree/master/java/modification" target="_blank" rel="noopener">https://github.com/wxnacy/study/tree/master/java/modification</a> 到电脑中，确保电脑中有 Java 运行环境，可以执行跟目下的 <code>./run.sh</code> 脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./run.sh</span><br><span class="line">        public  private protected       friendly</span><br><span class="line">当前类  √       √       √               √</span><br><span class="line">当前包  √       ×       √               √</span><br><span class="line">子类    √       ×       √               √</span><br><span class="line">外部类  √       ×       ×               ×</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个是一个系列阅读，关于为什么重新学习，我在文章 &lt;a href=&quot;/2018/12/29/java-renew-why/&quot;&gt;重新学 Java 系列：新系列、新开始&lt;/a&gt;(&lt;a href=&quot;https://wxnacy.com/2018/12/29/java-renew-why/&quot;&gt;https://wxnacy.com/2018/12/29/java-renew-why/&lt;/a&gt;) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
</feed>
