<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>温欣爸比的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wxnacy.com/"/>
  <updated>2018-12-11T05:43:28.000Z</updated>
  <id>http://wxnacy.com/</id>
  
  <author>
    <name>温欣爸比</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac 系统实时显示键位操作软件：KeyCastr</title>
    <link href="http://wxnacy.com/2018/12/11/mac-KeyCastr/"/>
    <id>http://wxnacy.com/2018/12/11/mac-KeyCastr/</id>
    <published>2018-12-11T03:51:58.000Z</published>
    <updated>2018-12-11T05:43:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近想做一些 Vim 教程的视频，在屏幕上显示键位操作是很有必要的，网上找了下发现 KeyCastr 软件非常好用。<br><a id="more"></a><div class="toc"></p><!-- toc --><ul><li><a href="#yu-lan">预览</a></li><li><a href="#an-zhuang">安装</a></li><li><a href="#pei-zhi">配置</a></li></ul><!-- tocstop --></div><h2><span id="yu-lan">预览</span><a href="#yu-lan" class="header-anchor"></a></h2><p><img src="/images/KeyCastr4.gif" alt="key4"></p><h2><span id="an-zhuang">安装</span><a href="#an-zhuang" class="header-anchor"></a></h2><p>KeyCastr 是开源软件完全免费，源码可以在 <a href="https://github.com/keycastr/keycastr" target="_blank" rel="external">Github</a> 中找到，Mac 中安装非常方便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew cask install keycastr</div></pre></td></tr></table></figure><p>也可以从<a href="https://github.com/keycastr/keycastr/releases" target="_blank" rel="external">下载</a>页面下载最新版安装</p><h2><span id="pei-zhi">配置</span><a href="#pei-zhi" class="header-anchor"></a></h2><p>第一次使用时需要打开系统的辅助功能</p><p><img src="/images/KeyCastr6.png" alt="KeyCastr6"></p><p>配置完成后再次打开，即可像预览中一样在屏幕左下角显示键位操作。</p><p>同时在顶部状态栏可以显示 KeyCastr 的图标，用于更多配置</p><p><img src="/images/KeyCastr2.png" alt="KeyCastr2"></p><p>通过 Preferences -&gt; General 配置可以修改图标展示在顶部或底部状态栏</p><p><img src="/images/KeyCastr1.png" alt="KeyCastr1"></p><p>通过 Preferences -&gt; Display 配置可以扩展显示区域，将 ⌘（Command）、⌥（Option）符号展示出来，很多人（包括我）经常会分不清楚他们对应的键位。</p><p><img src="/images/KeyCastr5.gif" alt="KeyCastr5"></p><p>如下图，将显示模式改为 Svelte 即可</p><p><img src="/images/KeyCastr3.png" alt="KeyCastr3"></p><p>默认情况下，该模式只显示四个特殊键位，勾选上 [Display all keystrokes] 即可显示全部键位</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想做一些 Vim 教程的视频，在屏幕上显示键位操作是很有必要的，网上找了下发现 KeyCastr 软件非常好用。&lt;br&gt;
    
    </summary>
    
    
      <category term="mac" scheme="http://wxnacy.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Supervisord 启动报错</title>
    <link href="http://wxnacy.com/2018/12/10/supervisord-start-error/"/>
    <id>http://wxnacy.com/2018/12/10/supervisord-start-error/</id>
    <published>2018-12-10T09:04:38.000Z</published>
    <updated>2018-12-10T09:14:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>error: <class 'socket.error'="">, [Errno 2] No such file or directory: file: /usr/lib/python2.7/socket.py line: 224</class></p></blockquote><a id="more"></a><div class="toc"><br><br><!-- toc --><!-- tocstop --><p></div><br>如上，如果 supervisord 正常启动过，突然报这个错误，则有可能是非正常关闭导致的。</p><p>此时，需要强行关闭后，再正常启动即可。</p><p>关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo <span class="built_in">kill</span> -9 `ps aux | grep supervisord | aws <span class="string">'&#123;print $2&#125;'</span>`</div></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo /bin/supervisord -c /etc/supervisord/supervisord.conf</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;error: &lt;class &#39;socket.error&#39;=&quot;&quot;&gt;, [Errno 2] No such file or directory: file: /usr/lib/python2.7/socket.py line: 224&lt;/class&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://wxnacy.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>小宝贝</title>
    <link href="http://wxnacy.com/2018/12/06/baby-first-baba/"/>
    <id>http://wxnacy.com/2018/12/06/baby-first-baba/</id>
    <published>2018-12-06T14:49:25.000Z</published>
    <updated>2018-12-06T15:36:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近几天欣欣又不好好睡觉了，每天晚上都是一个小时一醒，昨天晚上忘了几点，哭醒以后赶紧抱起来走走，迷迷糊糊的把她放下，突然听见一声</p><p>“爸爸”<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --></div><p>我心里一惊，动作瞬间僵住，生怕是听错了，再一听。</p><p>“啪啪…唔…啪”</p><p>声音并不清晰，却是这几个月来第一次发出这类的声音。</p><p>我抬起头看向欣妈，虽然屋里只有很暗的夜灯，但我还是看到了她脸上跟我一样的难以置信。</p><p>“不是喊爸爸，只是类似呼气的声音”</p><p>过了一会儿，欣妈这样“安慰”我。</p><p>或许真的是巧合，加上实在是太困，我俩没一会儿就睡下了。</p><p>白天醒后想着要不要跟妈妈说这事，她每天乐于发现小孙女一些细微的成长，但是我也感觉可能是个巧合，还是算了。</p><p>等晚上回家，欣妈还在哄孩子睡觉，白天带她去体检反而有点感冒，没办法，今天太冷了。</p><p>吃完饭孩子也醒了，一看到我，欣欣开心的一笑，每天我回家欣欣都这样对我笑，我照例进行每天的功课。</p><p>“我是谁，我是爸爸，欣欣叫爸爸”</p><p>如此对着她重复，欣妈对我不屑一顾。</p><p>“啪啪”</p><p>又是一声，我心里又是一颤，赶紧趁热打铁。</p><p>“爸爸，我是爸爸，叫爸爸”</p><p>“啪…爸爸”</p><p>越来越清晰，现在可以确认，欣欣真的叫爸爸了，虽然还是太清晰，但是这已经不是偶尔蹦出一个词了。欣妈也傻眼了，赶紧拿出手机录下了这个时刻。</p><p>“嘿，眼看她妈马上生日了，她来了句爸爸”</p><p>得，欣妈吃上醋了，边往外走着，打算让爸妈也看看视频，嘴里还不歇着。</p><p>“嘿，成天不在家的，第一个还喊了爸爸”</p><p>老妈看了几遍，确认了是叫了“爸爸”，这才一脸惊喜的找着原因。</p><p>“可不嘛，天天晚上回来都逗孩子，让喊爸爸”</p><p>可不是，不这样逗，谁生下来会叫人啊，嘿，我一脸得意的看着他们，我的方法奏效了，就得天天冲她说才行。</p><p>欣妈一脸嫉妒的看着我俩，哼！</p><p>“跟爸爸这么亲，让爸爸哄睡觉吧，让爸爸擦屁股吧”</p><p>“我说你这是嫉妒啊”</p><p>“我这是羡慕嫉妒恨！”</p><p>我笑着出了屋，临关上门听见欣妈冲着欣欣</p><p>“欣欣，我是妈妈，叫妈妈”</p><p>过了一会儿，回来给孩子做好睡前工作，妈妈推门进来半个身子，看见欣欣一笑，欣欣还以微笑，然后关门之前来了句</p><p>“欣欣，叫奶奶”</p><p>得，嫉妒的还不是一人。</p><p>过了一会儿，出门坐会儿，听见爸爸在沙发算着，今天叫爸爸，明天叫妈妈，后天叫奶奶，然后叫爷爷。</p><p>………</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近几天欣欣又不好好睡觉了，每天晚上都是一个小时一醒，昨天晚上忘了几点，哭醒以后赶紧抱起来走走，迷迷糊糊的把她放下，突然听见一声&lt;/p&gt;
&lt;p&gt;“爸爸”&lt;br&gt;
    
    </summary>
    
    
      <category term="宝贝" scheme="http://wxnacy.com/tags/%E5%AE%9D%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>Node 运行 Linux 命令</title>
    <link href="http://wxnacy.com/2018/11/28/node-rune-command/"/>
    <id>http://wxnacy.com/2018/11/28/node-rune-command/</id>
    <published>2018-11-28T09:54:47.000Z</published>
    <updated>2018-11-28T09:56:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Node 中可以使用 <a href="https://nodejs.org/docs/v8.1.4/api/child_process.html#child_process_child_process_exec_command_options_callback" target="_blank" rel="external">child_process.exec</a> 方法来实现<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line">exec(<span class="string">'ls'</span>, (err, stdout, stderr) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="comment">// node couldn't execute the command</span></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// the *entire* stdout and stderr (buffered)</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`stderr: <span class="subst">$&#123;stderr&#125;</span>`</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Node 中可以使用 &lt;a href=&quot;https://nodejs.org/docs/v8.1.4/api/child_process.html#child_process_child_process_exec_command_options_callback&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;child_process.exec&lt;/a&gt; 方法来实现&lt;br&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://wxnacy.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Linux 安装 ffmpeg</title>
    <link href="http://wxnacy.com/2018/11/27/linux-install-ffmpeg/"/>
    <id>http://wxnacy.com/2018/11/27/linux-install-ffmpeg/</id>
    <published>2018-11-27T09:30:25.000Z</published>
    <updated>2018-11-27T09:46:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://ffmpeg.org/" target="_blank" rel="external">ffmpeg</a> 是一个很强大的音视频处理工具，它是一个完整的、跨平台的解决方案，可以记录、转换和传输音频和视频。ffmpeg 既可以播放视频，也提供命令行工具来处理视频，另外还有强大的视频处理库用于开发</p></blockquote><a id="more"></a><div class="toc"><br><br><!-- toc --><ul><li><a href="#ubuntu">Ubuntu</a></li><li><a href="#centos">CentOS</a></li></ul><!-- tocstop --></div><h2><span id="ubuntu">Ubuntu</span><a href="#ubuntu" class="header-anchor"></a></h2><p>Ubuntu 中安装比较简单，直接使用 <code>apt</code> 安装即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt install -y ffmpeg</div></pre></td></tr></table></figure><h2><span id="centos">CentOS</span><a href="#centos" class="header-anchor"></a></h2><p>CentOS 中则比较麻烦，需要使用源码安装</p><p><strong>下载并解压</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget https://ffmpeg.org/releases/ffmpeg-4.1.tar.bz2</div><div class="line">$ tar -xjvf ffmpeg-4.1.tar.bz2</div><div class="line">$ <span class="built_in">cd</span> ffmpeg-4.1</div></pre></td></tr></table></figure><p><strong>编译</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./configure</div><div class="line">nasm/yasm not found or too old. Use --<span class="built_in">disable</span>-x86asm <span class="keyword">for</span> a crippled build.</div></pre></td></tr></table></figure><p>可以使用 <code>--disable-x86asm</code> 参数略过该配置或者直接安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install -y yasm</div></pre></td></tr></table></figure><p>也可以从<a href="http://yasm.tortall.net/Download.html" target="_blank" rel="external">官网</a>下载源码安装</p><p>随后再次编译安装即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./configure</div><div class="line">$ sudo make &amp;&amp; sudo make install</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://ffmpeg.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ffmpeg&lt;/a&gt; 是一个很强大的音视频处理工具，它是一个完整的、跨平台的解决方案，可以记录、转换和传输音频和视频。ffmpeg 既可以播放视频，也提供命令行工具来处理视频，另外还有强大的视频处理库用于开发&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://wxnacy.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Go 判断数组中是否包含某个 item</title>
    <link href="http://wxnacy.com/2018/11/20/go-in-array/"/>
    <id>http://wxnacy.com/2018/11/20/go-in-array/</id>
    <published>2018-11-20T09:50:48.000Z</published>
    <updated>2018-11-20T09:57:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>Go 中不像 Python 那样可以通过 <code>a in []</code> 判断数组是否包含某个 item，项目中只能自己编写该方法。<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --><p></div><br>刚入门时第一个想到的方法就是对某个类型的数组进行遍历，再逐个对比，但这样有个最大的问题就是我们只能对一种类型的数组进行对比，不能灵活的应对各种类型。</p><p>在 stackexchange 中看到一个方法，充分的利用了 <code>reflect</code> 包对 <code>interface{}</code> 进行判断，如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"reflect"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">in_array</span><span class="params">(val <span class="keyword">interface</span>&#123;&#125;, array <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(exists <span class="keyword">bool</span>, index <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    exists = <span class="literal">false</span></div><div class="line">    index = <span class="number">-1</span></div><div class="line"></div><div class="line">    <span class="keyword">switch</span> reflect.TypeOf(array).Kind() &#123;</div><div class="line">    <span class="keyword">case</span> reflect.Slice:</div><div class="line">        s := reflect.ValueOf(array)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; s.Len(); i++ &#123;</div><div class="line">            <span class="keyword">if</span> reflect.DeepEqual(val, s.Index(i).Interface()) == <span class="literal">true</span> &#123;</div><div class="line">                index = i</div><div class="line">                exists = <span class="literal">true</span></div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><a href="https://codereview.stackexchange.com/questions/60074/in-array-in-go" target="_blank" rel="external">in_array() in Go</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Go 中不像 Python 那样可以通过 &lt;code&gt;a in []&lt;/code&gt; 判断数组是否包含某个 item，项目中只能自己编写该方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="go" scheme="http://wxnacy.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go JSON 数据格式化输出</title>
    <link href="http://wxnacy.com/2018/11/19/go-json-fmt-print/"/>
    <id>http://wxnacy.com/2018/11/19/go-json-fmt-print/</id>
    <published>2018-11-19T03:13:00.000Z</published>
    <updated>2018-11-19T06:01:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Go 中 <code>encoding/json</code> 包提供了格式化输出 JSON 数据的方法。<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --></div><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"encoding/json"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> data = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"name"</span>: <span class="string">"wxnacy"</span>&#125;</div><div class="line"></div><div class="line">json.MarshalIndent(data, <span class="string">""</span>, <span class="string">"    "</span>)</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"wxnacy"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用制表格来缩进可以使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">json.MarshalIndent(data, <span class="string">""</span>, <span class="string">"/t"</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Go 中 &lt;code&gt;encoding/json&lt;/code&gt; 包提供了格式化输出 JSON 数据的方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="go" scheme="http://wxnacy.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>CDN 测试网站</title>
    <link href="http://wxnacy.com/2018/11/15/cdn-test/"/>
    <id>http://wxnacy.com/2018/11/15/cdn-test/</id>
    <published>2018-11-15T09:12:17.000Z</published>
    <updated>2018-11-15T09:16:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>收集几个测试 CDN 的网站<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --></div><ul><li><a href="https://www.dotcom-tools.com/website-speed-test.aspx" target="_blank" rel="external">dotcom-tools</a></li><li><a href="https://www.site24x7.com/web-page-analyzer.html" target="_blank" rel="external">site24x7</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收集几个测试 CDN 的网站&lt;br&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://wxnacy.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>斯坦李，Excelsior</title>
    <link href="http://wxnacy.com/2018/11/13/marvel-disaster-day/"/>
    <id>http://wxnacy.com/2018/11/13/marvel-disaster-day/</id>
    <published>2018-11-13T05:45:02.000Z</published>
    <updated>2018-11-13T05:52:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当地时间2018年11月12日，美国漫画界元老级人物斯坦·李在好莱坞一家医疗中心去世，享年95岁。</p></blockquote><a id="more"></a><div class="toc"><br><br><!-- toc --><!-- tocstop --><p></div><br>早上挤公交时老婆给我发了斯坦李去世的消息，突然一阵眩晕，卧槽，脱口而出一句以后就再也不知道该说什么了。</p><p>所有的系列作品，只有漫威宇宙可以让我这么为之着迷，每部漫威作品我都看过不知道多少遍，不知道看什么的时候，他们和周星驰系列是我的必看系列。</p><p>今年真是的灾难年啊，这么多名人去世，还有很多的不好的事情发生。</p><p>2019 赶快来吧</p><p><img src="https://pbs.twimg.com/media/Dr1CjYpU0AALfYY.jpg" alt="Excelsior"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;当地时间2018年11月12日，美国漫画界元老级人物斯坦·李在好莱坞一家医疗中心去世，享年95岁。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://wxnacy.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="漫威" scheme="http://wxnacy.com/tags/%E6%BC%AB%E5%A8%81/"/>
    
  </entry>
  
  <entry>
    <title>Go 计算程序运行时间</title>
    <link href="http://wxnacy.com/2018/11/09/go-since/"/>
    <id>http://wxnacy.com/2018/11/09/go-since/</id>
    <published>2018-11-09T02:24:50.000Z</published>
    <updated>2018-11-09T02:31:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发时计算各个程序组件的运行时间是必不可少的，在 Java、Python 中习惯了用结束时间减去开始时间，在 Go 中开始也是这样的，但总感觉哪里不对。<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --><p></div><br>Google 后发现有更好的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">begin := time.Now()</div><div class="line"><span class="comment">// work</span></div><div class="line">fmt.Println(<span class="string">"time: "</span> + time.Since(begin))</div></pre></td></tr></table></figure><p><code>Since()</code> 函数帮我们完成了时间的计算，并且换算了相应的时间单位</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发时计算各个程序组件的运行时间是必不可少的，在 Java、Python 中习惯了用结束时间减去开始时间，在 Go 中开始也是这样的，但总感觉哪里不对。&lt;br&gt;
    
    </summary>
    
    
      <category term="go" scheme="http://wxnacy.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go 将 rune 转换为 string</title>
    <link href="http://wxnacy.com/2018/11/07/go-rune-string/"/>
    <id>http://wxnacy.com/2018/11/07/go-rune-string/</id>
    <published>2018-11-07T01:41:13.000Z</published>
    <updated>2018-11-07T01:45:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Go 中有几种方式将 rune 类型转换为 string<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --></div><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">string</span>(<span class="string">'c'</span>)</div><div class="line"><span class="comment">// string(rune('c'))</span></div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c</div></pre></td></tr></table></figure><p>或者借助 <code>strconv</code> 包</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strconv.QuoteRune(<span class="string">'c'</span>)</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'c'</span></div></pre></td></tr></table></figure><p>这种方式会将单引号也打印出来</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Go 中有几种方式将 rune 类型转换为 string&lt;br&gt;
    
    </summary>
    
    
      <category term="go" scheme="http://wxnacy.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go 将 error 转换为 string</title>
    <link href="http://wxnacy.com/2018/11/02/go-error-to-string/"/>
    <id>http://wxnacy.com/2018/11/02/go-error-to-string/</id>
    <published>2018-11-02T02:01:51.000Z</published>
    <updated>2018-11-02T02:07:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Go 中打印 error 可以直接使用 <code>fmt.Println(err)</code>，那么如何将 error 转换为 string 呢。<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --></div><p><code>toString()</code> ?，这个是在 java 中，Go 并没有一个统一的方法来转换 string。</p><p><code>error</code> 有一个接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</div><div class="line">    Error() <span class="keyword">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们可以使用 <code>err.Error()</code> 方法来转换 string</p><ul><li><a href="https://golang.org/pkg/builtin/#error" target="_blank" rel="external">error</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Go 中打印 error 可以直接使用 &lt;code&gt;fmt.Println(err)&lt;/code&gt;，那么如何将 error 转换为 string 呢。&lt;br&gt;
    
    </summary>
    
    
      <category term="go" scheme="http://wxnacy.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go 构建 web 项目怎样使用热启动</title>
    <link href="http://wxnacy.com/2018/10/29/go-fresh/"/>
    <id>http://wxnacy.com/2018/10/29/go-fresh/</id>
    <published>2018-10-29T06:02:13.000Z</published>
    <updated>2018-10-29T06:05:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Go 语言官方框架并没有提供热启动的模块，导致编写 web 应用非常麻烦。<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --><p></div><br>经过 google 发现第三方包 <a href="https://github.com/pilu/fresh" target="_blank" rel="external">fresh</a> 可以使用该功能。</p><p><strong>下载</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go get github.com/pilu/fresh</div></pre></td></tr></table></figure><p>然后在项目根目录下启动命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fresh</div></pre></td></tr></table></figure><p>它会默认去找 <code>main</code> 方法来执行。</p><p>更多的设置可见文档 <a href="https://github.com/pilu/fresh" target="_blank" rel="external">Usage</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Go 语言官方框架并没有提供热启动的模块，导致编写 web 应用非常麻烦。&lt;br&gt;
    
    </summary>
    
    
      <category term="go" scheme="http://wxnacy.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Shell 使用 read 创建交互模式脚本</title>
    <link href="http://wxnacy.com/2018/10/28/shell-read/"/>
    <id>http://wxnacy.com/2018/10/28/shell-read/</id>
    <published>2018-10-28T02:47:58.000Z</published>
    <updated>2018-10-28T02:47:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Shell 脚本中可以使用 read 来实现交互模式。<br><a id="more"></a><div class="toc"></p><!-- toc --><ul><li><a href="#echo-he-read">echo 和 read</a></li><li><a href="#zhi-jie-yong-read">直接用 read</a></li></ul><!-- tocstop --></div><h2><span id="echo-he-read">echo 和 read</span><a href="#echo-he-read" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> -n <span class="string">"What is your name: "</span></div><div class="line"><span class="comment"># echo -e "What is your name: \c"</span></div><div class="line"><span class="built_in">read</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$REPLY</span>"</span></div></pre></td></tr></table></figure><p>执行该脚本，根据提示输入名字即可完成一次交互，echo 的 <code>-n</code> 参数可以使屏幕输出后不换行，键盘输入的内容默认使用变量 <code>REPLY</code></p><h2><span id="zhi-jie-yong-read">直接用 read</span><a href="#zhi-jie-yong-read" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">read</span> -p <span class="string">"What is your name: "</span> name</div><div class="line"><span class="built_in">echo</span> <span class="string">"My name is <span class="variable">$name</span>"</span></div></pre></td></tr></table></figure><p>可以实现跟上边相同的效果，<code>-p</code> 为提示信息，<code>name</code> 为传入参数变量</p><p><strong>不可见</strong></p><p>普通输入文字都是明文显示，如果想要输入密码类的内容，可以使用 <code>-s</code> 参数使内容不显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">read</span> -p <span class="string">"What is your name: "</span> -s name</div></pre></td></tr></table></figure><p><strong>限制个数</strong></p><p>使用 <code>-n</code> 显示参数个数，再输入参数跟回车一个效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">read</span> -n 1 -p <span class="string">"Are you sure delete[Y|n]: "</span> flag</div></pre></td></tr></table></figure><p><strong>读取管道数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</div><div class="line"><span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> <span class="variable">$line</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ll | test.sh</div></pre></td></tr></table></figure><p><strong>更多参数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-a ：将内容读入到数组中</div><div class="line">-d ：表示delimiter，即定界符，一般情况下是以IFS为参数的间隔，但是通过-d，我们可以定义一直读到出现执行的字符位置。例如<span class="built_in">read</span> –d madfds value，读到有m的字符的时候就不在继续向后读，例如输入为 hello m，有效值为“hello”，请注意m前面的空格等会被删除。这种方式可以输入多个字符串，例如定义“.”作为结符号等等。</div><div class="line">-e ：只用于互相交互的脚本，它将readline用于收集输入行。读到这几句话不太明白什么意思，先跳过。</div><div class="line">-n ：用于限定最多可以有多少字符可以作为有效读入。例如<span class="built_in">echo</span> –n 4 value1 value2，如果我们试图输入12 34，则只有前面有效的12 3，作为输入，实际上在你输入第4个字符‘3’后，就自动结束输入。这里结果是value为12，value2为3。</div><div class="line">-p ：用于给出提示符，在前面的例子中我们使用了<span class="built_in">echo</span> –n “…“来给出提示符，可以使用<span class="built_in">read</span> –p ‘… my promt?’value的方式只需一个语句来表示。</div><div class="line">-r ：在参数输入中，我们可以使用’/’表示没有输入完，换行继续输入，如果我们需要行最后的’/’作为有效的字符，可以通过-r来进行。此外在输入字符中，我们希望/n这类特殊字符生效，也应采用-r选项。</div><div class="line">-s ：隐藏输入内容，比如密码</div><div class="line">-t ：用于表示等待输入的时间，单位为秒，等待时间超过，将继续执行后面的脚本，注意不作为null输入，参数将保留原有的值</div></pre></td></tr></table></figure><p><strong>参考</strong></p><ul><li><a href="http://gohom.win/2015/08/20/shell-read/" target="_blank" rel="external">shell的read命令</a></li><li><a href="https://www.cnblogs.com/nwf5d/archive/2011/11/20/2255702.html" target="_blank" rel="external">Shell中read的选项及用法</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Shell 脚本中可以使用 read 来实现交互模式。&lt;br&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://wxnacy.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Expect 脚本参数传递</title>
    <link href="http://wxnacy.com/2018/10/27/expect-args/"/>
    <id>http://wxnacy.com/2018/10/27/expect-args/</id>
    <published>2018-10-27T02:44:20.000Z</published>
    <updated>2018-10-27T02:44:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Expect 脚本同 Shell 脚本一样可以通过外部传递参数。<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --></div><p><code>argc</code> 代表参数个数，<code>argv</code> 代表参数列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">puts $argc</div><div class="line">puts $argv</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ./test.exp wxnacy wxn</div><div class="line">2</div><div class="line">wxnacy wxn</div></pre></td></tr></table></figure><p>设置变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">set name [lindex $argv 0]</div><div class="line">puts $name</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./test.exp wxnacy wxn</div><div class="line">wxnacy</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Expect 脚本同 Shell 脚本一样可以通过外部传递参数。&lt;br&gt;
    
    </summary>
    
    
      <category term="expect" scheme="http://wxnacy.com/tags/expect/"/>
    
  </entry>
  
  <entry>
    <title>Git 将用户名密码储存在本机，避免每次输入</title>
    <link href="http://wxnacy.com/2018/10/26/git-store-password/"/>
    <id>http://wxnacy.com/2018/10/26/git-store-password/</id>
    <published>2018-10-26T03:33:53.000Z</published>
    <updated>2018-10-26T04:07:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>新机器上使用 Git，每次推送都需要使用密码，为了避免这种情况，需要将密码储存在本地。<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --></div><p>在提交文件之前使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global credential.helper store</div></pre></td></tr></table></figure><p>随后再输入用户名和密码后会在根目录 <code>~</code> 中生成一个文件 <code>.git-credentials</code></p><p>文件内容为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://user:password@github.com</div></pre></td></tr></table></figure><p>以后再次提交内容则不用在输入密码，也可以手动添加该文件。</p><p>Mac 中可以使用 <code>osxkeychain</code> 模式将密码加密储存。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global credential.helper osxkeychain</div></pre></td></tr></table></figure><p><strong>参考</strong></p><ul><li><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8" target="_blank" rel="external">Git 工具 - 凭证存储</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新机器上使用 Git，每次推送都需要使用密码，为了避免这种情况，需要将密码储存在本地。&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://wxnacy.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Deepin 交换 CapsLock 和 Control 键位</title>
    <link href="http://wxnacy.com/2018/10/25/deepin-capslock-control/"/>
    <id>http://wxnacy.com/2018/10/25/deepin-capslock-control/</id>
    <published>2018-10-25T02:05:19.000Z</published>
    <updated>2018-10-25T02:12:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于程序员来说，<code>CapsLock</code> 键位基本是没用的，但是它又占着一个黄金位置，将它换成 <code>Control</code> 键，在各个终端命令中作为 Leader 键是非常合适的，在 Mac 中可以直接从设置面板中修改，在 Deepin 中稍微费点事。<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --></div><p><strong>打开 Terminal</strong></p><p>使用 <code>ctrl + alt + t</code> 键快速打开一个 Terminal。</p><p><strong>创建配置文件</strong></p><p>在用户当前目录 <code>~</code> 下创建 <code>.xmodmap</code> 文件，如果有，直接编辑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~</div><div class="line">$ touch .xmodmap</div><div class="line">$ vim .xmodmap</div></pre></td></tr></table></figure><p>将如下配置复制进文件，然后保存退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">remove Lock = Caps_Lock</div><div class="line">remove Control = Control_L</div><div class="line">keysym Control_L = Caps_Lock</div><div class="line">keysym Caps_Lock = Control_L</div><div class="line">add Lock = Caps_Lock</div><div class="line">add Control = Control_L</div></pre></td></tr></table></figure><p>使用文件生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ xmodmap .xmodmap</div></pre></td></tr></table></figure><p>如果执行后没有报错，此时两个键位已经交换成功</p><p><strong>参考</strong></p><ul><li><a href="https://jingyan.baidu.com/article/a24b33cd2bb8e019fe002bb6.html" target="_blank" rel="external">deepin linux下怎么交换ctrl和capslock键</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于程序员来说，&lt;code&gt;CapsLock&lt;/code&gt; 键位基本是没用的，但是它又占着一个黄金位置，将它换成 &lt;code&gt;Control&lt;/code&gt; 键，在各个终端命令中作为 Leader 键是非常合适的，在 Mac 中可以直接从设置面板中修改，在 Deepin 中稍微费点事。&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://wxnacy.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Go 如何实现不换行进度条</title>
    <link href="http://wxnacy.com/2018/10/24/go-progress/"/>
    <id>http://wxnacy.com/2018/10/24/go-progress/</id>
    <published>2018-10-24T02:01:48.000Z</published>
    <updated>2018-10-24T02:49:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Go 中实现不换行进度条，可以通过几行原理代码实现。<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --><p></div><br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fmt.Printf(<span class="string">"%s \033[K\n"</span>, <span class="string">"--"</span>)     <span class="comment">// 输出一行结果</span></div><div class="line">fmt.Printf(<span class="string">"\033[%dA\033[K"</span>, <span class="number">1</span>)     <span class="comment">// 将光标向上移动一行</span></div><div class="line">fmt.Printf(<span class="string">"%s \033[K\n"</span>, <span class="string">"=-"</span>)     <span class="comment">// 输出第二行结果</span></div></pre></td></tr></table></figure></p><p>如此往复即可实现不换行进度条</p><p>完整代码见 <a href="https://github.com/wxnacy/study/blob/master/goland/src/progress/single.go" target="_blank" rel="external">single.go</a></p><p>输出屏幕带有屏幕的原理可见 <a href="/2018/09/07/go-fmt-color/">Go 如何给屏幕打印信息加上颜色</a></p><p>带颜色的进度条完整代码见 <a href="https://github.com/wxnacy/study/blob/master/goland/src/progress/color.go" target="_blank" rel="external">color.go</a></p><p>如果同时有多个进度条同时运行，那原理在于将最上边的进度条使用 <code>fmt.Printf(&quot;\033[%dA\033[K&quot;, n)</code> 上移一定的行数，其余进度条顺序打印即可。</p><p>多个进度条完整代码见 <a href="https://github.com/wxnacy/study/blob/master/goland/src/progress/multi.go" target="_blank" rel="external">multi.go</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Go 中实现不换行进度条，可以通过几行原理代码实现。&lt;br&gt;
    
    </summary>
    
    
      <category term="go" scheme="http://wxnacy.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>查看本机的 ip 地址</title>
    <link href="http://wxnacy.com/2018/10/23/ifconfig-local-ip/"/>
    <id>http://wxnacy.com/2018/10/23/ifconfig-local-ip/</id>
    <published>2018-10-23T04:25:42.000Z</published>
    <updated>2018-10-23T05:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在终端中可以使用 <code>ifconfig</code> 查看 ip 信息<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --></div><p>在 Mac 中使用 <code>ifconfig en0</code> 可以查看本机 ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ ifconfig en0</div><div class="line">en0: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</div><div class="line">ether 98:01:a7:8b:d9:a5</div><div class="line">inet6 fe80::9a01:a7ff:fe8b:d9a5%en0 prefixlen 64 scopeid 0x4</div><div class="line">inet 10.2.0.95 netmask 0xfffffc00 broadcast 10.2.3.255</div><div class="line">nd6 options=1&lt;PERFORMNUD&gt;</div><div class="line">media: autoselect</div><div class="line">status: active</div></pre></td></tr></table></figure><p><code>10.2.0.95</code> 即为本机 ip，可以使用组合命令将该 ip 直接找出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ifconfig en0 | grep inet | grep -v inet6 | awk <span class="string">'&#123;print $2&#125;'</span></div><div class="line">10.2.0.95</div></pre></td></tr></table></figure><p>在 Linux 系统中需要使用 <code>ifconfig eth0</code> 查看本机 ip</p><p>比如 CentOS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ifconfig eth0 | grep inet | grep -v inet6 | awk <span class="string">'&#123;print $2&#125;'</span></div></pre></td></tr></table></figure><p>在 Ubuntu 中 ip 格式为 <code>addr:10.2.0.59</code>，需要再加一层 awk 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ifconfig eth0 | grep inet | grep -v inet6 | awk <span class="string">'&#123;print $2&#125;'</span> | awk -v FS=<span class="string">":"</span> <span class="string">'&#123;print $2&#125;'</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在终端中可以使用 &lt;code&gt;ifconfig&lt;/code&gt; 查看 ip 信息&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://wxnacy.com/tags/linux/"/>
    
      <category term="mac" scheme="http://wxnacy.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>可能会用到的 Linux 组合命令</title>
    <link href="http://wxnacy.com/2018/10/22/common-linux-command/"/>
    <id>http://wxnacy.com/2018/10/22/common-linux-command/</id>
    <published>2018-10-22T10:21:07.000Z</published>
    <updated>2018-10-23T02:43:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些可能会用到的组合命令<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --></div><p><strong>删除当前目录下 0 字节文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm `ls -l | awk <span class="string">'$5 == "0" &#123;print $9&#125;'</span>`</div></pre></td></tr></table></figure><p><strong>MacOS 系统查看本机 ip</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ifconfig en0 | grep inet | grep -v inet6 | awk <span class="string">'&#123;print $2&#125;'</span></div></pre></td></tr></table></figure><p><strong>CentOS 系统查看本机 ip</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ifconfig eth0 | grep inet | grep -v inet6 | awk <span class="string">'&#123;print $2&#125;'</span></div></pre></td></tr></table></figure><p><strong>Ubuntu 系统查看本机 ip</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ifconfig eth0 | grep inet | grep -v inet6 | awk <span class="string">'&#123;print $2&#125;'</span> | awk -v FS=<span class="string">":"</span> <span class="string">'&#123;print $2&#125;'</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些可能会用到的组合命令&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://wxnacy.com/tags/linux/"/>
    
  </entry>
  
</feed>
