<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>温欣爸比的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wxnacy.com/"/>
  <updated>2020-01-09T08:28:38.561Z</updated>
  <id>http://wxnacy.com/</id>
  
  <author>
    <name>温欣爸比</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shell 获取单个文件大小的几种方式</title>
    <link href="http://wxnacy.com/2020/01/09/shell-file-size/"/>
    <id>http://wxnacy.com/2020/01/09/shell-file-size/</id>
    <published>2020-01-09T08:21:42.000Z</published>
    <updated>2020-01-09T08:28:38.561Z</updated>
    
    <content type="html"><![CDATA[<p>假设有文件 <code>wxnacy</code></p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#wc">wc</a></li><li><a href="#ls">ls</a></li><li><a href="#stat">stat</a></li></ul><!-- tocstop --></div><h2><span id="wc">wc</span><a href="#wc" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $(wc -c &lt; wxnacy)</span><br><span class="line">$ <span class="built_in">echo</span> $(cat wxnacy | wc -c)</span><br><span class="line">$ wc -c wxnacy | awk <span class="string">'&#123;print $1&#125;'</span></span><br></pre></td></tr></table></figure><h2><span id="ls">ls</span><a href="#ls" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l wxnacy | awk <span class="string">'&#123;print $5&#125;'</span></span><br></pre></td></tr></table></figure><h2><span id="stat">stat</span><a href="#stat" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">stat</span> wxnacy | awk <span class="string">'&#123;print $8&#125;'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假设有文件 &lt;code&gt;wxnacy&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://wxnacy.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 分组查找最后一条记录</title>
    <link href="http://wxnacy.com/2020/01/08/mysql-group-last-row/"/>
    <id>http://wxnacy.com/2020/01/08/mysql-group-last-row/</id>
    <published>2020-01-08T08:45:19.000Z</published>
    <updated>2020-01-09T08:51:21.393Z</updated>
    
    <content type="html"><![CDATA[<p>现在有一张表，以 <code>yt_channel_id</code> 为外键 id，不断的写进数据，每次的数据 <code>videos</code> 字段会不一样。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>现在想要批量每个 <code>yt_channel_id</code> 最新插入的数据，使用 <code>group</code> 配合 <code>max(create_ts)</code> 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ select yt_channel_id, videos, max(create_ts) from youtube_data group by yt_channel_id;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在有一张表，以 &lt;code&gt;yt_channel_id&lt;/code&gt; 为外键 id，不断的写进数据，每次的数据 &lt;code&gt;videos&lt;/code&gt; 字段会不一样。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://wxnacy.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>解决 Docker 日志文件太大的问题</title>
    <link href="http://wxnacy.com/2019/12/26/docker-log-too-big/"/>
    <id>http://wxnacy.com/2019/12/26/docker-log-too-big/</id>
    <published>2019-12-26T06:51:31.000Z</published>
    <updated>2019-12-26T07:33:06.774Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 在不重建容器的情况下，日志文件默认会一直追加，时间一长会逐渐占满服务器的硬盘的空间，内存消耗也会一直增加，本篇来了解一些控制日志文件的方法。</p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#qing-li-dan-ge-wen-jian">清理单个文件</a></li><li><a href="#yun-xing-shi-kong-zhi">运行时控制</a></li><li><a href="#quan-ju-pei-zhi">全局配置</a></li></ul><!-- tocstop --></div><p>Docker 的日志文件存在 <code>/var/lib/docker/containers</code> 目录中，通过下面的命令可以将日志文件夹根据升序的方式罗列出来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ sudo du -d1 -h /var/lib/docker/containers | sort -h</span><br><span class="line"></span><br><span class="line">28K     /var/lib/docker/containers/0db860afe94df368335c2e96f290275f4c396b996b4e8d22770b01baafd9982c</span><br><span class="line">36K     /var/lib/docker/containers/6ee184044661c436b44769d56c203f1fc296dbfe08f6ed4cf79aa6fb8cae6659</span><br><span class="line">44K     /var/lib/docker/containers/66c44231981fcb5ecd33bf0fc3390e71c5cbbabb839d79441eb3317b8500d551</span><br><span class="line">60K     /var/lib/docker/containers/bc4136199037e73d712614ef57de0915d294cbe51045d213f0d822d71a86cf2c</span><br><span class="line">344K    /var/lib/docker/containers/7bd3a179cf67b1537e0965c1d1f518420ac5d4cd151ecb75c37ada8c2347ca6b</span><br><span class="line">984K    /var/lib/docker/containers/6bd1f79f16b8b06f2bd203dd84443004ba08c150ac51d23fa620e8b2cbf4b773</span><br><span class="line">1.7M    /var/lib/docker/containers/a93a4275571b0033367f9cab8213c467b21a03c600e2203195640b5a5bc7f523</span><br><span class="line">4.4M    /var/lib/docker/containers/082564c5bdb19b642491b09419a69061122483c0f959a36eb186dd1fec53c163</span><br><span class="line">14M     /var/lib/docker/containers/05fc24ef7a14e31e4557c9881482d350cfb05f2f1cb870638de344581154ca01</span><br><span class="line">32M     /var/lib/docker/containers/5d70c82942083d16593670058aefed339cfe874c9027205b1e6eb8e569894d65</span><br><span class="line">129M    /var/lib/docker/containers/a88d104d20e5ee58ffeaeecbb559b3231c5b8c73ad1443538928ebeae4ff705c</span><br><span class="line">285M    /var/lib/docker/containers/b623602a667c0b31068563f244610a548ed055ff9802197f372ff436a294ab5c</span><br><span class="line">917M    /var/lib/docker/containers/3d71c509ab6aea34400d37f6c006914eed2cb05e6e6cd07b3ee03eb783dc367b</span><br><span class="line">1.4G    /var/lib/docker/containers</span><br></pre></td></tr></table></figure><p>有三种方式可以清理日志文件</p><h2><span id="qing-li-dan-ge-wen-jian">清理单个文件</span><a href="#qing-li-dan-ge-wen-jian" class="header-anchor"></a></h2><p>感觉哪个容器的日志太大就清理哪个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sh -c <span class="string">"cat /dev/null &gt; <span class="variable">$&#123;log_file&#125;</span>"</span></span><br></pre></td></tr></table></figure><p><code>${log_file}</code> 就是日志文件，可以通过 <code>find</code> 命令查找全部日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sudo find /var/lib/docker/containers -name *.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">/var/lib/docker/containers/3d71c509ab6aea34400d37f6c006914eed2cb05e6e6cd07b3ee03eb783dc367b/3d71c509ab6aea34400d37f6c006914eed2cb05e6e6cd07b3ee03eb783dc367b-json.log</span><br><span class="line">/var/lib/docker/containers/0db860afe94df368335c2e96f290275f4c396b996b4e8d22770b01baafd9982c/0db860afe94df368335c2e96f290275f4c396b996b4e8d22770b01baafd9982c-json.log</span><br><span class="line">/var/lib/docker/containers/bc4136199037e73d712614ef57de0915d294cbe51045d213f0d822d71a86cf2c/bc4136199037e73d712614ef57de0915d294cbe51045d213f0d822d71a86cf2c-json.log</span><br><span class="line">/var/lib/docker/containers/5d70c82942083d16593670058aefed339cfe874c9027205b1e6eb8e569894d65/5d70c82942083d16593670058aefed339cfe874c9027205b1e6eb8e569894d65-json.log</span><br><span class="line">/var/lib/docker/containers/6ee184044661c436b44769d56c203f1fc296dbfe08f6ed4cf79aa6fb8cae6659/6ee184044661c436b44769d56c203f1fc296dbfe08f6ed4cf79aa6fb8cae6659-json.log</span><br><span class="line">/var/lib/docker/containers/082564c5bdb19b642491b09419a69061122483c0f959a36eb186dd1fec53c163/082564c5bdb19b642491b09419a69061122483c0f959a36eb186dd1fec53c163-json.log</span><br><span class="line">/var/lib/docker/containers/b623602a667c0b31068563f244610a548ed055ff9802197f372ff436a294ab5c/b623602a667c0b31068563f244610a548ed055ff9802197f372ff436a294ab5c-json.log</span><br><span class="line">/var/lib/docker/containers/66c44231981fcb5ecd33bf0fc3390e71c5cbbabb839d79441eb3317b8500d551/66c44231981fcb5ecd33bf0fc3390e71c5cbbabb839d79441eb3317b8500d551-json.log</span><br><span class="line">/var/lib/docker/containers/a93a4275571b0033367f9cab8213c467b21a03c600e2203195640b5a5bc7f523/a93a4275571b0033367f9cab8213c467b21a03c600e2203195640b5a5bc7f523-json.log</span><br><span class="line">/var/lib/docker/containers/a88d104d20e5ee58ffeaeecbb559b3231c5b8c73ad1443538928ebeae4ff705c/a88d104d20e5ee58ffeaeecbb559b3231c5b8c73ad1443538928ebeae4ff705c-json.log</span><br><span class="line">/var/lib/docker/containers/6bd1f79f16b8b06f2bd203dd84443004ba08c150ac51d23fa620e8b2cbf4b773/6bd1f79f16b8b06f2bd203dd84443004ba08c150ac51d23fa620e8b2cbf4b773-json.log</span><br><span class="line">/var/lib/docker/containers/05fc24ef7a14e31e4557c9881482d350cfb05f2f1cb870638de344581154ca01/05fc24ef7a14e31e4557c9881482d350cfb05f2f1cb870638de344581154ca01-json.log</span><br><span class="line">/var/lib/docker/containers/7bd3a179cf67b1537e0965c1d1f518420ac5d4cd151ecb75c37ada8c2347ca6b/7bd3a179cf67b1537e0965c1d1f518420ac5d4cd151ecb75c37ada8c2347ca6b-json.log</span><br></pre></td></tr></table></figure><p>或者查看具体容器名称的日志位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect --format=<span class="string">'&#123;&#123;.LogPath&#125;&#125;'</span> redis</span><br><span class="line">/var/lib/docker/containers/6ee184044661c436b44769d56c203f1fc296dbfe08f6ed4cf79aa6fb8cae6659/6ee184044661c436b44769d56c203f1fc296dbfe08f6ed4cf79aa6fb8cae6659-json.log</span><br></pre></td></tr></table></figure><p>这样只是解决燃眉之急，并不是长久之计，最好是创建容器时就控制日志的大小.</p><h2><span id="yun-xing-shi-kong-zhi">运行时控制</span><a href="#yun-xing-shi-kong-zhi" class="header-anchor"></a></h2><p>启动容器时，我们可以通过参数来控制日志的文件个数和单个文件的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># max-size 最大数值</span></span><br><span class="line"><span class="comment"># max-file 最大日志数</span></span><br><span class="line">$ docker run -it --<span class="built_in">log</span>-opt max-size=10m --<span class="built_in">log</span>-opt max-file=3 redis</span><br></pre></td></tr></table></figure><p>一两个容器还好，但是如果有很多容器需要管理，这样就很不方便了，最好还是可以统一管理。</p><h2><span id="quan-ju-pei-zhi">全局配置</span><a href="#quan-ju-pei-zhi" class="header-anchor"></a></h2><p>创建或修改文件 <code>/etc/docker/daemon.json</code>，并增加以下配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"log-driver"</span>:<span class="string">"json-file"</span>,</span><br><span class="line">    <span class="attr">"log-opts"</span>:&#123;</span><br><span class="line">        <span class="attr">"max-size"</span> :<span class="string">"50m"</span>,<span class="attr">"max-file"</span>:<span class="string">"1"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后重启 Docker 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>不过已存在的容器不会生效，需要重建才可以</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 在不重建容器的情况下，日志文件默认会一直追加，时间一长会逐渐占满服务器的硬盘的空间，内存消耗也会一直增加，本篇来了解一些控制日志文件的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://wxnacy.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg 常用的命令</title>
    <link href="http://wxnacy.com/2019/12/09/ffmpeg-shell/"/>
    <id>http://wxnacy.com/2019/12/09/ffmpeg-shell/</id>
    <published>2019-12-09T15:04:16.000Z</published>
    <updated>2019-12-26T07:35:58.746Z</updated>
    
    <content type="html"><![CDATA[<p>记录 FFmpeg 的一些命令</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p><strong>m3u8 格式文件转为 mp4</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -i <span class="string">"https://xxxx.com/20191005/WofkPuP1/1200kb/hls/index.m3u8"</span> -bsf:a aac_adtstoasc -vcodec copy -c copy -crf 50 target.mp4</span><br></pre></td></tr></table></figure><p><strong>分割视频</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -ss 开始时间（可选）</span></span><br><span class="line"><span class="comment"># -t 结束时间（可选）</span></span><br><span class="line"><span class="comment"># source.mp4 视频源</span></span><br><span class="line"><span class="comment"># target.mp4 目标名称</span></span><br><span class="line">$ ffmpeg -ss 00:12:00 -t 00:56:00 -i source.mp4 -vcodec copy -acodec copy target.mp4</span><br></pre></td></tr></table></figure><p><strong>将字幕文件烧进视频文件中</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -i source.mkv -vf subtitles=source.srt output.mkv</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录 FFmpeg 的一些命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="ffmpeg" scheme="http://wxnacy.com/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 随机获取表中一条数据</title>
    <link href="http://wxnacy.com/2019/12/05/mysql-rand/"/>
    <id>http://wxnacy.com/2019/12/05/mysql-rand/</id>
    <published>2019-12-05T08:58:19.000Z</published>
    <updated>2019-12-05T09:42:24.952Z</updated>
    
    <content type="html"><![CDATA[<p>现在有个需求是从表中随机取出一条数据，除了全部拿出数据用程序来随机外，还可以使用数据库的 <code>RAND()</code> 函数。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p><code>RAND()</code> 函数可以返回一个 <code>0~1</code> 的随机数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; select RAND();</span><br><span class="line">+--------------------+</span><br><span class="line">| RAND()             |</span><br><span class="line">+--------------------+</span><br><span class="line">| 0.8503168074882745 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">&gt; select RAND();</span><br><span class="line">+--------------------+</span><br><span class="line">| RAND()             |</span><br><span class="line">+--------------------+</span><br><span class="line">| 0.6016649581507453 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><code>RAND()</code> 还可以给一个数字参数，以该数字作为基准来生成一个可重复的随机数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; select RAND(5);</span><br><span class="line">+---------------------+</span><br><span class="line">| RAND(5)             |</span><br><span class="line">+---------------------+</span><br><span class="line">| 0.40613597483014313 |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">&gt; select RAND(5);</span><br><span class="line">+---------------------+</span><br><span class="line">| RAND(5)             |</span><br><span class="line">+---------------------+</span><br><span class="line">| 0.40613597483014313 |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>官方定义的该参数的取值范围是 <code>0~1</code>，但实测超过该范围也可以得到结果。</p><p>如果想要得到一个随机的整数，则可以运用数学运算和 <code>FLOOR()</code> 函数，比如想要一个 <code>[10,20]</code> 区间的随机数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; select FLOOR(10 + (RAND() * 11));</span><br><span class="line">+---------------------------+</span><br><span class="line">| FLOOR(10 + (RAND() * 11)) |</span><br><span class="line">+---------------------------+</span><br><span class="line">|                        18 |</span><br><span class="line">+---------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>最后回来点一下题，如何获取表中的随机数据？</p><p>这里需要配合排序语句 <code>ORDER BY RAND()</code> 来使用，可以获取一个按照随机排序的列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; SELECT * FROM USER ORDER BY RAND();</span><br><span class="line">+----+--------+----------+--------------+--------------+---------------------+---------------------+</span><br><span class="line">| id | name   | password | ext_property | is_available | create_ts           | update_ts           |</span><br><span class="line">+----+--------+----------+--------------+--------------+---------------------+---------------------+</span><br><span class="line">|  4 | spring |          | &#123;&#125;           |            1 | 2018-03-02 11:04:11 | 2018-03-02 11:04:11 |</span><br><span class="line">|  1 | wxnacy |          | &#123;&#125;           |            1 | 2018-03-02 11:04:11 | 2018-03-02 11:04:11 |</span><br><span class="line">|  2 | win    |          | &#123;&#125;           |            1 | 2018-03-02 11:04:11 | 2018-03-02 11:04:11 |</span><br><span class="line">|  3 | xiao   |          | &#123;&#125;           |            1 | 2018-03-02 11:04:11 | 2018-03-02 11:04:11 |</span><br><span class="line">|  5 | 温     |          | &#123;&#125;           |            1 | 2018-03-02 11:04:11 | 2018-03-02 11:04:11 |</span><br><span class="line">+----+--------+----------+--------------+--------------+---------------------+---------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>最后再配合 <code>LIMIT</code> 来获取随机的一条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; SELECT * FROM USER ORDER BY RAND() LIMIT 1;</span><br><span class="line">+----+--------+----------+--------------+--------------+---------------------+---------------------+</span><br><span class="line">| id | name   | password | ext_property | is_available | create_ts           | update_ts           |</span><br><span class="line">+----+--------+----------+--------------+--------------+---------------------+---------------------+</span><br><span class="line">|  2 | win    |          | &#123;&#125;           |            1 | 2018-03-02 11:04:11 | 2018-03-02 11:04:11 |</span><br><span class="line">+----+--------+----------+--------------+--------------+---------------------+---------------------+</span><br><span class="line">1 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在有个需求是从表中随机取出一条数据，除了全部拿出数据用程序来随机外，还可以使用数据库的 &lt;code&gt;RAND()&lt;/code&gt; 函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://wxnacy.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 丢失头信息的解决方法</title>
    <link href="http://wxnacy.com/2019/11/19/nginx-loss-headers/"/>
    <id>http://wxnacy.com/2019/11/19/nginx-loss-headers/</id>
    <published>2019-11-19T13:50:46.000Z</published>
    <updated>2019-11-19T14:02:21.202Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做 web 框架上的一些调整，在本地测试一个接口时发现莫名其妙的报错，调试发现是 Nginx 丢掉了带有下划线的头信息。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>对比了线上环境的配置文件，发现了确实有个配置不同，缺失了下面的部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    underscores_in_headers on;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nginx 默认情况下配置 <code>underscores_in_headers off;</code>，加上上面的配置即可正常请求接口。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做 web 框架上的一些调整，在本地测试一个接口时发现莫名其妙的报错，调试发现是 Nginx 丢掉了带有下划线的头信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="http://wxnacy.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 字符串填充</title>
    <link href="http://wxnacy.com/2019/11/12/js-padstart/"/>
    <id>http://wxnacy.com/2019/11/12/js-padstart/</id>
    <published>2019-11-12T13:59:29.000Z</published>
    <updated>2019-11-12T14:16:43.519Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中字符串填充可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart" target="_blank" rel="noopener">String.prototype.padStart()</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd" target="_blank" rel="noopener">String.prototype.padEnd()</a></p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>以 <code>padStart()</code> 为例，效果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">10</span>);         <span class="comment">// "       abc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">10</span>, <span class="string">"foo"</span>);  <span class="comment">// "foofoofabc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">6</span>,<span class="string">"123465"</span>); <span class="comment">// "123abc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">8</span>, <span class="string">"0"</span>);     <span class="comment">// "00000abc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">1</span>);          <span class="comment">// "abc"</span></span><br></pre></td></tr></table></figure><p>在浏览器的支持版本如下</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/psbs.png" alt="1"></p><p>对于不知道的版本，我们可以自己加上这个方法，在代码运行前执行如下代码即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/uxitten/polyfill/blob/master/string.polyfill.js</span></span><br><span class="line"><span class="comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart</span></span><br><span class="line"><span class="keyword">if</span> (!String.prototype.padStart) &#123;</span><br><span class="line">    String.prototype.padStart = <span class="function">function <span class="title">padStart</span><span class="params">(targetLength, padString)</span> </span>&#123;</span><br><span class="line">        targetLength = targetLength &gt;&gt; <span class="number">0</span>; <span class="comment">//truncate if number, or convert non-number to 0;</span></span><br><span class="line">        padString = String(typeof padString !== <span class="string">'undefined'</span> ? padString : <span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.length &gt;= targetLength) &#123;</span><br><span class="line">            <span class="keyword">return</span> String(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            targetLength = targetLength - <span class="keyword">this</span>.length;</span><br><span class="line">            <span class="keyword">if</span> (targetLength &gt; padString.length) &#123;</span><br><span class="line">                padString += padString.repeat(targetLength / padString.length); <span class="comment">//append to original to ensure we are longer than needed</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> padString.slice(<span class="number">0</span>, targetLength) + String(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>padEnd()</code> 的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/uxitten/polyfill/blob/master/string.polyfill.js</span></span><br><span class="line"><span class="comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd</span></span><br><span class="line"><span class="keyword">if</span> (!String.prototype.padEnd) &#123;</span><br><span class="line">    String.prototype.padEnd = <span class="function">function <span class="title">padEnd</span><span class="params">(targetLength,padString)</span> </span>&#123;</span><br><span class="line">        targetLength = targetLength&gt;&gt;<span class="number">0</span>; <span class="comment">//floor if number or convert non-number to 0;</span></span><br><span class="line">        padString = String((typeof padString !== <span class="string">'undefined'</span> ? padString : <span class="string">' '</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.length &gt; targetLength) &#123;</span><br><span class="line">            <span class="keyword">return</span> String(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            targetLength = targetLength-<span class="keyword">this</span>.length;</span><br><span class="line">            <span class="keyword">if</span> (targetLength &gt; padString.length) &#123;</span><br><span class="line">                padString += padString.repeat(targetLength/padString.length); <span class="comment">//append to original to ensure we are longer than needed</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> String(<span class="keyword">this</span>) + padString.slice(<span class="number">0</span>,targetLength);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart" target="_blank" rel="noopener">String.prototype.padStart()</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 JavaScript 中字符串填充可以使用 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;String.prototype.padStart()&lt;/a&gt; 和 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;String.prototype.padEnd()&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://wxnacy.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Mac 使用 vmware 装机报错 /dev/vmmon：Broken pipe</title>
    <link href="http://wxnacy.com/2019/10/28/mac-vmware-error-broken-pipe/"/>
    <id>http://wxnacy.com/2019/10/28/mac-vmware-error-broken-pipe/</id>
    <published>2019-10-28T00:14:44.000Z</published>
    <updated>2019-10-28T00:14:44.357Z</updated>
    
    <content type="html"><![CDATA[<p>好久不用虚拟机了，最近想装个 win10 调试程序，结果各种问题，记录下以备后用。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>在加载镜像后，启动前一直莫名报这个错。</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/vm-error1.png" alt="1"></p><p>问题出在 Mac 禁止了 VMware 的一些功能，可以进入 <code>系统偏好设置 -&gt; 安全性与隐私 -&gt; 通用</code>，然后点击下方的允许即可。</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/vm-error2.png" alt="2"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久不用虚拟机了，最近想装个 win10 调试程序，结果各种问题，记录下以备后用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mac" scheme="http://wxnacy.com/tags/mac/"/>
    
      <category term="vmware" scheme="http://wxnacy.com/tags/vmware/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 报警告 the &quot;ssl&quot; directive is deprecated</title>
    <link href="http://wxnacy.com/2019/10/17/nginx-the-ssl-depreated/"/>
    <id>http://wxnacy.com/2019/10/17/nginx-the-ssl-depreated/</id>
    <published>2019-10-17T06:51:04.000Z</published>
    <updated>2019-10-17T09:28:41.467Z</updated>
    
    <content type="html"><![CDATA[<p>一直用的一个配置文件，在用 docker 启动的 openresty 时，突然报了一堆警告</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx: [warn] the <span class="string">"ssl"</span> directive is deprecated, use the <span class="string">"listen ... ssl"</span> directive instead <span class="keyword">in</span> /usr/<span class="built_in">local</span>/openresty/nginx/conf/conf.d/biz.conf:4</span><br></pre></td></tr></table></figure><p>因为只是警告，所以程序可以正常运行，但每次都报还是很闹心，经查后发现还是版本问题。</p><p>在升级<a href="http://nginx.org/en/CHANGES" target="_blank" rel="noopener">日志</a>中是这样说的</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/nginx-ssl-deprecated.png" alt="1"></p><p><code>ssl on;</code> 的用法已经过时了，现在 <code>https</code> 需要使用 <code>listen ... ssl</code> 格式来标记。</p><p>就像这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直用的一个配置文件，在用 docker 启动的 openresty 时，突然报了一堆警告&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="http://wxnacy.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>世界货币查询文档</title>
    <link href="http://wxnacy.com/2019/09/22/world-currency/"/>
    <id>http://wxnacy.com/2019/09/22/world-currency/</id>
    <published>2019-09-22T14:04:14.000Z</published>
    <updated>2019-09-22T14:04:14.446Z</updated>
    
    <content type="html"><![CDATA[<p>因为工作需要了解一些外币信息的知识，收集一些网站一遍日常查询。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>两个国外的网站货币名称、简称和符号是比较全的。</p><p><a href="http://fx.sauder.ubc.ca/currency_table.html" target="_blank" rel="noopener">http://fx.sauder.ubc.ca/currency_table.html</a></p><p><a href="https://justforex.com/cn/education/currencies" target="_blank" rel="noopener">https://justforex.com/cn/education/currencies</a></p><p>但是因为是全英文的，所以查询不会方便，另外还有两个中文的可共查询</p><p><a href="https://fxtop.com/cn/countries-currencies.php" target="_blank" rel="noopener">https://fxtop.com/cn/countries-currencies.php</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为工作需要了解一些外币信息的知识，收集一些网站一遍日常查询。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://wxnacy.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>获取 youtube 视频屏蔽地区</title>
    <link href="http://wxnacy.com/2019/09/19/youtube-block-region/"/>
    <id>http://wxnacy.com/2019/09/19/youtube-block-region/</id>
    <published>2019-09-19T05:55:13.000Z</published>
    <updated>2019-09-19T05:55:13.679Z</updated>
    
    <content type="html"><![CDATA[<p>记得前几年 youtube 视频网页内是包含该视频的允许和屏蔽播放的区域的，但是最近需要使用时发现怎么也找不到了，估计是油管因为一些原因做了隐藏。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>先是 google 了一些方法，发现了一个网站可以查询视频的屏蔽地区，只需要输入网址或者 id 就可以了</p><p>网址：<a href="https://polsy.org.uk/stuff/ytrestrict.cgi" target="_blank" rel="noopener">https://polsy.org.uk/stuff/ytrestrict.cgi</a></p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/yt-polsy_1090.png" alt="1"></p><p>当做网页工具还是挺不错的，对它的结果网页做解析也比较简单，但是有些视频会查询不出来，所以在程序中还是不推荐使用。</p><p>转了一圈，发现官方就有相关的 API，记得以前是有一些使用限制的，现在再找并没有发现什么限制，只有每天的调用次数限制，大概 100000 次，一般使用也足够了</p><p>网址：<a href="https://developers.google.com/youtube/v3/docs/videos" target="_blank" rel="noopener">https://developers.google.com/youtube/v3/docs/videos</a></p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/yt-api-videos_823.png" alt="2"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记得前几年 youtube 视频网页内是包含该视频的允许和屏蔽播放的区域的，但是最近需要使用时发现怎么也找不到了，估计是油管因为一些原因做了隐藏。&lt;/p&gt;
    
    </summary>
    
    
      <category term="youtube" scheme="http://wxnacy.com/tags/youtube/"/>
    
  </entry>
  
  <entry>
    <title>使用 Python 新建微信公众号临时素材</title>
    <link href="http://wxnacy.com/2019/09/18/wx-upload-media/"/>
    <id>http://wxnacy.com/2019/09/18/wx-upload-media/</id>
    <published>2019-09-18T07:23:48.000Z</published>
    <updated>2019-09-18T07:23:48.136Z</updated>
    
    <content type="html"><![CDATA[<p>微信公众号相关的官方文档一直是以垃圾著称的，比如这个<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1444738726" target="_blank" rel="noopener">新建临时素材</a>。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/wx-media1_1031.png" alt="1"></p><p>接口调用的说明，只有一个 <code>curl</code> 的例子，真是 fuck 啊，</p><p>我也只能从 media 参数的说明中做一下文章，微信的文档要是没有点知识储备还真用不了。</p><p>这里说一下使用 Python 来完成的 demo</p><p>关键在于 media 字段包含的三个字段，可以使用 requests 模块来模拟上传文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: wxnacy(wxnacy@gmail.com)</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://api.weixin.qq.com/cgi-bin/media/upload'</span></span><br><span class="line">params = &#123;<span class="string">"access_token"</span>: <span class="string">'access_token'</span>, <span class="string">"type"</span>: <span class="string">'image'</span>&#125;</span><br><span class="line">files = &#123; <span class="string">'media'</span> : (<span class="string">'tmp.jpg'</span>, content, content_type)&#125;</span><br><span class="line">res = requests.post(url, params=params, files=files)</span><br><span class="line">res = json.loads(str(res.content, <span class="string">'utf8'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信公众号相关的官方文档一直是以垃圾著称的，比如这个&lt;a href=&quot;https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1444738726&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;新建临时素材&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://wxnacy.com/tags/python/"/>
    
      <category term="微信" scheme="http://wxnacy.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>使用 youtube-dl 下载油管视频</title>
    <link href="http://wxnacy.com/2019/09/15/use-youtube-dl/"/>
    <id>http://wxnacy.com/2019/09/15/use-youtube-dl/</id>
    <published>2019-09-15T06:56:00.000Z</published>
    <updated>2019-09-15T06:56:00.309Z</updated>
    
    <content type="html"><![CDATA[<p>油管上有全球最大的视频资源库，由于一些限制我们不能随时随地看到，如果有机会看的时候，也能批量下载一些视频就非常 nice 了， <a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener">youtube-dl</a> 可以完美的实现这个需求</p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#xia-zai">下载</a><ul><li><a href="#pip">pip</a></li><li><a href="#linux">Linux</a></li><li><a href="#mac">Mac</a></li><li><a href="#windows">Windows</a></li></ul></li><li><a href="#xia-zai-shi-pin">下载视频</a></li><li><a href="#chong-ming-ming">重命名</a></li></ul><!-- tocstop --></div><h2><span id="xia-zai">下载</span><a href="#xia-zai" class="header-anchor"></a></h2><h3><span id="pip">pip</span><a href="#pip" class="header-anchor"></a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -H pip install --upgrade youtube-dl</span><br></pre></td></tr></table></figure><h3><span id="linux">Linux</span><a href="#linux" class="header-anchor"></a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo wget https://yt-dl.org/downloads/latest/youtube-dl -O /usr/<span class="built_in">local</span>/bin/youtube-dl</span><br><span class="line">$ sudo chmod a+rx /usr/<span class="built_in">local</span>/bin/youtube-dl</span><br></pre></td></tr></table></figure><h3><span id="mac">Mac</span><a href="#mac" class="header-anchor"></a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install youtube-dl</span><br></pre></td></tr></table></figure><h3><span id="windows">Windows</span><a href="#windows" class="header-anchor"></a></h3><p>下载 <a href="https://yt-dl.org/latest/youtube-dl.exe" target="_blank" rel="noopener">youtube-dl.exe</a> 文件直接运行即可。</p><p>这里有点需要注意，如果你是 Windows10 系统，很可能会报一个找不到 <code>MSVCR100.dll</code> 的错误，此时需要先安装 <a href="https://www.microsoft.com/en-US/download/details.aspx?id=5555" target="_blank" rel="noopener">Microsoft Visual C++ 2010 Redistributable Package (x86)</a>，然后再次执行 <code>youtube-dl.exe</code> 即可</p><h2><span id="xia-zai-shi-pin">下载视频</span><a href="#xia-zai-shi-pin" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ youtube-dl https://www.youtube.com/watch?v=OKIfTOEo7P0</span><br></pre></td></tr></table></figure><p>下载视频就是这么简单，默认下载的是 720p 的视频，只要你有的话，我们也可以先看下视频都包含什么格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ youtube-dl -F https://www.youtube.com/watch?v=OKIfTOEo7P0</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/ytdl1.png" alt="1"></p><p>也可以指定下载 1080p 的视频，使用第一列的数字可以精准下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ youtube-dl -f 137 https://www.youtube.com/watch?v=OKIfTOEo7P0</span><br></pre></td></tr></table></figure><p>有时候默认情况下会下载 webm 格式的视频，我们可以设置只下载 mp4 格式的视频</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ youtube-dl -f mp4 https://www.youtube.com/watch?v=OKIfTOEo7P0</span><br></pre></td></tr></table></figure><h2><span id="chong-ming-ming">重命名</span><a href="#chong-ming-ming" class="header-anchor"></a></h2><p><code>youtube-dl</code> 下载的视频默认保存在当前目录，使用视频名+扩展名来保存，我们可以通过重命名的方式来修改下载目录和文件名，不过通常是在下载播放列表和频道全部视频时才需要。</p><p>是的，它还可以直接下载频道全部视频和播放列表，这样不需要写什么脚本也可以实现批量下载了</p><p>通过 <code>-o</code> 参数可以格式化下载的位置和名字</p><p><strong>下载播放列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ youtube-dl -o <span class="string">'%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s'</span> https://www.youtube.com/playlist?list=PLumqm-XDIBr1tduTDECpjF_l33IVupKAN</span><br></pre></td></tr></table></figure><p>下载的文件名格式化为 <code>播放列表名称/视频位置 - 视频标题.扩展名</code></p><p><strong>下载频道</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ youtube-dl -o <span class="string">'%(uploader)s/%(title)s.%(ext)s'</span> https://www.youtube.com/channel/UCahEYs3JbJQL-oyL_0H9pRA</span><br></pre></td></tr></table></figure><p>下载的文件名格式化为 <code>上传者姓名/视频标题.扩展名</code></p><p>更多的格式化模板可以看<a href="https://github.com/ytdl-org/youtube-dl#output-template" target="_blank" rel="noopener">文档</a></p><p>在下载列表时有一点需要注意，很多原因都会导致下载某个视频时失败，我们希望它可以在失败跳过继续下载，而不是直接停止，加上 <code>-i</code> 参数即可。</p><p><strong>下载失败时跳过</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ youtube-dl -o <span class="string">'%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s'</span> https://www.youtube.com/playlist?list=PLumqm-XDIBr1tduTDECpjF_l33IVupKAN</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;油管上有全球最大的视频资源库，由于一些限制我们不能随时随地看到，如果有机会看的时候，也能批量下载一些视频就非常 nice 了， &lt;a href=&quot;https://github.com/ytdl-org/youtube-dl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;youtube-dl&lt;/a&gt; 可以完美的实现这个需求&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://wxnacy.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="python" scheme="http://wxnacy.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>VMware 报错：未找到文件</title>
    <link href="http://wxnacy.com/2019/09/09/vm-error-unfound-file/"/>
    <id>http://wxnacy.com/2019/09/09/vm-error-unfound-file/</id>
    <published>2019-09-09T02:56:46.000Z</published>
    <updated>2019-09-09T02:56:46.243Z</updated>
    
    <content type="html"><![CDATA[<p>之前卸载过 VMware，再次安装时就报这个错</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/vm-error5.png" alt="2"></p><p>这个问题在于之前创建的虚拟机有残留文件没有删除，现在删除即可，如下图，右击扩展坞中的图标，点击虚拟机资源库</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/vm-error6_374.png" alt="3"></p><p>然后把之前的残留删除即可</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/vm-error4_518.png" alt="1"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前卸载过 VMware，再次安装时就报这个错&lt;/p&gt;
    
    </summary>
    
    
      <category term="vmware" scheme="http://wxnacy.com/tags/vmware/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号被动自动回复两条消息</title>
    <link href="http://wxnacy.com/2019/09/08/weixin-two-reply/"/>
    <id>http://wxnacy.com/2019/09/08/weixin-two-reply/</id>
    <published>2019-09-08T08:46:41.000Z</published>
    <updated>2019-09-08T08:46:41.832Z</updated>
    
    <content type="html"><![CDATA[<p>这么长时间来开发微信公众号一直都是只用到了被动回复一条消息，最近有需要要自动回复两条消息，第一反应是怎么可能，查了下<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140543" target="_blank" rel="noopener">文档</a>也确实不行，但是其他公众号又有这么实现的。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>搜索了下发现以前的用法还是太死板了，被动消息是只能回复一条，但是还可以调用<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140547" target="_blank" rel="noopener">客服消息</a>来主动发送一条消息。</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/wx-kf_885.png" alt="1"></p><p>了解这个思路就已经可以了，具体的实现过程就不在赘述，有点经验可以说下。</p><p>如果让客服消息当做第一条，被动回复当做第二条，这样的通过进行可能会让单次请求时间加长。</p><p>我的做法是先异步调用客服消息，然后被动回复消息，打个时间差，客服消息刚好当做第二条消息，在被动回复的消息不就后到达。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这么长时间来开发微信公众号一直都是只用到了被动回复一条消息，最近有需要要自动回复两条消息，第一反应是怎么可能，查了下&lt;a href=&quot;https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1421140543&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt;也确实不行，但是其他公众号又有这么实现的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="微信" scheme="http://wxnacy.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Python 使用多属性来进行排序</title>
    <link href="http://wxnacy.com/2019/08/31/python-sort-multi-field/"/>
    <id>http://wxnacy.com/2019/08/31/python-sort-multi-field/</id>
    <published>2019-08-31T06:11:29.000Z</published>
    <updated>2019-08-31T06:11:29.643Z</updated>
    
    <content type="html"><![CDATA[<p>Python 中 <code>list.sort()</code> 是列表中非常常用的排序函数，<code>key</code> 参数可以对单个属性进行排序。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>但是想要实现类似 sql 中 <code>order by id, age</code> 一样，对多个字段进行排序就不支持了。</p><p>py2 中 <code>sort()</code> 函数还有个 <code>cmp</code> 参数可以传入一个方法，可以自定义对多个属性进行排序，py3 中移除了这个字段。</p><p>py3 想要实现这个功能，需要使用 <code>functools</code> 模块中的方法，实例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: wxnacy(wxnacy@gmail.com)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmp_func</span><span class="params">(a, b)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a[<span class="string">'id'</span>] &lt; b[<span class="string">'id'</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">elif</span> a[<span class="string">'id'</span>] &gt; b[<span class="string">'id'</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a[<span class="string">'name'</span>] &lt; b[<span class="string">'name'</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">elif</span> a[<span class="string">'name'</span>] &gt; b[<span class="string">'name'</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">arr.sort(key=cmp_to_key(cmp_func))</span><br></pre></td></tr></table></figure><p>上面的例子我们实现了 <code>id</code> 正序排序，如果 <code>id</code> 相同，则按照 <code>age</code> 正序排序</p><p>为了方便可以封装成一个方法，以供列表调用，封装的方法 demo 可以参见地址</p><p><a href="https://github.com/wxnacy/study/blob/master/python/office_module/list_demo/sort_by_multi_fields.py" target="_blank" rel="noopener">https://github.com/wxnacy/study/blob/master/python/office_module/list_demo/sort_by_multi_fields.py</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 中 &lt;code&gt;list.sort()&lt;/code&gt; 是列表中非常常用的排序函数，&lt;code&gt;key&lt;/code&gt; 参数可以对单个属性进行排序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://wxnacy.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 使用 Pillow 模块给图片添加文字水印</title>
    <link href="http://wxnacy.com/2019/08/29/python-pillow-text-watermark/"/>
    <id>http://wxnacy.com/2019/08/29/python-pillow-text-watermark/</id>
    <published>2019-08-29T13:32:37.000Z</published>
    <updated>2019-08-29T13:32:37.143Z</updated>
    
    <content type="html"><![CDATA[<p>像微博一类的平台上传图片时，平台都会添加一个水印，宣誓着对图片的所有权，我们自己的博客平台也可以给自己的图片添加上水印。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>还是用 <a href="https://github.com/python-pillow/Pillow" target="_blank" rel="noopener">Pillow</a> 模块来实现</p><p>先来看一个简单的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageDraw</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image = Image.open(<span class="string">'/Users/wxnacy/Downloads/vm-error1.png'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>draw = ImageDraw.Draw(image)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>draw.text((<span class="number">10</span>, <span class="number">10</span>), <span class="string">'wxnacy'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image.show()</span><br></pre></td></tr></table></figure><p>随后图片的左上角就可以看到水印的添加效果</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/pillow-watermark1.png" alt="1"></p><p>水印的颜色默认为白色，当然可以通过传参改变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>draw.text((<span class="number">10</span>, <span class="number">10</span>), <span class="string">'wxnacy'</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br></pre></td></tr></table></figure><p>添加一个参数，这和上面得到的结果是一样的，这里用的是三原色，<code>(255, 255, 255)</code> 分别为红色、绿色、蓝色</p><p>最后是字体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFont</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>font=ImageFont.truetype(<span class="string">'PingFang.ttc'</span>,<span class="number">40</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>draw.text((<span class="number">70</span>,<span class="number">300</span>),<span class="string">'This is wxnacy\'s website'</span>,(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>), font=font)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>image.show()</span><br></pre></td></tr></table></figure><p><code>PingFang.ttc</code> 必须是本地有的字体文件，<code>40</code> 是字体大小，这样最后的水印结果为</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/pillow-watermark2.png" alt="2"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;像微博一类的平台上传图片时，平台都会添加一个水印，宣誓着对图片的所有权，我们自己的博客平台也可以给自己的图片添加上水印。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://wxnacy.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Docker logs 命令</title>
    <link href="http://wxnacy.com/2019/08/22/docker-logs/"/>
    <id>http://wxnacy.com/2019/08/22/docker-logs/</id>
    <published>2019-08-22T09:40:01.000Z</published>
    <updated>2019-12-26T07:30:12.450Z</updated>
    
    <content type="html"><![CDATA[<p>之前没有留意过 <code>docker logs</code> 的正确用法，总是直接使用 <code>docker logs -f</code> 来实时跟踪日志，但是每次都要全部显示日志后再跟踪，时间一长日志变多就是灾难，看一下帮助文档，学习下正确用法。</p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#ji-chu-ming-ling">基础命令</a></li><li><a href="#shi-yong-grep">使用 grep</a></li></ul><!-- tocstop --></div><h2><span id="ji-chu-ming-ling">基础命令</span><a href="#ji-chu-ming-ling" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker logs [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Fetch the logs of a container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow <span class="built_in">log</span> output</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m <span class="keyword">for</span> 42 minutes)</span><br><span class="line">      --tail string    Number of lines to show from the end of the logs (default <span class="string">"all"</span>)</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m <span class="keyword">for</span> 42 minutes)</span><br></pre></td></tr></table></figure><p>想要跟 <code>tail -f</code> 命令一样从末尾10条以后开始跟踪，需要使用 <code>--tail</code> 参数，默认就是全部</p><p><strong>从末尾 10 条后开始跟踪</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs -f --tail 10 &lt;container-id&gt;</span><br></pre></td></tr></table></figure><p>除了行数限制，还可以根据时间戳来获取指定时间前后的是日志</p><p><strong>获取指定时间以后的日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs -t --since=<span class="string">"2019-08-20T13:23:37"</span> &lt;container-id&gt;</span><br></pre></td></tr></table></figure><p><strong>获取最后 10 分钟的日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs -t --since=10m &lt;container-id&gt;</span><br></pre></td></tr></table></figure><p><strong>获取指定时间范围的日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs -t --since=<span class="string">"2019-08-20T13:23:37"</span> --until=<span class="string">"2019-08-21T13:23:37"</span> &lt;container-id&gt;</span><br></pre></td></tr></table></figure><h2><span id="shi-yong-grep">使用 grep</span><a href="#shi-yong-grep" class="header-anchor"></a></h2><p>如果你使用 <code>grep</code> 会发现根本不起作用，因为 <code>docker logs</code> 命令并没有将日志打印到标准输出，这里我们需要先重定向下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs -f --tail 10 &lt;container-id&gt; 2&gt;&amp;1 | grep <span class="string">'grep thing'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前没有留意过 &lt;code&gt;docker logs&lt;/code&gt; 的正确用法，总是直接使用 &lt;code&gt;docker logs -f&lt;/code&gt; 来实时跟踪日志，但是每次都要全部显示日志后再跟踪，时间一长日志变多就是灾难，看一下帮助文档，学习下正确用法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://wxnacy.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>pm2 容器使用环境变量</title>
    <link href="http://wxnacy.com/2019/08/21/pm2-env/"/>
    <id>http://wxnacy.com/2019/08/21/pm2-env/</id>
    <published>2019-08-21T01:53:12.000Z</published>
    <updated>2019-08-21T01:53:12.603Z</updated>
    
    <content type="html"><![CDATA[<p>pm2 容器管理进程时，设置环境变量非常简单</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  apps : [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">"myapp"</span>,</span><br><span class="line">        script: <span class="string">"./app.js"</span>,</span><br><span class="line">        watch: <span class="literal">true</span>,</span><br><span class="line">        env: &#123;</span><br><span class="line">            <span class="string">"PORT"</span>: <span class="number">3000</span>,</span><br><span class="line">            <span class="string">"NODE_ENV"</span>: <span class="string">"development"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        env_production: &#123;</span><br><span class="line">            <span class="string">"PORT"</span>: <span class="number">80</span>,</span><br><span class="line">            <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>env</code> 是 pm2 默认使用的环境变量，使用 <code>env_production</code>  需要运行时指定环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start ecosystem.config.js --env production</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pm2 容器管理进程时，设置环境变量非常简单&lt;/p&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://wxnacy.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Python 获取当前文件的模块对象</title>
    <link href="http://wxnacy.com/2019/08/20/python-current-module/"/>
    <id>http://wxnacy.com/2019/08/20/python-current-module/</id>
    <published>2019-08-20T06:26:10.000Z</published>
    <updated>2019-08-20T06:34:54.439Z</updated>
    
    <content type="html"><![CDATA[<p>根据<a href="https://www.python.org/dev/peps/pep-3130/" target="_blank" rel="noopener">官方</a>文档可以得到这样的用法</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: wxnacy(wxnacy@gmail.com)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">mod = sys.modules[__name__]</span><br></pre></td></tr></table></figure><p>这个特性可以应用在什么场景呢？当模块中的方法有什么共同特性时，我们可以配合 <code>getattr</code> 方法来进行动态调用，而不必编写复杂的判断语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: wxnacy(wxnacy@gmail.com)</span></span><br><span class="line"><span class="comment"># Description:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_size</span><span class="params">(size: int)</span>:</span></span><br><span class="line">    <span class="string">'''格式化大小'''</span></span><br><span class="line">    unit = &#123;</span><br><span class="line">        <span class="number">0</span>: <span class="string">'B'</span>,</span><br><span class="line">        <span class="number">1</span>: <span class="string">'K'</span>,</span><br><span class="line">        <span class="number">2</span>: <span class="string">'M'</span>,</span><br><span class="line">        <span class="number">3</span>: <span class="string">'G'</span>,</span><br><span class="line">        <span class="number">4</span>: <span class="string">'T'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1024</span> ** i &lt;= size &lt; <span class="number">1024</span> ** ( i + <span class="number">1</span> ):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">                size = size / <span class="number">1024</span> ** i</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&#123;:0.1f&#125;&#123;&#125;'</span>.format( size, unit[i])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&#123;&#125;B'</span>.format(size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    module = sys.modules[__name__]</span><br><span class="line">    args = sys.argv[<span class="number">1</span>:]</span><br><span class="line">    func_name = args[<span class="number">0</span>]</span><br><span class="line">    func = getattr(module, func_name)</span><br><span class="line">    res = func(int(args[<span class="number">1</span>]))</span><br><span class="line">    print(res)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用方法</span></span><br><span class="line">    <span class="comment"># $ python utils.py format_size 1024</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据&lt;a href=&quot;https://www.python.org/dev/peps/pep-3130/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方&lt;/a&gt;文档可以得到这样的用法&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://wxnacy.com/tags/python/"/>
    
  </entry>
  
</feed>
