<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>温欣爸比的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wxnacy.com/"/>
  <updated>2020-05-17T02:36:38.437Z</updated>
  <id>http://wxnacy.com/</id>
  
  <author>
    <name>温欣爸比</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python urllib3 模块</title>
    <link href="http://wxnacy.com/2020/05/16/python-urllib3/"/>
    <id>http://wxnacy.com/2020/05/16/python-urllib3/</id>
    <published>2020-05-16T14:52:35.000Z</published>
    <updated>2020-05-17T02:36:38.437Z</updated>
    
    <content type="html"><![CDATA[<p>urllib3 是一个功能强大且友好的 Python HTTP 客户端。大多数 Python 生态系统已经使用 urllib3，包括 <a href="https://requests.readthedocs.io/" target="_blank" rel="noopener">Requests</a> 和 <a href="https://pip.pypa.io/" target="_blank" rel="noopener">Pip</a></p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#ru-men-shi-yong">入门使用</a></li><li><a href="#chang-yong-de-fan-hui-shu-ju">常用的返回数据</a></li><li><a href="#chang-yong-qing-qiu-fang-shi">常用请求方式</a></li><li><a href="#she-zhi-chao-shi">设置超时</a></li><li><a href="#chong-fu-qing-qiu">重复请求</a></li></ul><!-- tocstop --></div><h2><span id="ru-men-shi-yong">入门使用</span><a href="#ru-men-shi-yong" class="header-anchor"></a></h2><p>导入模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> urllib3</span><br></pre></td></tr></table></figure><p>然后需要一个 PoolManager 实例来发出请求。该对象处理连接池和线程安全性的所有详细信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>http = urllib3.PoolManager()</span><br></pre></td></tr></table></figure><p>生成一个请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = http.request(<span class="string">'GET'</span>, <span class="string">'http://httpbin.org/robots.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.data</span><br><span class="line"><span class="string">b'User-agent: *\nDisallow: /deny\n'</span></span><br></pre></td></tr></table></figure><p><code>r.data</code> 以字节的形式返回请求的返回数据</p><h2><span id="chang-yong-de-fan-hui-shu-ju">常用的返回数据</span><a href="#chang-yong-de-fan-hui-shu-ju" class="header-anchor"></a></h2><p>状态码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = http.request(<span class="string">'GET'</span>, <span class="string">'http://httpbin.org/ip'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status</span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure><p>返回数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.data</span><br><span class="line"><span class="string">b'&#123;\n  "origin": "104.232.115.37"\n&#125;\n'</span></span><br></pre></td></tr></table></figure><p>头信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.headers</span><br><span class="line">HTTPHeaderDict(&#123;<span class="string">'Content-Length'</span>: <span class="string">'33'</span>, ...&#125;)</span><br></pre></td></tr></table></figure><p>获取 JSON 结构数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(r.data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">&#123;<span class="string">'origin'</span>: <span class="string">'104.232.115.37'</span>&#125;</span><br></pre></td></tr></table></figure><p>字节数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = http.request(<span class="string">'GET'</span>, <span class="string">'http://httpbin.org/bytes/8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.data</span><br><span class="line"><span class="string">b'\xaa\xa5H?\x95\xe9\x9b\x11'</span></span><br></pre></td></tr></table></figure><h2><span id="chang-yong-qing-qiu-fang-shi">常用请求方式</span><a href="#chang-yong-qing-qiu-fang-shi" class="header-anchor"></a></h2><p>添加头信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = http.request(</span><br><span class="line"><span class="meta">... </span>    <span class="string">'GET'</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'http://httpbin.org/headers'</span>,</span><br><span class="line"><span class="meta">... </span>    headers=&#123;</span><br><span class="line"><span class="meta">... </span>        <span class="string">'X-Something'</span>: <span class="string">'value'</span></span><br><span class="line"><span class="meta">... </span>    &#125;)</span><br></pre></td></tr></table></figure><p><strong>地址参数</strong></p><p>GET, HEAD, DELETE 请求添加地址参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = http.request(</span><br><span class="line"><span class="meta">... </span>    <span class="string">'GET'</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'http://httpbin.org/get'</span>,</span><br><span class="line"><span class="meta">... </span>    fields=&#123;<span class="string">'arg'</span>: <span class="string">'value'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(r.data.decode(<span class="string">'utf-8'</span>))[<span class="string">'args'</span>]</span><br><span class="line">&#123;<span class="string">'arg'</span>: <span class="string">'value'</span>&#125;</span><br></pre></td></tr></table></figure><p>POST, PUT 请求通常需要将参数进行 urlencode 编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encoded_args = urlencode(&#123;<span class="string">'arg'</span>: <span class="string">'value'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'http://httpbin.org/post?'</span> + encoded_args</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = http.request(<span class="string">'POST'</span>, url)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(r.data.decode(<span class="string">'utf-8'</span>))[<span class="string">'args'</span>]</span><br><span class="line">&#123;<span class="string">'arg'</span>: <span class="string">'value'</span>&#125;</span><br></pre></td></tr></table></figure><p>表单参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = http.request(</span><br><span class="line"><span class="meta">... </span>    <span class="string">'POST'</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'http://httpbin.org/post'</span>,</span><br><span class="line"><span class="meta">... </span>    fields=&#123;<span class="string">'field'</span>: <span class="string">'value'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(r.data.decode(<span class="string">'utf-8'</span>))[<span class="string">'form'</span>]</span><br><span class="line">&#123;<span class="string">'field'</span>: <span class="string">'value'</span>&#125;</span><br></pre></td></tr></table></figure><p>JSON 参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'attribute'</span>: <span class="string">'value'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encoded_data = json.dumps(data).encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = http.request(</span><br><span class="line"><span class="meta">... </span>    <span class="string">'POST'</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'http://httpbin.org/post'</span>,</span><br><span class="line"><span class="meta">... </span>    body=encoded_data,</span><br><span class="line"><span class="meta">... </span>    headers=&#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(r.data.decode(<span class="string">'utf-8'</span>))[<span class="string">'json'</span>]</span><br><span class="line">&#123;<span class="string">'attribute'</span>: <span class="string">'value'</span>&#125;</span><br></pre></td></tr></table></figure><p>文件和字节数据参数</p><p>上传文件使用 <code>multipart/form-data</code> 编码并制定文件参数为一个元组，内容为 <code>(file_name, file_data)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'example.txt'</span>) <span class="keyword">as</span> fp:</span><br><span class="line"><span class="meta">... </span>    file_data = fp.read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = http.request(</span><br><span class="line"><span class="meta">... </span>    <span class="string">'POST'</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'http://httpbin.org/post'</span>,</span><br><span class="line"><span class="meta">... </span>    fields=&#123;</span><br><span class="line"><span class="meta">... </span>        <span class="string">'filefield'</span>: (<span class="string">'example.txt'</span>, file_data),</span><br><span class="line"><span class="meta">... </span>    &#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(r.data.decode(<span class="string">'utf-8'</span>))[<span class="string">'files'</span>]</span><br><span class="line">&#123;<span class="string">'filefield'</span>: <span class="string">'...'</span>&#125;</span><br></pre></td></tr></table></figure><p>也可以指定文件的 <code>MIME</code> 类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = http.request(</span><br><span class="line"><span class="meta">... </span>    <span class="string">'POST'</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'http://httpbin.org/post'</span>,</span><br><span class="line"><span class="meta">... </span>    fields=&#123;</span><br><span class="line"><span class="meta">... </span>        <span class="string">'filefield'</span>: (<span class="string">'example.txt'</span>, file_data, <span class="string">'text/plain'</span>),</span><br><span class="line"><span class="meta">... </span>    &#125;)</span><br></pre></td></tr></table></figure><p>要发送原始二进制数据，只需指定 body 参数。最好设置 Content-Type 头字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'example.jpg'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line"><span class="meta">... </span>    binary_data = fp.read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = http.request(</span><br><span class="line"><span class="meta">... </span>    <span class="string">'POST'</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'http://httpbin.org/post'</span>,</span><br><span class="line"><span class="meta">... </span>    body=binary_data,</span><br><span class="line"><span class="meta">... </span>    headers=&#123;<span class="string">'Content-Type'</span>: <span class="string">'image/jpeg'</span>&#125;)</span><br></pre></td></tr></table></figure><h2><span id="she-zhi-chao-shi">设置超时</span><a href="#she-zhi-chao-shi" class="header-anchor"></a></h2><p>单次请求可以设置一个 float 类型的超时时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>http.request(</span><br><span class="line"><span class="meta">... </span>    <span class="string">'GET'</span>, <span class="string">'http://httpbin.org/delay/3'</span>, timeout=<span class="number">4.0</span>)</span><br><span class="line">&lt;urllib3.response.HTTPResponse&gt;</span><br></pre></td></tr></table></figure><p>也可以使用 <code>Timeout</code> 实例来精准的控制连接超时和读取超时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>http.request(</span><br><span class="line"><span class="meta">... </span>    <span class="string">'GET'</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'http://httpbin.org/delay/3'</span>,</span><br><span class="line"><span class="meta">... </span>    timeout=urllib3.Timeout(connect=<span class="number">1.0</span>, read=<span class="number">2.0</span>))</span><br></pre></td></tr></table></figure><p>或者在<code>PoolManager</code> 中设置一个全局的超时配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>http = urllib3.PoolManager(timeout=<span class="number">3.0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>http = urllib3.PoolManager(</span><br><span class="line"><span class="meta">... </span>    timeout=urllib3.Timeout(connect=<span class="number">1.0</span>, read=<span class="number">2.0</span>))</span><br></pre></td></tr></table></figure><h2><span id="chong-fu-qing-qiu">重复请求</span><a href="#chong-fu-qing-qiu" class="header-anchor"></a></h2><p>默认情况下 urllib3 每次请求会会有 3 次重试的机会和 3 次重定向跳转，也可以使用 <code>retries</code> 参数进行设置</p><p>比如设置为 10 次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>http.requests(<span class="string">'GET'</span>, <span class="string">'http://httpbin.org/ip'</span>, retries=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>可以设置 <code>retries=False</code> 来同时关掉重试和重定向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>http.request(</span><br><span class="line"><span class="meta">... </span>    <span class="string">'GET'</span>, <span class="string">'http://nxdomain.example.com'</span>, retries=<span class="keyword">False</span>)</span><br><span class="line">NewConnectionError</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = http.request(</span><br><span class="line"><span class="meta">... </span>    <span class="string">'GET'</span>, <span class="string">'http://httpbin.org/redirect/1'</span>, retries=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status</span><br><span class="line"><span class="number">302</span></span><br></pre></td></tr></table></figure><p>或者只关闭重定向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = http.request(</span><br><span class="line"><span class="meta">... </span>    <span class="string">'GET'</span>, <span class="string">'http://httpbin.org/redirect/1'</span>, redirect=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status</span><br><span class="line"><span class="number">302</span></span><br></pre></td></tr></table></figure><p>使用 <code>Retry</code> 实例可以分别来控制重试和重定向的次数</p><p>比如进行 3 次重试和 2 次重定向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>http.request(</span><br><span class="line"><span class="meta">... </span>    <span class="string">'GET'</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'http://httpbin.org/redirect/3'</span>,</span><br><span class="line"><span class="meta">... </span>    retries=urllib3.Retry(<span class="number">3</span>, redirect=<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>最后同样的可以交给 <code>PoolManager</code> 进行全局配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>http = urllib3.PoolManager(retries=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>http = urllib3.PoolManager(</span><br><span class="line"><span class="meta">... </span>    retries=urllib3.Retry(<span class="number">5</span>, redirect=<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p><a href="https://urllib3.readthedocs.io/en/latest/user-guide.html" target="_blank" rel="noopener">更多文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;urllib3 是一个功能强大且友好的 Python HTTP 客户端。大多数 Python 生态系统已经使用 urllib3，包括 &lt;a href=&quot;https://requests.readthedocs.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Requests&lt;/a&gt; 和 &lt;a href=&quot;https://pip.pypa.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pip&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://wxnacy.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python os 模块方法梳理</title>
    <link href="http://wxnacy.com/2020/04/11/python-os/"/>
    <id>http://wxnacy.com/2020/04/11/python-os/</id>
    <published>2020-04-11T09:13:05.000Z</published>
    <updated>2020-05-17T02:49:50.568Z</updated>
    
    <content type="html"><![CDATA[<p>该模块提供了一些方便使用操作系统相关功能的函数。</p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#xi-tong-xiang-guan">系统相关</a></li></ul><!-- tocstop --></div><h2><span id="xi-tong-xiang-guan">系统相关</span><a href="#xi-tong-xiang-guan" class="header-anchor"></a></h2><table><thead><tr><th>方法</th><th>描述</th><th>参考值</th></tr></thead><tbody><tr><td>os.name</td><td>导入的依赖特定操作系统的模块的名称。以下名称目前已注册: ‘posix’, ‘nt’, ‘java’.</td><td>posix</td></tr><tr><td>os.ctermid()</td><td>返回与进程控制终端对应的文件名</td><td>/dev/tty</td></tr><tr><td>os.environ</td><td>一个表示字符串环境的 mapping 对象</td><td>os.environ[‘HOME’] = ‘/Users/wxnacy’</td></tr><tr><td>os.environb</td><td>字节版本的 environ: 一个以字节串表示环境的 mapping 对象</td><td>os.environ[‘HOME’] = b’/Users/wxnacy’</td></tr><tr><td>os.fsencode(path)</td><td>编码 路径类 文件名 为文件系统接受的形式</td><td>os.fsencode(‘温.json’) = b’\xe6\xb8\xa9.json’</td></tr><tr><td>os.fsdecode(path)</td><td>从文件系统编码方式解码为 路径类 文件名</td><td>os.fsdecode(b’\xe6\xb8\xa9.json’) = ‘温.json’</td></tr><tr><td>os.fspath(path)</td><td>返回路径的文件系统表示。 如果传入的是 str 或 bytes 类型的字符串，将原样返回。</td><td></td></tr><tr><td>os.getenv(key, default=None)</td><td>如果存在，返回环境变量 key 的值，否则返回 default。</td><td>os.getenv(‘HOME’) = ‘/Users/wxnacy’</td></tr><tr><td>os.getenvb(key, default=None)</td><td>同 <code>os.getenv()</code> key ， default 和返回值均为bytes字节串类型。</td><td></td></tr><tr><td>os.get_exec_path(env=None)</td><td>返回将用于搜索可执行文件的目录列表，与在外壳程序中启动一个进程时相似。指定的 env 应为用于搜索 PATH 的环境变量字典。默认情况下，当 env 为 None 时，将会使用 environ</td><td>os.get_exec_path() = os.getenv(“PATH”)</td></tr><tr><td>os.getegid()</td><td>返回当前进程的有效组ID。对应当前进程执行文件的 “set id” 位。</td><td></td></tr><tr><td>os.geteuid()</td><td>返回当前进程的有效用户ID。</td><td></td></tr><tr><td>os.getgrouplist(user, group)</td><td>返回该用户所在的组 ID 列表。可能 group 参数没有在返回的列表中，实际上用户应该也是属于该 group。group 参数一般可以从储存账户信息的密码记录文件中找到。</td><td></td></tr><tr><td>os.getgroups()</td><td>返回当前进程关联的附加组ID列表</td><td>Mac 环境会有所不同 <a href="https://docs.python.org/zh-cn/3.7/library/os.html#os.getgroups" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3.7/library/os.html#os.getgroups</a></td></tr><tr><td>os.getlogin()</td><td>返回通过控制终端进程进行登录的用户名。</td><td>在多数情况下，使用 getpass.getuser() 会更有效</td></tr><tr><td>os.getpgid(pid)</td><td>根据进程id pid 返回进程的组 ID 列表。如果 pid 为 0，则返回当前进程的进程组 ID 列表</td><td></td></tr><tr><td>os.getpgrp()</td><td>返回当时进程组的ID</td><td></td></tr><tr><td>os.getpid()</td><td>返回当前进程ID</td><td></td></tr><tr><td>os.getppid()</td><td>返回父进程ID。当父进程已经结束，在Unix中返回的ID是初始进程(1)中的一个</td><td></td></tr><tr><td>os.getpriority(which, who)</td><td>获取程序调度优先级。which 参数值可以是 PRIO_PROCESS，PRIO_PGRP，或 PRIO_USER 中的一个，who 是相对于 which (PRIO_PROCESS 的进程标识符，PRIO_PGRP 的进程组标识符和 PRIO_USER 的用户ID)。当 who 为 0 时（分别）表示调用的进程，调用进程的进程组或调用进程所属的真实用户 ID。</td><td></td></tr><tr><td>os.PRIO_PROCESS</td><td></td><td></td></tr><tr><td>os.PRIO_PGRP</td><td></td><td></td></tr><tr><td>os.PRIO_USER</td><td>函数 getpriority() 和 setpriority() 的参数。</td><td></td></tr><tr><td>os.getuid()</td><td>返回当前进程的真实用户ID。</td><td></td></tr><tr><td>os.putenv(key, value)</td><td>将名为 key 的环境变量值设置为 value。该变量名修改会影响由 os.system()， popen() ，fork() 和 execv() 发起的子进程。</td><td>不过 putenv() 的调用不会更新 os.environ，因此最好使用 os.environ 对变量赋值。</td></tr><tr><td>os.setegid(egid)</td><td>设置当前进程的有效组ID。</td><td></td></tr><tr><td>os.seteuid(euid)</td><td>设置当前进程的有效用户ID。</td><td></td></tr><tr><td>os.setgid(gid)</td><td>设置当前进程的组ID。</td><td></td></tr><tr><td>os.setgroups(groups)</td><td>将 group 参数值设置为与当进程相关联的附加组ID列表。</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该模块提供了一些方便使用操作系统相关功能的函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://wxnacy.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Linux 获取当前登录用户名</title>
    <link href="http://wxnacy.com/2020/04/01/linux-login-name/"/>
    <id>http://wxnacy.com/2020/04/01/linux-login-name/</id>
    <published>2020-04-01T03:23:54.000Z</published>
    <updated>2020-04-01T03:29:51.210Z</updated>
    
    <content type="html"><![CDATA[<p>写脚本时发现需要自适应当前登录用户的名字，查询后记录下</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p><strong>USER</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$USER</span></span><br><span class="line">wxnacy</span><br></pre></td></tr></table></figure><p><strong>whoami</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $(whoami)</span><br><span class="line">wxnacy</span><br></pre></td></tr></table></figure><p>这里看着很别扭，注意三个单词中间不能有空格，不然就成了这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $(who am i)</span><br><span class="line">wxnacy ttys044 Apr 1 11:26</span><br></pre></td></tr></table></figure><p>只用 <code>$(who)</code> 则可以获取更多信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $(who)</span><br><span class="line">wxnacy console Mar 31 15:40 wxnacy ttys000 Mar 31 15:44 wxnacy ttys067 Mar 31 15:48</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写脚本时发现需要自适应当前登录用户的名字，查询后记录下&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://wxnacy.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Shell 语言中的循环语句</title>
    <link href="http://wxnacy.com/2020/03/08/shell-loop/"/>
    <id>http://wxnacy.com/2020/03/08/shell-loop/</id>
    <published>2020-03-08T01:30:15.000Z</published>
    <updated>2020-03-08T02:52:13.726Z</updated>
    
    <content type="html"><![CDATA[<p>总结几种 Shell 语言中可以用到的循环语句</p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#for">for</a><ul><li><a href="#shu-zi-xun-huan">数字循环</a></li></ul></li><li><a href="#while">while</a></li></ul><!-- tocstop --></div><h2><span id="for">for</span><a href="#for" class="header-anchor"></a></h2><h3><span id="shu-zi-xun-huan">数字循环</span><a href="#shu-zi-xun-huan" class="header-anchor"></a></h3><p>简单数字循环</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment"># Author: wxnacy(wxnacy@gmail.com)</span></span><br><span class="line"><span class="comment"># Description:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># function 1</span></span><br><span class="line"><span class="comment"># lists="1 2 3 4 5"</span></span><br><span class="line"><span class="comment"># for var in $lists</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># function 2</span></span><br><span class="line"><span class="comment"># for var in 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># function 3</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> &#123;1..5&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>命令行使用方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">for</span> var <span class="keyword">in</span> &#123;1..5&#125;;<span class="keyword">do</span>;<span class="built_in">echo</span> <span class="variable">$var</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>使用 seq</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment"># Author: wxnacy(wxnacy@gmail.com)</span></span><br><span class="line"><span class="comment"># Description:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> $(seq 1 10)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>使用 2 作为步长</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment"># Author: wxnacy(wxnacy@gmail.com)</span></span><br><span class="line"><span class="comment"># Description:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> $(seq 1 2 10)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>使用 c 语言的方式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment"># Author: wxnacy(wxnacy@gmail.com)</span></span><br><span class="line"><span class="comment"># Description:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((var=1; var&lt;=5; var ++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2><span id="while">while</span><a href="#while" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment"># Author: wxnacy(wxnacy@gmail.com)</span></span><br><span class="line"><span class="comment"># Description:</span></span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(( i &lt;= 10 ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     <span class="built_in">let</span> <span class="string">"i+=1"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结几种 Shell 语言中可以用到的循环语句&lt;/p&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://wxnacy.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Node 写入和读取文件</title>
    <link href="http://wxnacy.com/2020/03/07/node-read-write-file/"/>
    <id>http://wxnacy.com/2020/03/07/node-read-write-file/</id>
    <published>2020-03-07T03:09:35.000Z</published>
    <updated>2020-03-08T03:33:48.418Z</updated>
    
    <content type="html"><![CDATA[<p>记录 Node 写入和读取文件的简单方法</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  * Author: wxnacy(wxnacy@gmail.com)</span></span><br><span class="line"><span class="comment"> *   * Description:</span></span><br><span class="line"><span class="comment"> *    */</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">'/tmp/test'</span>, <span class="string">'Hello World'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( err )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'/tmp/test'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>( err )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>将读取改为同步调用方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  * Author: wxnacy(wxnacy@gmail.com)</span></span><br><span class="line"><span class="comment"> *   * Description:</span></span><br><span class="line"><span class="comment"> *    */</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="string">'/Users/wxnacy/Downloads/test.sh'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(path, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span>( err )&#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> read()</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录 Node 写入和读取文件的简单方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://wxnacy.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node 从管道输入参数</title>
    <link href="http://wxnacy.com/2020/03/06/node-pipe-input/"/>
    <id>http://wxnacy.com/2020/03/06/node-pipe-input/</id>
    <published>2020-03-06T03:45:51.000Z</published>
    <updated>2020-03-08T03:52:48.164Z</updated>
    
    <content type="html"><![CDATA[<p>记录 Node 从管道输入参数的方式</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stdin = process.stdin;</span><br><span class="line"><span class="keyword">let</span> data = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">stdin.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line">stdin.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">  data += chunk;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">stdin.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello "</span> + data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">stdin.on(<span class="string">'error'</span>, <span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure><p>调用方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo <span class="string">"1 2"</span> | node test.js</span><br></pre></td></tr></table></figure><p>改为同步调用方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  * Author: wxnacy(wxnacy@gmail.com)</span></span><br><span class="line"><span class="comment"> *   * Description:</span></span><br><span class="line"><span class="comment"> *    */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stdin = process.stdin;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pipeInput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    stdin.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line">    stdin.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">      data += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    stdin.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    stdin.on(<span class="string">'error'</span>, reject);</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span>()=&gt;&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> pipeInput()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`参数为：<span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录 Node 从管道输入参数的方式&lt;/p&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://wxnacy.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Mac 电脑通过 Finder 获取文件夹的命令行地址</title>
    <link href="http://wxnacy.com/2020/02/15/mac-finder-get-pwd/"/>
    <id>http://wxnacy.com/2020/02/15/mac-finder-get-pwd/</id>
    <published>2020-02-14T16:08:05.000Z</published>
    <updated>2020-02-16T15:46:41.285Z</updated>
    
    <content type="html"><![CDATA[<p>记录几种 Mac 电脑通过 Finder 获取文件地址的方式。</p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#zhi-jie-fu-zhi">直接复制</a></li><li><a href="#ding-bu-yong-jiu-xian-shi">顶部永久显示</a></li><li><a href="#zhi-jie-zai-zhong-duan-zhong-da-kai">直接在终端中打开</a></li></ul><!-- tocstop --></div><h2><span id="zhi-jie-fu-zhi">直接复制</span><a href="#zhi-jie-fu-zhi" class="header-anchor"></a></h2><p>在文件列表中直接使用 <code>command + c</code> 复制，然后在 <code>Terminal</code> 中粘贴即可</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/finder1.png" alt="1"></p><p>在 Finder 左侧的目录则需要使用 <code>option + command + c</code> 来进行复制</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/finder2.png" alt="2"></p><h2><span id="ding-bu-yong-jiu-xian-shi">顶部永久显示</span><a href="#ding-bu-yong-jiu-xian-shi" class="header-anchor"></a></h2><p>打开 <code>Terminal</code> 并输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/finder3.png" alt="3"></p><h2><span id="zhi-jie-zai-zhong-duan-zhong-da-kai">直接在终端中打开</span><a href="#zhi-jie-zai-zhong-duan-zhong-da-kai" class="header-anchor"></a></h2><p>如果你安装了 <code>iTerm2</code>，则可以通过 <code>右键 -》服务 -》New iTerm2 Window Here</code> 直接打开当前目录</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/finder4_552.png" alt="4"></p><p>如果没有安装，也可以在文件夹的右键在默认终端中直接打开</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/finder5_612.png" alt="5"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录几种 Mac 电脑通过 Finder 获取文件地址的方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mac" scheme="http://wxnacy.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Shell 截取字符串的几种方式</title>
    <link href="http://wxnacy.com/2020/01/13/shell-substr/"/>
    <id>http://wxnacy.com/2020/01/13/shell-substr/</id>
    <published>2020-01-13T15:33:18.000Z</published>
    <updated>2020-01-14T02:08:45.401Z</updated>
    
    <content type="html"><![CDATA[<p>Shell 中截取字符串的方式也有很多种。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ str=https://wxnacy.com/2020/01/13/shell-substr</span><br></pre></td></tr></table></figure><p><strong>从索引处开始截取</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str:6&#125;</span></span><br><span class="line">//wxnacy.com/2020/01/13/shell-substr</span><br></pre></td></tr></table></figure><p><strong>截取指定长度</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str:6:8&#125;</span></span><br><span class="line">//wxnacy</span><br></pre></td></tr></table></figure><p><strong>从右边索引处开始截取</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str:0-6&#125;</span></span><br><span class="line">substr</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Shell 中截取字符串的方式也有很多种。&lt;/p&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://wxnacy.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell 获取单个文件大小的几种方式</title>
    <link href="http://wxnacy.com/2020/01/09/shell-file-size/"/>
    <id>http://wxnacy.com/2020/01/09/shell-file-size/</id>
    <published>2020-01-09T08:21:42.000Z</published>
    <updated>2020-01-09T08:28:38.561Z</updated>
    
    <content type="html"><![CDATA[<p>假设有文件 <code>wxnacy</code></p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#wc">wc</a></li><li><a href="#ls">ls</a></li><li><a href="#stat">stat</a></li></ul><!-- tocstop --></div><h2><span id="wc">wc</span><a href="#wc" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $(wc -c &lt; wxnacy)</span><br><span class="line">$ <span class="built_in">echo</span> $(cat wxnacy | wc -c)</span><br><span class="line">$ wc -c wxnacy | awk <span class="string">'&#123;print $1&#125;'</span></span><br></pre></td></tr></table></figure><h2><span id="ls">ls</span><a href="#ls" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l wxnacy | awk <span class="string">'&#123;print $5&#125;'</span></span><br></pre></td></tr></table></figure><h2><span id="stat">stat</span><a href="#stat" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">stat</span> wxnacy | awk <span class="string">'&#123;print $8&#125;'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假设有文件 &lt;code&gt;wxnacy&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://wxnacy.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 分组查找最后一条记录</title>
    <link href="http://wxnacy.com/2020/01/08/mysql-group-last-row/"/>
    <id>http://wxnacy.com/2020/01/08/mysql-group-last-row/</id>
    <published>2020-01-08T08:45:19.000Z</published>
    <updated>2020-01-09T08:53:15.142Z</updated>
    
    <content type="html"><![CDATA[<p>现在有一张表，以 <code>yt_channel_id</code> 为外键 id，不断的写进数据，每次的数据 <code>videos</code> 字段会不一样。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>现在想要批量每个 <code>yt_channel_id</code> 最新插入的数据，使用 <code>group</code> 配合 <code>max(create_ts)</code> 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ select yt_channel_id, videos, max(create_ts) from youtube_data group by yt_channel_id;</span><br></pre></td></tr></table></figure><p>不过 <code>5.7.19</code> 版本不可用，直接报错，<code>5.7.23</code> 及以上可用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在有一张表，以 &lt;code&gt;yt_channel_id&lt;/code&gt; 为外键 id，不断的写进数据，每次的数据 &lt;code&gt;videos&lt;/code&gt; 字段会不一样。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://wxnacy.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Shell 获取字符串长度的几种方式</title>
    <link href="http://wxnacy.com/2020/01/07/shell-string-length/"/>
    <id>http://wxnacy.com/2020/01/07/shell-string-length/</id>
    <published>2020-01-07T09:43:52.000Z</published>
    <updated>2020-01-09T09:49:03.782Z</updated>
    
    <content type="html"><![CDATA[<p>记录几种获取字符串长度的方式</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ str=wxnacy</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;#str&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -n 是去掉 \n 符号，不然计算的长度为 7</span></span><br><span class="line">$ <span class="built_in">echo</span> $(<span class="built_in">echo</span> -n <span class="variable">$str</span> | wc -c)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$str</span> | awk <span class="string">'&#123;print length($0)&#125;'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录几种获取字符串长度的方式&lt;/p&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://wxnacy.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>解决 Docker 日志文件太大的问题</title>
    <link href="http://wxnacy.com/2019/12/26/docker-log-too-big/"/>
    <id>http://wxnacy.com/2019/12/26/docker-log-too-big/</id>
    <published>2019-12-26T06:51:31.000Z</published>
    <updated>2019-12-26T07:33:06.774Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 在不重建容器的情况下，日志文件默认会一直追加，时间一长会逐渐占满服务器的硬盘的空间，内存消耗也会一直增加，本篇来了解一些控制日志文件的方法。</p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#qing-li-dan-ge-wen-jian">清理单个文件</a></li><li><a href="#yun-xing-shi-kong-zhi">运行时控制</a></li><li><a href="#quan-ju-pei-zhi">全局配置</a></li></ul><!-- tocstop --></div><p>Docker 的日志文件存在 <code>/var/lib/docker/containers</code> 目录中，通过下面的命令可以将日志文件夹根据升序的方式罗列出来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ sudo du -d1 -h /var/lib/docker/containers | sort -h</span><br><span class="line"></span><br><span class="line">28K     /var/lib/docker/containers/0db860afe94df368335c2e96f290275f4c396b996b4e8d22770b01baafd9982c</span><br><span class="line">36K     /var/lib/docker/containers/6ee184044661c436b44769d56c203f1fc296dbfe08f6ed4cf79aa6fb8cae6659</span><br><span class="line">44K     /var/lib/docker/containers/66c44231981fcb5ecd33bf0fc3390e71c5cbbabb839d79441eb3317b8500d551</span><br><span class="line">60K     /var/lib/docker/containers/bc4136199037e73d712614ef57de0915d294cbe51045d213f0d822d71a86cf2c</span><br><span class="line">344K    /var/lib/docker/containers/7bd3a179cf67b1537e0965c1d1f518420ac5d4cd151ecb75c37ada8c2347ca6b</span><br><span class="line">984K    /var/lib/docker/containers/6bd1f79f16b8b06f2bd203dd84443004ba08c150ac51d23fa620e8b2cbf4b773</span><br><span class="line">1.7M    /var/lib/docker/containers/a93a4275571b0033367f9cab8213c467b21a03c600e2203195640b5a5bc7f523</span><br><span class="line">4.4M    /var/lib/docker/containers/082564c5bdb19b642491b09419a69061122483c0f959a36eb186dd1fec53c163</span><br><span class="line">14M     /var/lib/docker/containers/05fc24ef7a14e31e4557c9881482d350cfb05f2f1cb870638de344581154ca01</span><br><span class="line">32M     /var/lib/docker/containers/5d70c82942083d16593670058aefed339cfe874c9027205b1e6eb8e569894d65</span><br><span class="line">129M    /var/lib/docker/containers/a88d104d20e5ee58ffeaeecbb559b3231c5b8c73ad1443538928ebeae4ff705c</span><br><span class="line">285M    /var/lib/docker/containers/b623602a667c0b31068563f244610a548ed055ff9802197f372ff436a294ab5c</span><br><span class="line">917M    /var/lib/docker/containers/3d71c509ab6aea34400d37f6c006914eed2cb05e6e6cd07b3ee03eb783dc367b</span><br><span class="line">1.4G    /var/lib/docker/containers</span><br></pre></td></tr></table></figure><p>有三种方式可以清理日志文件</p><h2><span id="qing-li-dan-ge-wen-jian">清理单个文件</span><a href="#qing-li-dan-ge-wen-jian" class="header-anchor"></a></h2><p>感觉哪个容器的日志太大就清理哪个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sh -c <span class="string">"cat /dev/null &gt; <span class="variable">$&#123;log_file&#125;</span>"</span></span><br></pre></td></tr></table></figure><p><code>${log_file}</code> 就是日志文件，可以通过 <code>find</code> 命令查找全部日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sudo find /var/lib/docker/containers -name *.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">/var/lib/docker/containers/3d71c509ab6aea34400d37f6c006914eed2cb05e6e6cd07b3ee03eb783dc367b/3d71c509ab6aea34400d37f6c006914eed2cb05e6e6cd07b3ee03eb783dc367b-json.log</span><br><span class="line">/var/lib/docker/containers/0db860afe94df368335c2e96f290275f4c396b996b4e8d22770b01baafd9982c/0db860afe94df368335c2e96f290275f4c396b996b4e8d22770b01baafd9982c-json.log</span><br><span class="line">/var/lib/docker/containers/bc4136199037e73d712614ef57de0915d294cbe51045d213f0d822d71a86cf2c/bc4136199037e73d712614ef57de0915d294cbe51045d213f0d822d71a86cf2c-json.log</span><br><span class="line">/var/lib/docker/containers/5d70c82942083d16593670058aefed339cfe874c9027205b1e6eb8e569894d65/5d70c82942083d16593670058aefed339cfe874c9027205b1e6eb8e569894d65-json.log</span><br><span class="line">/var/lib/docker/containers/6ee184044661c436b44769d56c203f1fc296dbfe08f6ed4cf79aa6fb8cae6659/6ee184044661c436b44769d56c203f1fc296dbfe08f6ed4cf79aa6fb8cae6659-json.log</span><br><span class="line">/var/lib/docker/containers/082564c5bdb19b642491b09419a69061122483c0f959a36eb186dd1fec53c163/082564c5bdb19b642491b09419a69061122483c0f959a36eb186dd1fec53c163-json.log</span><br><span class="line">/var/lib/docker/containers/b623602a667c0b31068563f244610a548ed055ff9802197f372ff436a294ab5c/b623602a667c0b31068563f244610a548ed055ff9802197f372ff436a294ab5c-json.log</span><br><span class="line">/var/lib/docker/containers/66c44231981fcb5ecd33bf0fc3390e71c5cbbabb839d79441eb3317b8500d551/66c44231981fcb5ecd33bf0fc3390e71c5cbbabb839d79441eb3317b8500d551-json.log</span><br><span class="line">/var/lib/docker/containers/a93a4275571b0033367f9cab8213c467b21a03c600e2203195640b5a5bc7f523/a93a4275571b0033367f9cab8213c467b21a03c600e2203195640b5a5bc7f523-json.log</span><br><span class="line">/var/lib/docker/containers/a88d104d20e5ee58ffeaeecbb559b3231c5b8c73ad1443538928ebeae4ff705c/a88d104d20e5ee58ffeaeecbb559b3231c5b8c73ad1443538928ebeae4ff705c-json.log</span><br><span class="line">/var/lib/docker/containers/6bd1f79f16b8b06f2bd203dd84443004ba08c150ac51d23fa620e8b2cbf4b773/6bd1f79f16b8b06f2bd203dd84443004ba08c150ac51d23fa620e8b2cbf4b773-json.log</span><br><span class="line">/var/lib/docker/containers/05fc24ef7a14e31e4557c9881482d350cfb05f2f1cb870638de344581154ca01/05fc24ef7a14e31e4557c9881482d350cfb05f2f1cb870638de344581154ca01-json.log</span><br><span class="line">/var/lib/docker/containers/7bd3a179cf67b1537e0965c1d1f518420ac5d4cd151ecb75c37ada8c2347ca6b/7bd3a179cf67b1537e0965c1d1f518420ac5d4cd151ecb75c37ada8c2347ca6b-json.log</span><br></pre></td></tr></table></figure><p>或者查看具体容器名称的日志位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect --format=<span class="string">'&#123;&#123;.LogPath&#125;&#125;'</span> redis</span><br><span class="line">/var/lib/docker/containers/6ee184044661c436b44769d56c203f1fc296dbfe08f6ed4cf79aa6fb8cae6659/6ee184044661c436b44769d56c203f1fc296dbfe08f6ed4cf79aa6fb8cae6659-json.log</span><br></pre></td></tr></table></figure><p>这样只是解决燃眉之急，并不是长久之计，最好是创建容器时就控制日志的大小.</p><h2><span id="yun-xing-shi-kong-zhi">运行时控制</span><a href="#yun-xing-shi-kong-zhi" class="header-anchor"></a></h2><p>启动容器时，我们可以通过参数来控制日志的文件个数和单个文件的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># max-size 最大数值</span></span><br><span class="line"><span class="comment"># max-file 最大日志数</span></span><br><span class="line">$ docker run -it --<span class="built_in">log</span>-opt max-size=10m --<span class="built_in">log</span>-opt max-file=3 redis</span><br></pre></td></tr></table></figure><p>一两个容器还好，但是如果有很多容器需要管理，这样就很不方便了，最好还是可以统一管理。</p><h2><span id="quan-ju-pei-zhi">全局配置</span><a href="#quan-ju-pei-zhi" class="header-anchor"></a></h2><p>创建或修改文件 <code>/etc/docker/daemon.json</code>，并增加以下配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"log-driver"</span>:<span class="string">"json-file"</span>,</span><br><span class="line">    <span class="attr">"log-opts"</span>:&#123;</span><br><span class="line">        <span class="attr">"max-size"</span> :<span class="string">"50m"</span>,<span class="attr">"max-file"</span>:<span class="string">"1"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后重启 Docker 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>不过已存在的容器不会生效，需要重建才可以</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 在不重建容器的情况下，日志文件默认会一直追加，时间一长会逐渐占满服务器的硬盘的空间，内存消耗也会一直增加，本篇来了解一些控制日志文件的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://wxnacy.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg 常用的命令</title>
    <link href="http://wxnacy.com/2019/12/09/ffmpeg-shell/"/>
    <id>http://wxnacy.com/2019/12/09/ffmpeg-shell/</id>
    <published>2019-12-09T15:04:16.000Z</published>
    <updated>2020-02-22T08:29:33.868Z</updated>
    
    <content type="html"><![CDATA[<p>记录 FFmpeg 的一些命令</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p><strong>m3u8 格式文件转为 mp4</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -i <span class="string">"https://xxxx.com/20191005/WofkPuP1/1200kb/hls/index.m3u8"</span> -bsf:a aac_adtstoasc -vcodec copy -c copy -crf 50 target.mp4</span><br></pre></td></tr></table></figure><p><strong>mkv 格式转为 mp4</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -i input.mkv -c copy -strict -2 output.mp4</span><br></pre></td></tr></table></figure><p><strong>分割视频</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -ss 开始时间（可选）</span></span><br><span class="line"><span class="comment"># -t 结束时间（可选）</span></span><br><span class="line"><span class="comment"># source.mp4 视频源</span></span><br><span class="line"><span class="comment"># target.mp4 目标名称</span></span><br><span class="line">$ ffmpeg -ss 00:12:00 -t 00:56:00 -i source.mp4 -vcodec copy -acodec copy target.mp4</span><br></pre></td></tr></table></figure><p><strong>将字幕文件烧进视频文件中</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -i source.mkv -vf subtitles=source.srt output.mkv</span><br></pre></td></tr></table></figure><p><strong>将多个视频无损的合并为一个</strong></p><p>首先在视频目录下准备一个文件 <code>filename.txt</code> 内容为 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">file 05-wodedipan.mkv</span><br><span class="line">file 05-yuanyouhui.mkv</span><br><span class="line">file 05-luanwuchunqiu.mkv</span><br><span class="line">file 06-langmanshouji.mkv</span><br><span class="line">file 06-lansefengbao.mkv</span><br><span class="line">file 06-piaoyi.mkv</span><br><span class="line">file 02-duibuqi.mkv</span><br><span class="line">file 03-anhao.mkv</span><br></pre></td></tr></table></figure><p>然后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ffmpeg -f concat -i filelist.txt -c copy output.mkv</span><br></pre></td></tr></table></figure><p><strong><em>注意 filename.txt 中的文件名不能有中文</em></strong></p><p><code>filename.txt</code> 可以使用命令行来直接生成，先把视频都放在同一文件夹下然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ll | awk <span class="string">'&#123;print "file" $9&#125;'</span> &gt; filelist.txt</span><br></pre></td></tr></table></figure><p>一般文件名我们都习惯取中文名，这里改成英文名也可以借助程序来批量修改。</p><p>这里需要用到 <code>Python</code> 来写一个脚本</p><p>首先下载依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pypinyin</span><br></pre></td></tr></table></figure><p>然后在视频目录下运行该文件即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: wxnacy(wxnacy@gmail.com)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pypinyin <span class="keyword">import</span> lazy_pinyin</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hans2py</span><span class="params">(hans)</span>:</span></span><br><span class="line">    <span class="string">'''汉字转拼音'''</span></span><br><span class="line">    hans = hans.lower()</span><br><span class="line">    hans = hans.split()</span><br><span class="line">    all_words = lazy_pinyin(hans)</span><br><span class="line">    <span class="keyword">return</span> all_words</span><br><span class="line"></span><br><span class="line">dirs = os.listdir()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> dirs:</span><br><span class="line">    pin = hans2py(d)</span><br><span class="line">    os.rename(d, <span class="string">''</span>.join(pin))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录 FFmpeg 的一些命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="ffmpeg" scheme="http://wxnacy.com/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 随机获取表中一条数据</title>
    <link href="http://wxnacy.com/2019/12/05/mysql-rand/"/>
    <id>http://wxnacy.com/2019/12/05/mysql-rand/</id>
    <published>2019-12-05T08:58:19.000Z</published>
    <updated>2019-12-05T09:42:24.952Z</updated>
    
    <content type="html"><![CDATA[<p>现在有个需求是从表中随机取出一条数据，除了全部拿出数据用程序来随机外，还可以使用数据库的 <code>RAND()</code> 函数。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p><code>RAND()</code> 函数可以返回一个 <code>0~1</code> 的随机数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; select RAND();</span><br><span class="line">+--------------------+</span><br><span class="line">| RAND()             |</span><br><span class="line">+--------------------+</span><br><span class="line">| 0.8503168074882745 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">&gt; select RAND();</span><br><span class="line">+--------------------+</span><br><span class="line">| RAND()             |</span><br><span class="line">+--------------------+</span><br><span class="line">| 0.6016649581507453 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><code>RAND()</code> 还可以给一个数字参数，以该数字作为基准来生成一个可重复的随机数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; select RAND(5);</span><br><span class="line">+---------------------+</span><br><span class="line">| RAND(5)             |</span><br><span class="line">+---------------------+</span><br><span class="line">| 0.40613597483014313 |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">&gt; select RAND(5);</span><br><span class="line">+---------------------+</span><br><span class="line">| RAND(5)             |</span><br><span class="line">+---------------------+</span><br><span class="line">| 0.40613597483014313 |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>官方定义的该参数的取值范围是 <code>0~1</code>，但实测超过该范围也可以得到结果。</p><p>如果想要得到一个随机的整数，则可以运用数学运算和 <code>FLOOR()</code> 函数，比如想要一个 <code>[10,20]</code> 区间的随机数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; select FLOOR(10 + (RAND() * 11));</span><br><span class="line">+---------------------------+</span><br><span class="line">| FLOOR(10 + (RAND() * 11)) |</span><br><span class="line">+---------------------------+</span><br><span class="line">|                        18 |</span><br><span class="line">+---------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>最后回来点一下题，如何获取表中的随机数据？</p><p>这里需要配合排序语句 <code>ORDER BY RAND()</code> 来使用，可以获取一个按照随机排序的列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; SELECT * FROM USER ORDER BY RAND();</span><br><span class="line">+----+--------+----------+--------------+--------------+---------------------+---------------------+</span><br><span class="line">| id | name   | password | ext_property | is_available | create_ts           | update_ts           |</span><br><span class="line">+----+--------+----------+--------------+--------------+---------------------+---------------------+</span><br><span class="line">|  4 | spring |          | &#123;&#125;           |            1 | 2018-03-02 11:04:11 | 2018-03-02 11:04:11 |</span><br><span class="line">|  1 | wxnacy |          | &#123;&#125;           |            1 | 2018-03-02 11:04:11 | 2018-03-02 11:04:11 |</span><br><span class="line">|  2 | win    |          | &#123;&#125;           |            1 | 2018-03-02 11:04:11 | 2018-03-02 11:04:11 |</span><br><span class="line">|  3 | xiao   |          | &#123;&#125;           |            1 | 2018-03-02 11:04:11 | 2018-03-02 11:04:11 |</span><br><span class="line">|  5 | 温     |          | &#123;&#125;           |            1 | 2018-03-02 11:04:11 | 2018-03-02 11:04:11 |</span><br><span class="line">+----+--------+----------+--------------+--------------+---------------------+---------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>最后再配合 <code>LIMIT</code> 来获取随机的一条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; SELECT * FROM USER ORDER BY RAND() LIMIT 1;</span><br><span class="line">+----+--------+----------+--------------+--------------+---------------------+---------------------+</span><br><span class="line">| id | name   | password | ext_property | is_available | create_ts           | update_ts           |</span><br><span class="line">+----+--------+----------+--------------+--------------+---------------------+---------------------+</span><br><span class="line">|  2 | win    |          | &#123;&#125;           |            1 | 2018-03-02 11:04:11 | 2018-03-02 11:04:11 |</span><br><span class="line">+----+--------+----------+--------------+--------------+---------------------+---------------------+</span><br><span class="line">1 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在有个需求是从表中随机取出一条数据，除了全部拿出数据用程序来随机外，还可以使用数据库的 &lt;code&gt;RAND()&lt;/code&gt; 函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://wxnacy.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 丢失头信息的解决方法</title>
    <link href="http://wxnacy.com/2019/11/19/nginx-loss-headers/"/>
    <id>http://wxnacy.com/2019/11/19/nginx-loss-headers/</id>
    <published>2019-11-19T13:50:46.000Z</published>
    <updated>2019-11-19T14:02:21.202Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做 web 框架上的一些调整，在本地测试一个接口时发现莫名其妙的报错，调试发现是 Nginx 丢掉了带有下划线的头信息。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>对比了线上环境的配置文件，发现了确实有个配置不同，缺失了下面的部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    underscores_in_headers on;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nginx 默认情况下配置 <code>underscores_in_headers off;</code>，加上上面的配置即可正常请求接口。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做 web 框架上的一些调整，在本地测试一个接口时发现莫名其妙的报错，调试发现是 Nginx 丢掉了带有下划线的头信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="http://wxnacy.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 字符串填充</title>
    <link href="http://wxnacy.com/2019/11/12/js-padstart/"/>
    <id>http://wxnacy.com/2019/11/12/js-padstart/</id>
    <published>2019-11-12T13:59:29.000Z</published>
    <updated>2019-11-12T14:16:43.519Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中字符串填充可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart" target="_blank" rel="noopener">String.prototype.padStart()</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd" target="_blank" rel="noopener">String.prototype.padEnd()</a></p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>以 <code>padStart()</code> 为例，效果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">10</span>);         <span class="comment">// "       abc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">10</span>, <span class="string">"foo"</span>);  <span class="comment">// "foofoofabc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">6</span>,<span class="string">"123465"</span>); <span class="comment">// "123abc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">8</span>, <span class="string">"0"</span>);     <span class="comment">// "00000abc"</span></span><br><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">1</span>);          <span class="comment">// "abc"</span></span><br></pre></td></tr></table></figure><p>在浏览器的支持版本如下</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/psbs.png" alt="1"></p><p>对于不知道的版本，我们可以自己加上这个方法，在代码运行前执行如下代码即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/uxitten/polyfill/blob/master/string.polyfill.js</span></span><br><span class="line"><span class="comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart</span></span><br><span class="line"><span class="keyword">if</span> (!String.prototype.padStart) &#123;</span><br><span class="line">    String.prototype.padStart = <span class="function">function <span class="title">padStart</span><span class="params">(targetLength, padString)</span> </span>&#123;</span><br><span class="line">        targetLength = targetLength &gt;&gt; <span class="number">0</span>; <span class="comment">//truncate if number, or convert non-number to 0;</span></span><br><span class="line">        padString = String(typeof padString !== <span class="string">'undefined'</span> ? padString : <span class="string">' '</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.length &gt;= targetLength) &#123;</span><br><span class="line">            <span class="keyword">return</span> String(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            targetLength = targetLength - <span class="keyword">this</span>.length;</span><br><span class="line">            <span class="keyword">if</span> (targetLength &gt; padString.length) &#123;</span><br><span class="line">                padString += padString.repeat(targetLength / padString.length); <span class="comment">//append to original to ensure we are longer than needed</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> padString.slice(<span class="number">0</span>, targetLength) + String(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>padEnd()</code> 的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/uxitten/polyfill/blob/master/string.polyfill.js</span></span><br><span class="line"><span class="comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd</span></span><br><span class="line"><span class="keyword">if</span> (!String.prototype.padEnd) &#123;</span><br><span class="line">    String.prototype.padEnd = <span class="function">function <span class="title">padEnd</span><span class="params">(targetLength,padString)</span> </span>&#123;</span><br><span class="line">        targetLength = targetLength&gt;&gt;<span class="number">0</span>; <span class="comment">//floor if number or convert non-number to 0;</span></span><br><span class="line">        padString = String((typeof padString !== <span class="string">'undefined'</span> ? padString : <span class="string">' '</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.length &gt; targetLength) &#123;</span><br><span class="line">            <span class="keyword">return</span> String(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            targetLength = targetLength-<span class="keyword">this</span>.length;</span><br><span class="line">            <span class="keyword">if</span> (targetLength &gt; padString.length) &#123;</span><br><span class="line">                padString += padString.repeat(targetLength/padString.length); <span class="comment">//append to original to ensure we are longer than needed</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> String(<span class="keyword">this</span>) + padString.slice(<span class="number">0</span>,targetLength);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart" target="_blank" rel="noopener">String.prototype.padStart()</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 JavaScript 中字符串填充可以使用 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;String.prototype.padStart()&lt;/a&gt; 和 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;String.prototype.padEnd()&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://wxnacy.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Mac 使用 vmware 装机报错 /dev/vmmon：Broken pipe</title>
    <link href="http://wxnacy.com/2019/10/28/mac-vmware-error-broken-pipe/"/>
    <id>http://wxnacy.com/2019/10/28/mac-vmware-error-broken-pipe/</id>
    <published>2019-10-28T00:14:44.000Z</published>
    <updated>2019-10-28T00:14:44.357Z</updated>
    
    <content type="html"><![CDATA[<p>好久不用虚拟机了，最近想装个 win10 调试程序，结果各种问题，记录下以备后用。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>在加载镜像后，启动前一直莫名报这个错。</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/vm-error1.png" alt="1"></p><p>问题出在 Mac 禁止了 VMware 的一些功能，可以进入 <code>系统偏好设置 -&gt; 安全性与隐私 -&gt; 通用</code>，然后点击下方的允许即可。</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/vm-error2.png" alt="2"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久不用虚拟机了，最近想装个 win10 调试程序，结果各种问题，记录下以备后用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mac" scheme="http://wxnacy.com/tags/mac/"/>
    
      <category term="vmware" scheme="http://wxnacy.com/tags/vmware/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 报警告 the &quot;ssl&quot; directive is deprecated</title>
    <link href="http://wxnacy.com/2019/10/17/nginx-the-ssl-depreated/"/>
    <id>http://wxnacy.com/2019/10/17/nginx-the-ssl-depreated/</id>
    <published>2019-10-17T06:51:04.000Z</published>
    <updated>2019-10-17T09:28:41.467Z</updated>
    
    <content type="html"><![CDATA[<p>一直用的一个配置文件，在用 docker 启动的 openresty 时，突然报了一堆警告</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx: [warn] the <span class="string">"ssl"</span> directive is deprecated, use the <span class="string">"listen ... ssl"</span> directive instead <span class="keyword">in</span> /usr/<span class="built_in">local</span>/openresty/nginx/conf/conf.d/biz.conf:4</span><br></pre></td></tr></table></figure><p>因为只是警告，所以程序可以正常运行，但每次都报还是很闹心，经查后发现还是版本问题。</p><p>在升级<a href="http://nginx.org/en/CHANGES" target="_blank" rel="noopener">日志</a>中是这样说的</p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/nginx-ssl-deprecated.png" alt="1"></p><p><code>ssl on;</code> 的用法已经过时了，现在 <code>https</code> 需要使用 <code>listen ... ssl</code> 格式来标记。</p><p>就像这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直用的一个配置文件，在用 docker 启动的 openresty 时，突然报了一堆警告&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="http://wxnacy.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>世界货币查询文档</title>
    <link href="http://wxnacy.com/2019/09/22/world-currency/"/>
    <id>http://wxnacy.com/2019/09/22/world-currency/</id>
    <published>2019-09-22T14:04:14.000Z</published>
    <updated>2019-09-22T14:04:14.446Z</updated>
    
    <content type="html"><![CDATA[<p>因为工作需要了解一些外币信息的知识，收集一些网站一遍日常查询。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>两个国外的网站货币名称、简称和符号是比较全的。</p><p><a href="http://fx.sauder.ubc.ca/currency_table.html" target="_blank" rel="noopener">http://fx.sauder.ubc.ca/currency_table.html</a></p><p><a href="https://justforex.com/cn/education/currencies" target="_blank" rel="noopener">https://justforex.com/cn/education/currencies</a></p><p>但是因为是全英文的，所以查询不会方便，另外还有两个中文的可共查询</p><p><a href="https://fxtop.com/cn/countries-currencies.php" target="_blank" rel="noopener">https://fxtop.com/cn/countries-currencies.php</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为工作需要了解一些外币信息的知识，收集一些网站一遍日常查询。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://wxnacy.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>获取 youtube 视频屏蔽地区</title>
    <link href="http://wxnacy.com/2019/09/19/youtube-block-region/"/>
    <id>http://wxnacy.com/2019/09/19/youtube-block-region/</id>
    <published>2019-09-19T05:55:13.000Z</published>
    <updated>2019-09-19T05:55:13.679Z</updated>
    
    <content type="html"><![CDATA[<p>记得前几年 youtube 视频网页内是包含该视频的允许和屏蔽播放的区域的，但是最近需要使用时发现怎么也找不到了，估计是油管因为一些原因做了隐藏。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>先是 google 了一些方法，发现了一个网站可以查询视频的屏蔽地区，只需要输入网址或者 id 就可以了</p><p>网址：<a href="https://polsy.org.uk/stuff/ytrestrict.cgi" target="_blank" rel="noopener">https://polsy.org.uk/stuff/ytrestrict.cgi</a></p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/yt-polsy_1090.png" alt="1"></p><p>当做网页工具还是挺不错的，对它的结果网页做解析也比较简单，但是有些视频会查询不出来，所以在程序中还是不推荐使用。</p><p>转了一圈，发现官方就有相关的 API，记得以前是有一些使用限制的，现在再找并没有发现什么限制，只有每天的调用次数限制，大概 100000 次，一般使用也足够了</p><p>网址：<a href="https://developers.google.com/youtube/v3/docs/videos" target="_blank" rel="noopener">https://developers.google.com/youtube/v3/docs/videos</a></p><p><img src="https://raw.githubusercontent.com/wxnacy/image/master/blog/yt-api-videos_823.png" alt="2"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记得前几年 youtube 视频网页内是包含该视频的允许和屏蔽播放的区域的，但是最近需要使用时发现怎么也找不到了，估计是油管因为一些原因做了隐藏。&lt;/p&gt;
    
    </summary>
    
    
      <category term="youtube" scheme="http://wxnacy.com/tags/youtube/"/>
    
  </entry>
  
</feed>
