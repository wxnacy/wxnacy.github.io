<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>温欣爸比的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wxnacy.com/"/>
  <updated>2019-01-14T09:59:58.541Z</updated>
  <id>http://wxnacy.com/</id>
  
  <author>
    <name>温欣爸比</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux ab 使用 localhost 报错</title>
    <link href="http://wxnacy.com/2019/01/14/ab-localhost-error/"/>
    <id>http://wxnacy.com/2019/01/14/ab-localhost-error/</id>
    <published>2019-01-14T07:34:36.000Z</published>
    <updated>2019-01-14T09:59:58.541Z</updated>
    
    <content type="html"><![CDATA[<p>使用 ab 测试本地接口时报错<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --><p></div><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1826891 $&gt;</div><div class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</div><div class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</div><div class="line"></div><div class="line">Benchmarking localhost (be patient)...</div><div class="line">Test aborted after 10 failures</div><div class="line"></div><div class="line">apr_socket_connect(): Invalid argument (22)</div></pre></td></tr></table></figure></p><p>原因在于它无法识别 <code>localhost</code> 地址替换为 <code>127.0.0.1</code> 即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 ab 测试本地接口时报错&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://wxnacy.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>重新学 Java 系列：Maven 下载的 jar 包去哪了</title>
    <link href="http://wxnacy.com/2019/01/11/java-renew-maven-where-jar/"/>
    <id>http://wxnacy.com/2019/01/11/java-renew-maven-where-jar/</id>
    <published>2019-01-11T10:18:45.000Z</published>
    <updated>2019-01-11T10:18:45.513Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这个是一个系列阅读，关于为什么重新学习，我在文章 <a href="/2018/12/29/java-renew-why/">重新学 Java 系列：新系列、新开始</a>(<a href="https://wxnacy.com/2018/12/29/java-renew-why/">https://wxnacy.com/2018/12/29/java-renew-why/</a>) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。</p></blockquote><a id="more"></a><div class="toc"><br><br><!-- toc --><ul><li><a href="#ben-di-cang-ku">本地仓库</a></li><li><a href="#an-zhuang-ben-di-xiang-mu-dao-cang-ku">安装本地项目到仓库</a></li></ul><!-- tocstop --><p></div></p><h2><span id="ben-di-cang-ku">本地仓库</span><a href="#ben-di-cang-ku" class="header-anchor"></a></h2><p>在 Maven 项目中，<code>pom.xml</code> 文件中的 <code>dependencies</code> 节点为项目需要的数据包，那编<br>译运行时 jar 包都下载到哪里呢？</p><p>Maven 有本地的仓库，地址默认为 <code>~/.m2/repository</code></p><p>进入目录会发现，本地所以项目的依赖包都以包名加版本号的形式存放在里边，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/.m2/repository/org/jdom/jdom/1.1</div><div class="line">$ tree</div><div class="line">.</div><div class="line">├── _remote.repositories</div><div class="line">├── jdom-1.1.jar</div><div class="line">├── jdom-1.1.jar.sha1</div><div class="line">├── jdom-1.1.pom</div><div class="line">└── jdom-1.1.pom.sha1</div><div class="line"></div><div class="line">0 directories, 5 files</div></pre></td></tr></table></figure><p>本地仓库的位置可以通过配置文件修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /usr/<span class="built_in">local</span>/Cellar/maven/3.6.0/libexec/conf/settings.xml</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;localRepository&gt;/path/to/<span class="built_in">local</span>/repo&lt;/localRepository&gt;</div></pre></td></tr></table></figure><h2><span id="an-zhuang-ben-di-xiang-mu-dao-cang-ku">安装本地项目到仓库</span><a href="#an-zhuang-ben-di-xiang-mu-dao-cang-ku" class="header-anchor"></a></h2><p>假如我们写完一个项目，希望它可以像其他 jar 包一样，可以在其他项目中使用，首先我们可以先安装到本地仓库。</p><p>根目录下执行安装命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mvn install</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个是一个系列阅读，关于为什么重新学习，我在文章 &lt;a href=&quot;/2018/12/29/java-renew-why/&quot;&gt;重新学 Java 系列：新系列、新开始&lt;/a&gt;(&lt;a href=&quot;https://wxnacy.com/2018/12/29/java-renew-why/&quot;&gt;https://wxnacy.com/2018/12/29/java-renew-why/&lt;/a&gt;) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>重新学 Java 系列：Maven 快速入门</title>
    <link href="http://wxnacy.com/2019/01/10/java-renew-maven-start/"/>
    <id>http://wxnacy.com/2019/01/10/java-renew-maven-start/</id>
    <published>2019-01-10T02:24:40.000Z</published>
    <updated>2019-01-10T02:24:40.319Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这个是一个系列阅读，关于为什么重新学习，我在文章 <a href="/2018/12/29/java-renew-why/">重新学 Java 系列：新系列、新开始</a>(<a href="https://wxnacy.com/2018/12/29/java-renew-why/">https://wxnacy.com/2018/12/29/java-renew-why/</a>) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。</p></blockquote><a id="more"></a><div class="toc"><br><br><!-- toc --><ul><li><a href="#xia-zai">下载</a></li><li><a href="#chuang-jian-xiang-mu">创建项目</a></li><li><a href="#yun-xing">运行</a></li></ul><!-- tocstop --><p></div><br>如果早几年，可能还会有公司不用 Maven 管理项目，还会有人不知道 Maven。但是现在如果你还不知道 Maven，那你跟门外汉差不多了。</p><p>Maven 是 Java 最好的项目管理软件，就像 npm 对于 Node 一样重要。</p><p>我们先来快速了解下，如何使用 Maven 快速创建一个项目。</p><h2><span id="xia-zai">下载</span><a href="#xia-zai" class="header-anchor"></a></h2><p><strong>MacOS</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install Maven</div></pre></td></tr></table></figure><p><strong><em>需要：Java &gt;= 1.7</em></strong></p><p>安装好后查看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ mvn --version</div><div class="line">Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-25T02:41:47+08:00)</div><div class="line">Maven home: /usr/<span class="built_in">local</span>/Cellar/maven/3.6.0/libexec</div><div class="line">Java version: 11.0.1, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home</div><div class="line">Default locale: zh_US_<span class="comment">#Hans, platform encoding: UTF-8</span></div><div class="line">OS name: <span class="string">"mac os x"</span>, version: <span class="string">"10.14.2"</span>, arch: <span class="string">"x86_64"</span>, family: <span class="string">"mac"</span></div></pre></td></tr></table></figure><h2><span id="chuang-jian-xiang-mu">创建项目</span><a href="#chuang-jian-xiang-mu" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ mvn archetype:generate \</div><div class="line">    -DgroupId=com.wxnacy.app \</div><div class="line">    -DartifactId=<span class="built_in">test</span>-app \</div><div class="line">    -DarchetypeArtifactId=maven-archetype-quickstart \</div><div class="line">    -DarchetypeVersion=1.4 \</div><div class="line">    -DinteractiveMode=<span class="literal">false</span> \</div></pre></td></tr></table></figure><p>如果你的电脑第一次运行该命令，可能需要一些时间，因为要下载一些必要包。</p><p>创建完成后，会出现一个目录 <code>test-app</code>，即为项目目录。</p><p>进入目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span>-app</div></pre></td></tr></table></figure><p><strong>查看项目结构</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ tree</div><div class="line">.</div><div class="line">├── pom.xml</div><div class="line">└── src</div><div class="line">    ├── main</div><div class="line">    │   └── java</div><div class="line">    │       └── com</div><div class="line">    │           └── wxnacy</div><div class="line">    │               └── app</div><div class="line">    │                   └── App.java</div><div class="line">    └── <span class="built_in">test</span></div><div class="line">        └── java</div><div class="line">            └── com</div><div class="line">                └── wxnacy</div><div class="line">                    └── app</div><div class="line">                        └── AppTest.java</div><div class="line"></div><div class="line">11 directories, 3 files</div></pre></td></tr></table></figure><p><code>src/main/java</code> 目录中存放源代码，<code>src/test/java</code> 目录中存在测试代码，<code>pom.xml</code> 文件为项目数据模型。具体内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wxnacy.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>test-app<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure><p>内容很多，其实很简单，默认状态下，<code>pluginManagement</code> 节点中的内容为默认插件，已经集成在父 pom 中，所以删除掉也不影响。<code>dependencies</code> 节点为项目需要的数据包。</p><h2><span id="yun-xing">运行</span><a href="#yun-xing" class="header-anchor"></a></h2><p><strong>编译</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mvn compile</div></pre></td></tr></table></figure><p>随后根目录下会生成 <code>target</code> 文件夹，class 文件都存放在 <code>target/classes</code> 文件夹中</p><p><strong>运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ java -cp target/classes com.wxnacy.app.App</div><div class="line">Hello World</div></pre></td></tr></table></figure><p><strong>打包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mvn package</div></pre></td></tr></table></figure><p>随后会在 <code>target</code> 文件夹中生成 <code>test-app-1.0-SNAPSHOT.jar</code> 文件。</p><p><strong>运行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ java -cp target/<span class="built_in">test</span>-app-1.0-SNAPSHOT.jar com.wxnacy.app.App</div><div class="line">Hello World</div></pre></td></tr></table></figure><ul><li><a href="https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html" target="_blank" rel="external">Maven in 5 Minutes</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个是一个系列阅读，关于为什么重新学习，我在文章 &lt;a href=&quot;/2018/12/29/java-renew-why/&quot;&gt;重新学 Java 系列：新系列、新开始&lt;/a&gt;(&lt;a href=&quot;https://wxnacy.com/2018/12/29/java-renew-why/&quot;&gt;https://wxnacy.com/2018/12/29/java-renew-why/&lt;/a&gt;) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>重新学 Java 系列：简单解析 xml 文件的方式</title>
    <link href="http://wxnacy.com/2019/01/09/java-renew-parse-xml/"/>
    <id>http://wxnacy.com/2019/01/09/java-renew-parse-xml/</id>
    <published>2019-01-09T06:19:07.000Z</published>
    <updated>2019-01-09T09:12:49.372Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这个是一个系列阅读，关于为什么重新学习，我在文章 <a href="/2018/12/29/java-renew-why/">重新学 Java 系列：新系列、新开始</a>(<a href="https://wxnacy.com/2018/12/29/java-renew-why/">https://wxnacy.com/2018/12/29/java-renew-why/</a>) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。</p></blockquote><a id="more"></a><div class="toc"><br><br><!-- toc --><!-- tocstop --><p></div><br>现在公认的最好的文本解析格式为 JSON，XML 已经是过时的标准，但是不可避免的一些历史悠久的项目还在用，比如微信的部分 api，比如 Maven 的 pom.xml 文件。</p><p>Java 有很多解析 XML 格式的包，不过我想关注的是最简单的原生方式。</p><p>优先准备一个文件 <code>Stocks.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">stocks</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">stock</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>Citibank<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">price</span>&gt;</span>100<span class="tag">&lt;/<span class="name">price</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">quantity</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">quantity</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">stock</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">stock</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>Axis bank<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">price</span>&gt;</span>90<span class="tag">&lt;/<span class="name">price</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">quantity</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">quantity</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">stock</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">stocks</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>必备包</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</div><div class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</div><div class="line"><span class="keyword">import</span> org.w3c.dom.Document;</div><div class="line"><span class="keyword">import</span> org.w3c.dom.Element;</div><div class="line"><span class="keyword">import</span> org.w3c.dom.Node;</div><div class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</div></pre></td></tr></table></figure><p><strong>解析 DOM</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">File stocks = <span class="keyword">new</span> File(<span class="string">"Stocks.xml"</span>);</div><div class="line">DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();</div><div class="line">DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();</div><div class="line">Document doc = dBuilder.parse(stocks);</div><div class="line">doc.getDocumentElement().normalize();</div></pre></td></tr></table></figure><p><strong>获取根节点名</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">doc.getDocumentElement().getNodeName();</div></pre></td></tr></table></figure><p><strong>获取节点列表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NodeList nodes = doc.getElementsByTagName(<span class="string">"stock"</span>);</div></pre></td></tr></table></figure><p><strong>遍历节点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodes.getLength(); i++) &#123;</div><div class="line">    Node node = nodes.item(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>获取原件内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (node.getNodeType() == Node.ELEMENT_NODE) &#123;</div><div class="line">    Element element = (Element) node;</div><div class="line">    NodeList nodes = element.getElementsByTagName(<span class="string">"symbol"</span>).item(<span class="number">0</span>).getChildNodes();</div><div class="line">    Node node = (Node) nodes.item(<span class="number">0</span>);</div><div class="line">    System.out.println(node.getNodeValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>完整代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</div><div class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</div><div class="line"><span class="keyword">import</span> org.w3c.dom.Document;</div><div class="line"><span class="keyword">import</span> org.w3c.dom.Element;</div><div class="line"><span class="keyword">import</span> org.w3c.dom.Node;</div><div class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DOMExampleJava</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            File stocks = <span class="keyword">new</span> File(<span class="string">"Stocks.xml"</span>);</div><div class="line">            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();</div><div class="line">            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();</div><div class="line">            Document doc = dBuilder.parse(stocks);</div><div class="line">            doc.getDocumentElement().normalize();</div><div class="line"></div><div class="line">                System.out.println(<span class="string">"root of xml file "</span> + doc.getDocumentElement().getNodeName());</div><div class="line">            NodeList nodes = doc.getElementsByTagName(<span class="string">"stock"</span>);</div><div class="line">            System.out.println(<span class="string">"=========================="</span>);</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodes.getLength(); i++) &#123;</div><div class="line">                Node node = nodes.item(i);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (node.getNodeType() == Node.ELEMENT_NODE) &#123;</div><div class="line">                    Element element = (Element) node;</div><div class="line">                    System.out.println(<span class="string">"Stock Symbol: "</span> + getValue(<span class="string">"symbol"</span>, element));</div><div class="line">                    System.out.println(<span class="string">"Stock Price: "</span> + getValue(<span class="string">"price"</span>, element));</div><div class="line">                    System.out.println(<span class="string">"Stock Quantity: "</span> + getValue(<span class="string">"quantity"</span>, element));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            ex.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(String tag, Element element)</span> </span>&#123;</div><div class="line">        NodeList nodes = element.getElementsByTagName(tag).item(<span class="number">0</span>).getChildNodes();</div><div class="line">        Node node = (Node) nodes.item(<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> node.getNodeValue();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><a href="https://javarevisited.blogspot.com/2011/12/parse-xml-file-in-java-example-tutorial.html" target="_blank" rel="external">How to Parse or Read XML File in Java &gt;&gt; XML Tutorial Example</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个是一个系列阅读，关于为什么重新学习，我在文章 &lt;a href=&quot;/2018/12/29/java-renew-why/&quot;&gt;重新学 Java 系列：新系列、新开始&lt;/a&gt;(&lt;a href=&quot;https://wxnacy.com/2018/12/29/java-renew-why/&quot;&gt;https://wxnacy.com/2018/12/29/java-renew-why/&lt;/a&gt;) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>重新学 Java 系列：获取 jar 包中类名列表</title>
    <link href="http://wxnacy.com/2019/01/08/java-jar-class-list/"/>
    <id>http://wxnacy.com/2019/01/08/java-jar-class-list/</id>
    <published>2019-01-08T06:55:53.000Z</published>
    <updated>2019-01-09T09:13:18.102Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这个是一个系列阅读，关于为什么重新学习，我在文章 <a href="/2018/12/29/java-renew-why/">重新学 Java 系列：新系列、新开始</a>(<a href="https://wxnacy.com/2018/12/29/java-renew-why/">https://wxnacy.com/2018/12/29/java-renew-why/</a>) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。</p></blockquote><a id="more"></a><div class="toc"><br><br><!-- toc --><!-- tocstop --><p></div><br>最近想要自己写一下 Vim 中 Java 代码的自动补全，涉及到 <code>import</code> 部分的自动导入，记录下关键步骤。</p><p>想要做自动导入，首先需要知道依赖包中类名的列表，也就是需要反解出 jar 中 class 列表。</p><p>这里需要 <code>java.util.jar</code> 包中的几个类，直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Enumeration;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.jar.JarEntry;</div><div class="line"><span class="keyword">import</span> java.util.jar.JarFile;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by wxnacy</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassList</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line"></div><div class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            JarFile jarFile = <span class="keyword">new</span> JarFile(<span class="string">"/Users/wxnacy/.m2/repository/com/alibaba/fastjson/1.1.34/fastjson-1.1.34.jar"</span>);</div><div class="line">            Enumeration enu = jarFile.entries();</div><div class="line">            <span class="keyword">while</span> (enu.hasMoreElements()) &#123;</div><div class="line">                JarEntry jarEntry = (JarEntry) enu.nextElement();</div><div class="line">                String name = jarEntry.getName();</div><div class="line">                <span class="comment">// 过滤出 class 文件</span></div><div class="line">                <span class="keyword">if</span> (name.endsWith(<span class="string">".class"</span>) &amp;&amp; name.indexOf(<span class="string">"$"</span>) == -<span class="number">1</span> ) &#123;</div><div class="line">                    <span class="comment">// 重新格式化文件名</span></div><div class="line">                    name = name.substring(<span class="number">0</span>, name.indexOf(<span class="string">".class"</span>));</div><div class="line">                    name = name.replaceAll(<span class="string">"/"</span>, <span class="string">"."</span>);</div><div class="line">                    System.out.println(name);</div><div class="line">                    list.add(name);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"list length "</span> + list.size());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个是一个系列阅读，关于为什么重新学习，我在文章 &lt;a href=&quot;/2018/12/29/java-renew-why/&quot;&gt;重新学 Java 系列：新系列、新开始&lt;/a&gt;(&lt;a href=&quot;https://wxnacy.com/2018/12/29/java-renew-why/&quot;&gt;https://wxnacy.com/2018/12/29/java-renew-why/&lt;/a&gt;) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>2019 年读书目录</title>
    <link href="http://wxnacy.com/2019/01/07/2019-books/"/>
    <id>http://wxnacy.com/2019/01/07/2019-books/</id>
    <published>2019-01-07T05:45:40.000Z</published>
    <updated>2019-01-07T05:52:52.514Z</updated>
    
    <content type="html"><![CDATA[<p>本章记录 2019 年读书情况<br><a id="more"></a><div class="toc"></p><!-- toc --><ul><li><a href="#mu-biao">目标</a></li><li><a href="#zheng-zai-du">正在读</a></li><li><a href="#du-wan-de">读完的</a></li><li><a href="#shi-jian">时间</a></li><li><a href="#xiang-du-de">想读的</a></li></ul><!-- tocstop --></div><h2><span id="mu-biao">目标</span><a href="#mu-biao" class="header-anchor"></a></h2><p>2019 年每周要至少读够 8 小时书，一年至少读完 40 本书</p><h2><span id="zheng-zai-du">正在读</span><a href="#zheng-zai-du" class="header-anchor"></a></h2><p>《肖申克的救赎》<br>《别独自用餐》<br>《古董局中局》</p><h2><span id="du-wan-de">读完的</span><a href="#du-wan-de" class="header-anchor"></a></h2><p>总共 0 本</p><h2><span id="shi-jian">时间</span><a href="#shi-jian" class="header-anchor"></a></h2><p>2019 年第一周读书   12.31 - 01.06 32小时13分钟</p><p>总共 32 小时 13 分钟</p><h2><span id="xiang-du-de">想读的</span><a href="#xiang-du-de" class="header-anchor"></a></h2><p>《瓦尔登湖》<br>《人类简史》<br>《悟空传》<br>《未来简史》<br>《神经浪游者》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章记录 2019 年读书情况&lt;br&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://wxnacy.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Linux ab 压力测试</title>
    <link href="http://wxnacy.com/2019/01/06/linux-ab/"/>
    <id>http://wxnacy.com/2019/01/06/linux-ab/</id>
    <published>2019-01-06T02:06:23.000Z</published>
    <updated>2019-01-06T03:00:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>ab 是 Apache 附带的接口压力测试功能，非常简单易用。在测试服务端程序自身运行时长和跨区测试接口反馈时长时非常有用。<br><a id="more"></a><div class="toc"></p><!-- toc --><ul><li><a href="#xia-zai">下载</a></li><li><a href="#shi-yong">使用</a></li></ul><!-- tocstop --><p></div></p><h2><span id="xia-zai">下载</span><a href="#xia-zai" class="header-anchor"></a></h2><p>CentOS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install -y httpd</div></pre></td></tr></table></figure><p>Ubuntu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt install -y apache2-utils</div></pre></td></tr></table></figure><h2><span id="shi-yong">使用</span><a href="#shi-yong" class="header-anchor"></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ab -c 10 -n 100 http://ip-api.com/json</div></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><code>-c</code>: 表示并发数</li><li><code>-n</code>: 表示请求总数</li></ul><p><strong>结果</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&gt; $ ab -c 10 -n 100 http://ip-api.com/json</div><div class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1807734 $&gt;</div><div class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</div><div class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</div><div class="line"></div><div class="line">Benchmarking ip-api.com (be patient).....<span class="keyword">done</span></div><div class="line"></div><div class="line"></div><div class="line">Server Software:</div><div class="line">Server Hostname:        ip-api.com</div><div class="line">Server Port:            80</div><div class="line"></div><div class="line">Document Path:          /json</div><div class="line">Document Length:        306 bytes</div><div class="line"></div><div class="line">Concurrency Level:      10</div><div class="line">Time taken <span class="keyword">for</span> tests:   6.184 seconds</div><div class="line">Complete requests:      100</div><div class="line">Failed requests:        0</div><div class="line">Total transferred:      46200 bytes</div><div class="line">HTML transferred:       30600 bytes</div><div class="line">Requests per second:    16.17 [<span class="comment">#/sec] (mean)</span></div><div class="line">Time per request:       618.369 [ms] (mean)</div><div class="line">Time per request:       61.837 [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          7.30 [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+/-sd] median   max</div><div class="line">Connect:        1    3   1.1      3       6</div><div class="line">Processing:   528  572  58.4    550     889</div><div class="line">Waiting:      528  571  58.7    549     888</div><div class="line">Total:        531  575  58.3    552     891</div><div class="line"></div><div class="line">Percentage of the requests served within a certain time (ms)</div><div class="line">  50%    552</div><div class="line">  66%    565</div><div class="line">  75%    574</div><div class="line">  80%    600</div><div class="line">  90%    635</div><div class="line">  95%    656</div><div class="line">  98%    890</div><div class="line">  99%    891</div><div class="line"> 100%    891 (longest request)</div></pre></td></tr></table></figure><p><strong>结果详解</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Server Software:        web服务器软件及版本</div><div class="line">Server Hostname:        请求的地址</div><div class="line">Server Port:            请求的端口</div><div class="line"></div><div class="line">Document Path:          请求的页面路径</div><div class="line">Document Length:        页面大小</div><div class="line"></div><div class="line">Concurrency Level:      并发数</div><div class="line">Time taken <span class="keyword">for</span> tests:   测试总共花费的时间</div><div class="line">Complete requests:      完成的请求数</div><div class="line">Failed requests:        失败的请求数</div><div class="line">Write errors:           写入错误</div><div class="line">Total transferred:      总共传输字节数，包含http的头信息等</div><div class="line">HTML transferred:       html字节数，实际的页面传递字节数</div><div class="line">Requests per second:    每秒处理的请求数，服务器的吞吐量（重要）</div><div class="line">Time per request:       平均数，用户平均请求等待时间</div><div class="line">Time per request:       服务器平均处理时间</div><div class="line">Transfer rate:          平均传输速率（每秒收到的速率）</div></pre></td></tr></table></figure><p><code>Time per request</code> 是我们测试接口时长时非常关键的字段。</p><ul><li><a href="http://blog.51cto.com/zhangdiandong/1166557" target="_blank" rel="external">linux下web压力测试工具ab使用及详解</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ab 是 Apache 附带的接口压力测试功能，非常简单易用。在测试服务端程序自身运行时长和跨区测试接口反馈时长时非常有用。&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://wxnacy.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>重新学 Java 系列：为什么要用 set、get 方法</title>
    <link href="http://wxnacy.com/2019/01/03/java-renew-why-set-get/"/>
    <id>http://wxnacy.com/2019/01/03/java-renew-why-set-get/</id>
    <published>2019-01-03T08:52:13.000Z</published>
    <updated>2019-01-03T08:52:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这个是一个系列阅读，关于为什么重新学习，我在文章 <a href="/2018/12/29/java-renew-why/">重新学 Java 系列：新系列、新开始</a>(<a href="https://wxnacy.com/2018/12/29/java-renew-why/">https://wxnacy.com/2018/12/29/java-renew-why/</a>) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。</p></blockquote><a id="more"></a><div class="toc"><br><br><!-- toc --><!-- tocstop --></div><p><code>set, get</code> 方法，是 Java 开发者最常见的两个方法，从初学的手敲，到各种 IED 的自动生成，说它是一个项目里最多的方法名也不为过。</p><p>还记得几年前，一位开发 IOS 的同事问我，为什么你们 Java 非要用 <code>set, get</code> 方法操作变量，难道就不直接对变量进行赋值吗，就算不能赋值，还不能直接读取吗？我赶紧写了个类试了一下，哎，可以啊，那为啥呢，想了半天，不知道该怎么回答，憋了一句，这是规范。同事“哦”了一声，“好可怜的规范”。</p><p>大家都很忙的，晚上还要加班呢，谁有空在去深究为什么，大家都这么写嘛，规范嘛。</p><p>既然要重新学习，那自然要搞明白为什么。</p><p>首先我们先来弄清楚变量的作用域，详情可以看我的这篇文章<a href="/2018/12/30/java-renew-modification/">重新学 Java 系列：public private protected friendly 的区别</a>(<a href="https://wxnacy.com/2018/12/30/java-renew-modification/">https://wxnacy.com/2018/12/30/java-renew-modification/</a>)</p><p>我们用到最多的两个修饰符为 <code>public, private</code>，它们的区别在于</p><ul><li><code>public</code>: 所有地方都可以调用。</li><li><code>private</code>: 只有当前类可以调用。</li></ul><p>通常当修饰符为 <code>private</code> 时才需要用到 <code>set, get</code> 方法，因为该修饰符不能像 <code>public</code> 一样被外部方法和修改，那为什么我们不直接用 <code>public</code> 修饰呢。</p><p>真正的原因在于，作为一个类，我的变量想让你访问和修改，但我不希望你随便修改，而是按照我的方式来访问修改。</p><p>比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"wxnacy_"</span> + name</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age + <span class="number">10</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>两个方法都不是将原数据传入和传出，都经过了类的独特修改才进行的相应操作。</p><p>所以平常我们觉得它们多余，只是很多时候用不到这个特点而已。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个是一个系列阅读，关于为什么重新学习，我在文章 &lt;a href=&quot;/2018/12/29/java-renew-why/&quot;&gt;重新学 Java 系列：新系列、新开始&lt;/a&gt;(&lt;a href=&quot;https://wxnacy.com/2018/12/29/java-renew-why/&quot;&gt;https://wxnacy.com/2018/12/29/java-renew-why/&lt;/a&gt;) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>2019 年，对自己的要求</title>
    <link href="http://wxnacy.com/2019/01/01/2019-begin/"/>
    <id>http://wxnacy.com/2019/01/01/2019-begin/</id>
    <published>2019-01-01T08:42:15.000Z</published>
    <updated>2019-01-06T08:49:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>每年的元旦，我都会做一个年度计划，会在去年的基础上做一些调整，适当增加或减少<br><a id="more"></a><div class="toc"></p><!-- toc --><ul><li><a href="#ding-qi-ren-wu">定期任务</a></li><li><a href="#zong-liang-ren-wu">总量任务</a></li></ul><!-- tocstop --><p></div></p><h2><span id="ding-qi-ren-wu">定期任务</span><a href="#ding-qi-ren-wu" class="header-anchor"></a></h2><ul><li>每天至少听一个英文电影原声</li><li>每周 100 个新增英语单词量</li><li>每天一篇博客</li><li>每周至少 8 小时的读书时长</li></ul><h2><span id="zong-liang-ren-wu">总量任务</span><a href="#zong-liang-ren-wu" class="header-anchor"></a></h2><ul><li>完成 <a href="https://vim.wxnacy.com/" target="_blank" rel="external">Vim 练级手册</a>的编写</li><li>重学 Java，至可以进行项目开发</li><li>对 Go 语言更加精进</li></ul><p>今年的目标是在去年的基础上做了些调整，希望坚持完成，加油</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每年的元旦，我都会做一个年度计划，会在去年的基础上做一些调整，适当增加或减少&lt;br&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://wxnacy.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>2018 年，总结</title>
    <link href="http://wxnacy.com/2018/12/31/2018-end/"/>
    <id>http://wxnacy.com/2018/12/31/2018-end/</id>
    <published>2018-12-31T08:56:45.000Z</published>
    <updated>2019-01-06T08:40:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>2018 年最后一天，来总结一下这一年的表现<br><a id="more"></a><div class="toc"></p><!-- toc --><ul><li><a href="#hai-zi">孩子</a></li><li><a href="#bo-ke">博客</a></li><li><a href="#du-shu">读书</a></li><li><a href="#xue-xi">学习</a></li><li><a href="#zong-jie">总结</a></li></ul><!-- tocstop --></div><h2><span id="hai-zi">孩子</span><a href="#hai-zi" class="header-anchor"></a></h2><p>今年如果要用到一个关键词，那就是孩子。</p><p>6 月 6 日凌晨，我的宝贝儿欣欣出生了，我断定我娃以后必定 666。</p><p>就这样，以 6 月为中轴，我们今年的生活被分成了两个部分，孕期和产期。</p><p>最辛苦的还是我的老婆大人，6 月 5 号凌晨感觉宫缩，中午去医院，下午就住院，准备开指，晚上孩子就出生了。在旁人来看，整个过程干净利索，然而那天最痛苦的就是老婆了，可以用疼一天来形容，晚上疼的都吃不下饭，最后还要靠着自身的力气生下了大胖欣。而我只能守在产区外面，准备吃的和随时报喜是我唯一能做的。</p><p>从这以后，老婆就再也没睡过一个整觉了，这半年来，我俩每天都要面对的都是孩子晚上睡觉的问题，现在更是几乎每个小时都醒，老婆说打死都不要二胎了，我说嗯嗯嗯。</p><p>有了孩子，以后的日子都要围着孩子转了，老婆说现在我俩唯一约会的机会，就是周末趁着老人看孩子能出来逛下超市，连电影也看不了了，因为时间太长孩子就要闹了。</p><p>女人的伟大，在于身份的不断转变。从公主到女朋友到老婆，再到母亲，她们的心在越来越坚强，越来越让我离不开。</p><p>老婆，我爱你 ლ(′◉❥◉｀ლ)</p><h2><span id="bo-ke">博客</span><a href="#bo-ke" class="header-anchor"></a></h2><p>博客是去年正式开始写的，今年初定的目标是每天一篇，女儿出生前都履行的很好，但是后来就有点力不从心，有时候几天都没时间写，不过这不代表就落下了，以前欠下的我仍然会补上，这就好比欠了钱，不管过了多久，都要还上。</p><h2><span id="du-shu">读书</span><a href="#du-shu" class="header-anchor"></a></h2><p>这一项应该是目前执行最好的一项了，年初定了每周 5 小时，一年 30 本的目标。最后一共读完了 50 本，共 460 多个小时，大大的超出了目标，不过这也是因为目标定的并不高，明年要更上一层楼。</p><h2><span id="xue-xi">学习</span><a href="#xue-xi" class="header-anchor"></a></h2><p>学习也是一直没用拉下的一项，今年趁着有时间，学习 GO 语言，我相信这是未来几年一个很有前途的语言，同时也因此又让我有了重新学习 Java 的想法。</p><p>另外我还开始了写一本关于 Vim 教程的书，叫 <a href="https://vim.wxnacy.com/" target="_blank" rel="external">《Vim 练级手册》</a>(<a href="https://vim.wxnacy.com/)，这是我想着手普及" target="_blank" rel="external">https://vim.wxnacy.com/)，这是我想着手普及</a> Vim 的一个起点，不过自从女儿出生以后就搁浅了，只写了基础篇的几个章节，明年要把它加到计划里。</p><h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor"></a></h2><p>年初时，我对自己做了一个一年要求，<a href="https://wxnacy.com/2018/01/01/2018-begin/">2018 年，对自己的要求</a>(<a href="https://wxnacy.com/2018/01/01/2018-begin/">https://wxnacy.com/2018/01/01/2018-begin/</a>)</p><p>下面一一列举是否完成</p><p><strong>每天任务</strong></p><p>下面这些周期性的任务都现在正在进行的，接下来只是继续坚持而已。</p><ul><li>复习／背单词一共至少 100 个（未完成，明年的计划需要针对调整）</li><li>每周读书至少 5 小时（完成，部分周的读书时长不够，但都会在次周补上）</li><li>每天写一篇博客（未完成，女儿出生后就时不时会有断裂，不过都会补上）</li><li>每天记录微博（未完成，后期放弃使用微博）</li></ul><p><strong>总量目标</strong></p><ul><li>全年读书至少 30 本（完成，一共读了 50 本）</li><li>争取写一个自己的 Hexo 主题（未完成）</li><li>对 Python 更加精进（完成）</li><li>在 Vim 做到开发 Java 可以称心如意（未完成，同样是明年的目标）</li></ul><p>一晃又是一年，这一年相比以往有些坎坷，不过我还是在一点一点的进步着，我相信量变一定会转变为质变，加油，老温。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018 年最后一天，来总结一下这一年的表现&lt;br&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://wxnacy.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>重新学 Java 系列：public private protected friendly 的区别</title>
    <link href="http://wxnacy.com/2018/12/30/java-renew-modification/"/>
    <id>http://wxnacy.com/2018/12/30/java-renew-modification/</id>
    <published>2018-12-30T14:28:56.000Z</published>
    <updated>2018-12-30T14:28:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这个是一个系列阅读，关于为什么重新学习，我在文章 <a href="/2018/12/29/java-renew-why/">重新学 Java 系列：新系列、新开始</a>(<a href="https://wxnacy.com/2018/12/29/java-renew-why/">https://wxnacy.com/2018/12/29/java-renew-why/</a>) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。</p></blockquote><a id="more"></a><div class="toc"><br><br><!-- toc --><!-- tocstop --><p></div><br>Java 共有四种修饰：<code>public, private, protected, friendly</code>，（默认为：friendly）</p><p>可能调用他们修饰变量和函数的有的作用域有：当前类、当前包、子类、外部类</p><p>从网上找他们的对应的调用权限，很多是各种摘抄，并且存在各种错误，所以我认真对他们进行了实验，得到如下结论</p><table><thead><tr><th>对比</th><th>当前类</th><th>当前包</th><th>子类</th><th>外部类</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>friendly</td><td>√</td><td>√</td><td>√</td><td>×</td></tr></tbody></table><p>如表格，简单总结如下</p><ul><li><code>public</code>: 所有地方都可以调用。</li><li><code>private</code>: 只有当前类可以调用。</li><li><code>protected</code>: 只有外部类不可调用。</li><li><code>friendly</code>: 与 <code>protected</code> 完全相同。</li></ul><p>下载 demo <a href="https://github.com/wxnacy/study/tree/master/java/modification" target="_blank" rel="external">https://github.com/wxnacy/study/tree/master/java/modification</a> 到电脑中，确保电脑中有 Java 运行环境，可以执行跟目下的 <code>./run.sh</code> 脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ ./run.sh</div><div class="line">        public  private protected       friendly</div><div class="line">当前类  √       √       √               √</div><div class="line">当前包  √       ×       √               √</div><div class="line">子类    √       ×       √               √</div><div class="line">外部类  √       ×       ×               ×</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个是一个系列阅读，关于为什么重新学习，我在文章 &lt;a href=&quot;/2018/12/29/java-renew-why/&quot;&gt;重新学 Java 系列：新系列、新开始&lt;/a&gt;(&lt;a href=&quot;https://wxnacy.com/2018/12/29/java-renew-why/&quot;&gt;https://wxnacy.com/2018/12/29/java-renew-why/&lt;/a&gt;) 中有提到，这个系列是在有 Java 基础的情况下，重新学习讨论一下以前可能忽略掉，或者没理解的知识细节，我想要永远在学习的路上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>重新学 Java 系列：新系列、新开始</title>
    <link href="http://wxnacy.com/2018/12/29/java-renew-why/"/>
    <id>http://wxnacy.com/2018/12/29/java-renew-why/</id>
    <published>2018-12-29T08:09:17.000Z</published>
    <updated>2018-12-29T08:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>我经常自诩是个 Java 出身的程序员，虽然实际情况确实如此，但随着时间推移，说这句话越来越没了底气。<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --><p></div><br>以前作为 Java 程序员，我是很自豪的，原因呢？可能只是因为 Java 本身的市场占比。</p><p>后来因为工作原因接触了 Python，并逐渐成为主力语言，Java 就慢慢从我的开发生活中淡出了，这次的原因呢？好吧，我已经不想在用打印 <code>Hello World</code> 这个玩笑来自嘲了。</p><p>在这个过程中，我接触了 Ruby、NodeJS、Go。他们每个都比 Java 简洁，比 Java 更有效率。我沉醉于吸收新语言，觉得这是在给自己修炼各种劳作工具，免得遇到各种问题都只能想到 Java 这一把“锤子”来解决问题。</p><p>那是什么时候出现问题了呢？大概是从面对 Java 代码越来越陌生开始的吧。</p><p>还记得两年前，我还会关注 Java 8 新特性，一位前辈看到后说，还看什么 Java 啊，开发语言发展到现在，Java 跟其他相比，只是在浪费你的工作时间和拖慢你的电脑。我当时还义正言辞的说，虽然不常用了，但必须要多关注动态。</p><p>不过好像也就是说说而已，此后无数次的想要用 Java 写点东西，都被它的繁琐累赘所阻挠，是啊，有了更简洁的语言，为什么还要浪费时间用 Java 来写呢。</p><p>导致的结果就是，现在越来越不会写 Java 了，每次重整旗鼓，都会被包的导入这种小事情纠结半天。真的是因为太久不写了吗？</p><p>最近我常常在想这个问题，从 Python 开始，我每次接触新语言就会非常重视基础，因为当初学 Java 时就是这样的，我坚信不管学什么东西，基础都是最重要的。</p><p>我不断的回忆学 Java 的一些细节，我逐渐发现当时的基础其实并没有学好，我只是以为学好了而已，因为在以前，我从来没有深究过编译整个项目时 <code>javac</code> 的编译逻辑，我也没有深究过 <code>public</code> 明明已经可以像其它语言一样可以对参数赋值读取，却还要使用 <code>private</code> 再配上 <code>set, get</code> 方法。</p><p>我只是跟网上很多人一样，这是规范，这样用就好了，反正有 IDE，他就帮你编译打包了，你关注业务逻辑就行了。</p><p>所以我不断的练习 <code>System.out.println(&quot;Hello World&quot;)</code> 的编写，我不断的重复 <code>set, get</code> 的熟练度，我告诉自己熟能生巧，这样就对了。</p><p>所以我既没有把这些知识搞明明白白后存在大脑，也没有把它记录在博客上供以后查阅，我只把它交给了肌肉记忆。</p><p>重新燃起学习 Java 的欲望，是因为最近 Java 11 更新了，很多新特性，一个免编译运行单文件的新特性，更是让它显得不那么 Java 了，并且它是继 Java 8 后又一个长期维护版本，文章最后一句话是“如果你要入门 Java，这会是个不错的版本”。</p><p>好吧，我想我是属于那个重新入门 Java 的的老鸟了。</p><p>这次我不在借助 IDE，而是用 Vim 一点一点弄懂它的编译逻辑。</p><p>这次我会弄清楚更多的基础内容并把它记录在博客里，存在大脑里。</p><p>这次我希望在跟别人说，我是 Java 出身时，显得更有底气。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我经常自诩是个 Java 出身的程序员，虽然实际情况确实如此，但随着时间推移，说这句话越来越没了底气。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Python 统计字符串中某个字符串出现的次数</title>
    <link href="http://wxnacy.com/2018/12/28/python-str-count/"/>
    <id>http://wxnacy.com/2018/12/28/python-str-count/</id>
    <published>2018-12-28T07:04:13.000Z</published>
    <updated>2018-12-28T07:04:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python 的字符串函数还是很方便的，只需要调用 <code>count()</code> 方法即可。<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --></div><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># Author: wxnacy(wxnacy@gmail.com)</span></div><div class="line"></div><div class="line">print(<span class="string">'Hello World'</span>.count(<span class="string">'o'</span>))</div><div class="line"><span class="comment"># 2</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 的字符串函数还是很方便的，只需要调用 &lt;code&gt;count()&lt;/code&gt; 方法即可。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://wxnacy.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 如何安装 Java 11</title>
    <link href="http://wxnacy.com/2018/12/27/centos7-install-java11/"/>
    <id>http://wxnacy.com/2018/12/27/centos7-install-java11/</id>
    <published>2018-12-27T01:26:01.000Z</published>
    <updated>2018-12-27T01:26:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>几个月前我写过文章 <a href="/2018/06/15/centos-install-jdk/">CentOS 安装 JDK</a> ，当时是以 JDK 8 为例子，现在 Java 11 出来了，相应的更新一版。<br><a id="more"></a><div class="toc"></p><!-- toc --><ul><li><a href="#openjdk">OpenJDK</a></li><li><a href="#oracle">Oracle</a></li><li><a href="#xuan-ze-ban-ben">选择版本</a></li></ul><!-- tocstop --></div><h2><span id="openjdk">OpenJDK</span><a href="#openjdk" class="header-anchor"></a></h2><p>首先搜索可安装的 JDK</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum search java-11</div></pre></td></tr></table></figure><p>从结果中我们可以找出两个条目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java-11-openjdk.x86_64 : OpenJDK Runtime Environment 11</div><div class="line">java-11-openjdk-devel.x86_64 : OpenJDK Development Environment 11</div></pre></td></tr></table></figure><p>他们分别是 JRE 和 JDK，根据你的需求安装即可，比如安装 JRE</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install java-11-openjdk -y</div></pre></td></tr></table></figure><p>安装目录为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/lib/jvm/java-11-openjdk-11.0.1.13-3.el7_6.x86_64</div></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ java -version</div><div class="line"></div><div class="line">openjdk version <span class="string">"11.0.1"</span> 2018-10-16 LTS</div><div class="line">OpenJDK Runtime Environment 18.9 (build 11.0.1+13-LTS)</div><div class="line">OpenJDK 64-Bit Server VM 18.9 (build 11.0.1+13-LTS, mixed mode, sharing)</div></pre></td></tr></table></figure><h2><span id="oracle">Oracle</span><a href="#oracle" class="header-anchor"></a></h2><p>Oracle 的 JDK 安装要稍微麻烦点，首先获取<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html" target="_blank" rel="external">官网</a>的 JDK RPM 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://download.oracle.com/otn-pub/java/jdk/11.0.1+13/90cf5d8f270a4347a95050320eef3fb7/jdk-11.0.1_linux-x64_bin.rpm</div></pre></td></tr></table></figure><p>下载到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget --no-cookies --no-check-certificate --header <span class="string">"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie"</span> https://download.oracle.com/otn-pub/java/jdk/11.0.1+13/90cf5d8f270a4347a95050320eef3fb7/jdk-11.0.1_linux-x64_bin.rpm</div></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum -y localinstall jdk-11.0.1_linux-x64_bin.rpm</div></pre></td></tr></table></figure><p>安装目录为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/java/jdk-11.0.1</div></pre></td></tr></table></figure><h2><span id="xuan-ze-ban-ben">选择版本</span><a href="#xuan-ze-ban-ben" class="header-anchor"></a></h2><p>查看所有本机 JDK 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ sudo alternatives --config java</div><div class="line"></div><div class="line">There are 2 programs <span class="built_in">which</span> provide <span class="string">'java'</span>.</div><div class="line"></div><div class="line">  Selection    Command</div><div class="line">-----------------------------------------------</div><div class="line"> + 1           java-11-openjdk.x86_64 (/usr/lib/jvm/java-11-openjdk-11.0.1.13-3.el7_6.x86_64/bin/java)</div><div class="line">*  2           /usr/java/jdk-11.0.1/bin/java</div><div class="line"></div><div class="line">Enter to keep the current selection[+], or <span class="built_in">type</span> selection number: 2</div></pre></td></tr></table></figure><p><code>*+</code> 代表当前使用的版本，该命令下输入版本对应的数字即可更改版本，我们输入 2 更<br>改为 oracle 版本，然后查看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ java -version</div><div class="line">java version <span class="string">"11.0.1"</span> 2018-10-16 LTS</div><div class="line">Java(TM) SE Runtime Environment 18.9 (build 11.0.1+13-LTS)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.1+13-LTS, mixed mode)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几个月前我写过文章 &lt;a href=&quot;/2018/06/15/centos-install-jdk/&quot;&gt;CentOS 安装 JDK&lt;/a&gt; ，当时是以 JDK 8 为例子，现在 Java 11 出来了，相应的更新一版。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 如何安装 Java 11</title>
    <link href="http://wxnacy.com/2018/12/26/ubuntu-install-jdk11/"/>
    <id>http://wxnacy.com/2018/12/26/ubuntu-install-jdk11/</id>
    <published>2018-12-26T02:56:36.000Z</published>
    <updated>2018-12-26T08:06:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>几个月前我写过文章 <a href="/2018/06/19/ubuntu-install-jdk/">Ubuntu 16.04 安装 JDK</a> ，当时是以 JDK 8 为例子，现在 Java 11 出来了，相应的更新一版。<br><a id="more"></a><div class="toc"></p><!-- toc --><ul><li><a href="#oracle-jdk">Oracle JDK</a></li><li><a href="#openjdk">OpenJDK</a><ul><li><a href="#18-04-lts">18.04 LTS</a></li><li><a href="#geng-lao-ban-ben">更老版本</a></li></ul></li><li><a href="#qie-huan-ban-ben">切换版本</a></li></ul><!-- tocstop --></div><p>我们首选使用 apt 来进行安装管理</p><h2><span id="oracle-jdk">Oracle JDK</span><a href="#oracle-jdk" class="header-anchor"></a></h2><p>首先添加 LinuxUprising Java PPA 仓库到软件源中，并下载 Oracle Java 11</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo add-apt-repository ppa:linuxuprising/java</div><div class="line">$ sudo apt update</div><div class="line">$ sudo apt install oracle-java11-installer</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ java -version</div><div class="line">java version <span class="string">"11.0.1"</span> 2018-10-16 LTS</div><div class="line">Java(TM) SE Runtime Environment 18.9 (build 11.0.1+13-LTS)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.1+13-LTS, mixed mode)</div></pre></td></tr></table></figure><h2><span id="openjdk">OpenJDK</span><a href="#openjdk" class="header-anchor"></a></h2><h3><span id="18-04-lts">18.04 LTS</span><a href="#18-04-lts" class="header-anchor"></a></h3><p>首先我们使用 <code>apt</code> 进行搜索</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt search openjdk</div></pre></td></tr></table></figure><p>如果你的系统版本足够新，比如 18.04 LTS，那么很有可能搜索出这样的条目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">openjdk-11-jdk/bionic-updates,bionic-security,now 10.0.2+13-1ubuntu0.18.04.4 amd64 [installed,automatic]</div><div class="line">  OpenJDK Development Kit (JDK)</div></pre></td></tr></table></figure><p>这代表软件源已经更新了 Java 11，这样直接安装默认版本即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt install -y default-jdk</div></pre></td></tr></table></figure><h3><span id="geng-lao-ban-ben">更老版本</span><a href="#geng-lao-ban-ben" class="header-anchor"></a></h3><p>如果是更早的版本，那么很大程度上并没有更新该源，那么这时候我们需要使用 tar 包进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget https://download.java.net/java/GA/jdk11/28/GPL/openjdk-11+28_linux-x64_bin.tar.gz -O /tmp/openjdk-11+28_linux-x64_bin.tar.gz</div><div class="line">$ sudo tar xfvz /tmp/openjdk-11+28_linux-x64_bin.tar.gz --directory /usr/lib/jvm</div><div class="line">$ rm -f /tmp/openjdk-11+28_linux-x64_bin.tar.gz</div></pre></td></tr></table></figure><p>使用 <code>update-alternatives</code> 对它进行管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo sh -c <span class="string">'for bin in /usr/lib/jvm/jdk-11/bin/*; do update-alternatives --install /usr/bin/$(basename $bin) $(basename $bin) $bin 100; done'</span></div><div class="line">$ sudo sh -c <span class="string">'for bin in /usr/lib/jvm/jdk-11/bin/*; do update-alternatives --set $(basename $bin) $bin; done'</span></div></pre></td></tr></table></figure><p>最后查看 java 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ java -version</div><div class="line">openjdk version <span class="string">"10.0.2"</span> 2018-07-17</div><div class="line">OpenJDK Runtime Environment (build 10.0.2+13-Ubuntu-1ubuntu0.18.04.4)</div><div class="line">OpenJDK 64-Bit Server VM (build 10.0.2+13-Ubuntu-1ubuntu0.18.04.4, mixed mode)</div></pre></td></tr></table></figure><h2><span id="qie-huan-ban-ben">切换版本</span><a href="#qie-huan-ban-ben" class="header-anchor"></a></h2><p>现在我们已经有两个版本的 Java，我们可以通过 <code>update-alternatives</code> 来选择一个作为默认版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ sudo update-alternatives --config java</div><div class="line">There are 2 choices <span class="keyword">for</span> the alternative java (providing /usr/bin/java).</div><div class="line"></div><div class="line">  Selection    Path                                  Priority   Status</div><div class="line">------------------------------------------------------------</div><div class="line">  0            /usr/lib/jvm/java-11-oracle/bin/java   1091      auto mode</div><div class="line">* 1            /usr/lib/jvm/java-11-oracle/bin/java   1091      manual mode</div><div class="line">  2            /usr/lib/jvm/jdk-11/bin/java           100       manual mode</div><div class="line"></div><div class="line">Press &lt;enter&gt; to keep the current choice[*], or <span class="built_in">type</span> selection number:</div></pre></td></tr></table></figure><p>随后输入 <code>Selection</code> 对应的数字即可完成切换</p><ul><li><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html" target="_blank" rel="external">Java SE Development Kit 11 Downloads</a></li><li><a href="https://dzone.com/articles/installing-openjdk-11-on-ubuntu-1804-for-real" target="_blank" rel="external">Installing OpenJDK 11 on Ubuntu 18.04</a></li><li><a href="https://www.linuxuprising.com/2018/10/how-to-install-oracle-java-11-in-ubuntu.html" target="_blank" rel="external">How To Install Oracle Java 11 In Ubuntu, Linux Mint Or Debian (From PPA Repository)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几个月前我写过文章 &lt;a href=&quot;/2018/06/19/ubuntu-install-jdk/&quot;&gt;Ubuntu 16.04 安装 JDK&lt;/a&gt; ，当时是以 JDK 8 为例子，现在 Java 11 出来了，相应的更新一版。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java 11 新特性：java 命令直接运行单文件</title>
    <link href="http://wxnacy.com/2018/12/25/java-11-new1/"/>
    <id>http://wxnacy.com/2018/12/25/java-11-new1/</id>
    <published>2018-12-25T02:47:43.000Z</published>
    <updated>2018-12-27T08:23:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然现在很少使用 Java 进行开发，但是仍然时不时的关注着它的动态，最近发现 Java 11 发布了，并且带来了很多新特性，关键它是 Java8 以后又一长期维护版本，可以在生产环境使用，这又增加了我关注它的动力，今天先介绍一个新特性：java 命令可以直接运行单文件。<br><a id="more"></a><div class="toc"></p><!-- toc --><ul><li><a href="#yun-xing-dan-wen-jian">运行单文件</a></li><li><a href="#wei-shi-me">为什么？</a><ul><li><a href="#jiao-ben-yun-xing">脚本运行</a></li><li><a href="#tong-yi-ge-wen-jian-duo-ge-gong-gong-lei">同一个文件多个公共类</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="yun-xing-dan-wen-jian">运行单文件</span><a href="#yun-xing-dan-wen-jian" class="header-anchor"></a></h2><p>举个例子，写一个类文件 <code>HelloWorld.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello World"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以前需要这样运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ javac HelloWorld.java</div><div class="line">$ java HelloWorld</div><div class="line">Hello World</div></pre></td></tr></table></figure><p>现在只需要这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ java HelloWorld.java</div><div class="line">Hello World</div></pre></td></tr></table></figure><p>嗯，Python 你闭嘴，还有你 Go。呵呵</p><h2><span id="wei-shi-me">为什么？</span><a href="#wei-shi-me" class="header-anchor"></a></h2><p>其他介绍 Java 11 新特性的文章，到这里也就点到为止了，但是我总觉得这事不是这么简单。</p><p>Java 为什么要这么做，真的是想用 <code>java</code> 取代 <code>javac</code> 吗，很显然不是，你可以做些实验，再多文件打包运行时，我们仍然需要 <code>javac</code> 来进行编译，也就是说 <code>java</code> 有其他的用途。</p><p>这几年 Java 一直在追赶脚本语言（如：Python、NodeJS）的脚步，比如 lambda 函数、服务器组件、轻量级的 JSON 组件，还有 Java 11 才增加的 Http Client Api。这无疑都在想让自己往脚本语言方向发展，并且现在已经越来越像了。</p><p>我们来做一些对比，拿入门的打印 <code>Hello World</code> 来举例，在 Python 中我们这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line">print(<span class="string">"Hello World"</span>)</div><div class="line"><span class="comment"># python Hello.py</span></div></pre></td></tr></table></figure><p>Java 中这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello World"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// javac Hello.java</span></div><div class="line"><span class="comment">// java Hello</span></div></pre></td></tr></table></figure><p>好了，先不要笑，也先不要管 <code>public, static, void</code> 是个什么东西，Java 一直都很臃肿，你又不是不知道，至少现在它已经把 <code>javac Hello.java</code> 干掉了。</p><h3><span id="jiao-ben-yun-xing">脚本运行</span><a href="#jiao-ben-yun-xing" class="header-anchor"></a></h3><p>脚本语言的特性是可以在文件第一行以 <code>#!</code> 开头，并指定运行命令，然后可以直接在终端中运行，比如 Python</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ chmod +x hello.py</div><div class="line">$ ./hello.py</div><div class="line">Hello World</div></pre></td></tr></table></figure><p>那 Java 呢，因为本身的特性，<code>.java</code> 后缀的文件不运行出现 <code>#!</code>，所以我们首先需要改一下名字，听到这里，你是不是已经开始心跳加速了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mv Hello.java hello.sh</div><div class="line">$ chmod +x hello.sh</div></pre></td></tr></table></figure><p>然后修改文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env java --source 11</span></div><div class="line"></div><div class="line">public class HelloWorld&#123;</div><div class="line">    public static void main(String args[])&#123;</div><div class="line">        System.out.println(<span class="string">"Hello World"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后执行该文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./hello.sh</div><div class="line">Hello World</div></pre></td></tr></table></figure><p>啊！我看到了什么，这真的是 Java 吗？</p><p>OK，现在为止，已经挑战了我的认知，这有悖于我们多年以来的认知。</p><p>当然文件还可以使用 java 运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -Dtrace=<span class="literal">true</span> --<span class="built_in">source</span> 11 hello.sh</div></pre></td></tr></table></figure><h3><span id="tong-yi-ge-wen-jian-duo-ge-gong-gong-lei">同一个文件多个公共类</span><a href="#tong-yi-ge-wen-jian-duo-ge-gong-gong-lei" class="header-anchor"></a></h3><p>我们刚才已经知道了两个有悖“常识”的知识点<strong><em>Java 可以作为脚本运行</em></strong>和<strong><em>文件名可以和第一个公共类名不相同</em></strong></p><p>看到第二点，我有个大胆的想法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello World"</span>);</div><div class="line">        User u = <span class="keyword">new</span> User();</div><div class="line">        u.id = <span class="number">1</span>;</div><div class="line">        System.out.println(u.id);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"User"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样的写法，如果放在几个月以前，是会被别人破口大骂的，因为只学过几天的菜鸟也知道，一个类中不能出现两个公共类，它会报这个错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error: class User is public, should be declared <span class="keyword">in</span> a file named User.java</div></pre></td></tr></table></figure><p>你把 <code>User</code> 类前边的 <code>public</code> 去掉就行了，那在 Java 11 中呢</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ java hello.java</div><div class="line">Hello World</div><div class="line">1</div></pre></td></tr></table></figure><p>现在 Java 11 会正常运行该文件，并直接第一个公共类的 <code>main</code> 函数。</p><p>好吧，这确实颠覆了 20 几年来 Java 固守的东西，还有对于新手来说，这真的是一个痛苦的过程。</p><p>最后我们再来总结一下，在单文件运行的情况下 Java 11 做了哪些改变</p><ul><li><strong><em>Java 11 可以将单文件作为脚本来运行</em></strong></li><li><strong><em>文件名不在需要跟第一个公共类名相同</em></strong></li><li><strong><em>同一个文件下可以存在多个公共类</em></strong></li><li><strong><em>单文件下不再需要 class 文件</em></strong></li></ul><p>参考：</p><ul><li><a href="https://medium.com/the-java-report/new-java-11-feature-launch-single-file-source-code-programs-fadd698abf54" target="_blank" rel="external">New Java 11 Feature: Launch Single-File Source-Code Programs</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然现在很少使用 Java 进行开发，但是仍然时不时的关注着它的动态，最近发现 Java 11 发布了，并且带来了很多新特性，关键它是 Java8 以后又一长期维护版本，可以在生产环境使用，这又增加了我关注它的动力，今天先介绍一个新特性：java 命令可以直接运行单文件。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java 11 新特性：String 增强</title>
    <link href="http://wxnacy.com/2018/12/24/java-11-new-string/"/>
    <id>http://wxnacy.com/2018/12/24/java-11-new-string/</id>
    <published>2018-12-24T03:51:01.000Z</published>
    <updated>2018-12-25T04:01:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然现在很少使用 Java 进行开发，但是仍然时不时的关注着它的动态，最近发现 Java 11 发布了，并且带来了很多新特性，关键它是 Java8 以后又一长期维护版本，可以在生产环境使用，这又增加了我关注它的动力，今天先介绍一个新特性：String 增强<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --><p></div><br>我们来看这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringExample</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">        Java11Upgrade();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Java11Upgrade</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 判断字符串是否为空白</span></div><div class="line">        System.out.println(<span class="string">" "</span>.isBlank());              <span class="comment">// true</span></div><div class="line">        <span class="comment">// 去除首尾空格</span></div><div class="line">        System.out.println(<span class="string">" Java "</span>.strip());           <span class="comment">// Java</span></div><div class="line">        <span class="comment">// 去除首部空格</span></div><div class="line">        System.out.println(<span class="string">" Java"</span>.stripLeading());     <span class="comment">// Java</span></div><div class="line">        <span class="comment">// 去除尾部空格</span></div><div class="line">        System.out.println(<span class="string">"Java "</span>.stripTrailing());    <span class="comment">// Java</span></div><div class="line">        <span class="comment">// 重复字符串</span></div><div class="line">        System.out.println(<span class="string">"Java"</span>.repeat(<span class="number">2</span>));           <span class="comment">// JavaJava</span></div><div class="line">        <span class="comment">// 获取字符串中的行数</span></div><div class="line">        System.out.println(<span class="string">"A\nB\nC"</span>.lines().count());  <span class="comment">// 3</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>还是一些其他语言早就有的特性，不过很高兴 Java 在逐渐补足这些东西，这也是让 Java 保持霸主地位的必要操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然现在很少使用 Java 进行开发，但是仍然时不时的关注着它的动态，最近发现 Java 11 发布了，并且带来了很多新特性，关键它是 Java8 以后又一长期维护版本，可以在生产环境使用，这又增加了我关注它的动力，今天先介绍一个新特性：String 增强&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wxnacy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Python 报错：local variable &#39;count&#39; referenced before assignment</title>
    <link href="http://wxnacy.com/2018/12/20/python-error-loca-variable/"/>
    <id>http://wxnacy.com/2018/12/20/python-error-loca-variable/</id>
    <published>2018-12-20T08:06:16.000Z</published>
    <updated>2018-12-20T08:14:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Python 很久了，仍然会碰到一些莫名其妙的错误。<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --></div><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># Author: wxnacy(wxnacy@gmail.com)</span></div><div class="line"></div><div class="line">count = <span class="number">0</span></div><div class="line"></div><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt</span><span class="params">(i)</span>:</span></div><div class="line">    count += i</div><div class="line"></div><div class="line">[fmt(o) <span class="keyword">for</span> o <span class="keyword">in</span> a]</div><div class="line">print(count)</div></pre></td></tr></table></figure><p>我的本意是想在 <code>fmt</code> 方法中对 <code>count</code> 进行累加，但是会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">local</span> variable <span class="string">'count'</span> referenced before assignment</div></pre></td></tr></table></figure><p>google 后发现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">count = <span class="number">0</span></div></pre></td></tr></table></figure><p>定义为全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt</span><span class="params">(i)</span>:</span></div><div class="line">    count += i</div></pre></td></tr></table></figure><p>方法中只能对局部变量进行修改，<strong><em>如果想要修改全局变量，需要在方法内使用 global 对变量进行修改</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt</span><span class="params">(i)</span>:</span></div><div class="line">    <span class="keyword">global</span> count</div><div class="line">    count += i</div></pre></td></tr></table></figure><p>完整代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># Author: wxnacy(wxnacy@gmail.com)</span></div><div class="line"></div><div class="line">count = <span class="number">0</span></div><div class="line"></div><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt</span><span class="params">(i)</span>:</span></div><div class="line">    <span class="keyword">global</span> count</div><div class="line">    count += i</div><div class="line"></div><div class="line">[fmt(o) <span class="keyword">for</span> o <span class="keyword">in</span> a]</div><div class="line">print(count)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Python 很久了，仍然会碰到一些莫名其妙的错误。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://wxnacy.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>dig 写一条最简单的查询 DNS 命令</title>
    <link href="http://wxnacy.com/2018/12/18/dig-simple/"/>
    <id>http://wxnacy.com/2018/12/18/dig-simple/</id>
    <published>2018-12-18T10:24:31.000Z</published>
    <updated>2018-12-18T10:33:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>dig（域信息搜索器）命令是一个用于询问 DNS 域名服务器的灵活的工具。它执行 DNS 查询，显示从已查询名称服务器返回的应答。<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --><p></div><br>dig 的功能非常强大，我们这篇不展开讨论，只看最简单的查询域名的 DNS 映射。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ dig baidu.com</div><div class="line"></div><div class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; baidu.com</div><div class="line">;; global options: +cmd</div><div class="line">;; Got answer:</div><div class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 28439</div><div class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 0</div><div class="line"></div><div class="line">;; QUESTION SECTION:</div><div class="line">;baidu.com.INA</div><div class="line"></div><div class="line">;; ANSWER SECTION:</div><div class="line">baidu.com.110INA220.181.57.216</div><div class="line">baidu.com.110INA123.125.115.110</div><div class="line"></div><div class="line">;; Query time: 198 msec</div><div class="line">;; SERVER: 1.1.1.1<span class="comment">#53(1.1.1.1)</span></div><div class="line">;; WHEN: Tue Dec 18 18:25:21 2018</div><div class="line">;; MSG SIZE  rcvd: 59</div></pre></td></tr></table></figure><p>我们取关键的应答部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;; ANSWER SECTION:</div><div class="line">baidu.com.110INA220.181.57.216</div><div class="line">baidu.com.110INA123.125.115.110</div></pre></td></tr></table></figure><p>从这里我们可以看到目前 <code>baidu.com</code> 域名映射了两个 ip 地址。</p><p>这虽然是非常简单的命令行，但却是非常好用的检测工具。如果你不是专业的运维，了解到这个命令，就已经在工作中帮了大忙。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;dig（域信息搜索器）命令是一个用于询问 DNS 域名服务器的灵活的工具。它执行 DNS 查询，显示从已查询名称服务器返回的应答。&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://wxnacy.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>玩儿</title>
    <link href="http://wxnacy.com/2018/12/17/waner/"/>
    <id>http://wxnacy.com/2018/12/17/waner/</id>
    <published>2018-12-17T10:08:46.000Z</published>
    <updated>2018-12-17T10:10:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>看于谦的《玩儿》真的很有意思，这是一部表面极为不正经，其实蕴含很多人生道理，看完让人回味无穷的书。<br><a id="more"></a><div class="toc"></p><!-- toc --><!-- tocstop --></div><p>你说玩儿就玩儿吧，干嘛非得学什么大道理，话是这么说，但是如果你好好玩儿，认真玩儿，还真就能在玩儿的时候就把道理给学了。</p><p>知道于谦，是从郭德纲相声开始的，抽烟喝酒烫头是几乎所有人都知道的梗，但郭德纲也早就说过，于大娘主业是玩儿，相声只是他玩儿的一部分。</p><p>玩儿简单，也难。简单之处无需多言，可难就难在两个字，认真。玩儿的认真，以前只对这句话有个模糊的概念，为什么呢？因为什么事认真起来都难呗！</p><p>从下面这段就能看出来。</p><blockquote><p>七哥从水中捞起那团麻，挤干了水，用一小片羊肉裹住，让鹰吞了下去，“这个行话叫‘下轴’，鹰有一个习性，在野外捕到鸡、兔时，皮毛骨肉一起吞下，遇有消化不了的东西，会在胃中团成一个椭圆状的球形吐出来。咱们就利用它这个特点，给它喂下一团麻。麻，鹰是消化不了的，下肚以后，麻粗糙的纤维会刮下鹰肚中的膛油，带着油脂被鹰吐出来。这样，双管齐下，里外结合，用不了几天，它就会俯首帖耳。”<br>    听了这番话，我当时的反应就是：人真是太聪明了，可也够损的。这主意是怎么想出来的呢？就这么折腾，甭说鹰，搁人也受不了。<br>天渐渐黑了下来，七嫂又摆上了一桌子的菜，七哥说：“来吧，都坐，喝酒，吃饭，鹰先不遛了。这遛是让它熟悉人多的环境，现在晩上人也少了，它也看不见了，咱就不出去了，但在家喝酒可也不能闲着。”七哥边说边慢慢来回转动左臂，臂上的黄鹰站立不稳，被动地来回倒着脚步，“看见没有？这叫倒拳儿，为的是不让它睡觉，老得让它活动着。这鹰肚里没食，要靠睡觉来补充体力，不让它睡觉也是消耗它的一个重要手段。之所以叫熬鹰，说的就是这个。但是鹰有一个与众不同之处，你如果只是盯着它不让睡，它会闭一只眼睛睡觉。你看到的这只眼睛总是睁着的，其实是一个假象，也许背面你看不到的那只眼睛已经闭上睡觉了，你很难发现。所以只能这样来回倒拳儿让它总是站不稳，它就无法入睡。”<br>听七哥说完，我随口一句：“这人是真够缺德的，不给饭吃，从肚子里往外刮油，再不让睡觉，这也太狠了吧？”<br>七哥听我说完，反倒像逮着理了似的，马上说：“哎！就得狠！老话讲善不赢人，说的就是这个道理。你要不这么狠，你但凡心疼它一点儿，它永远也驯不出来，那咱们就输了手艺了！那咱就不如不养。这道理跟人一样，你想学点儿东西，你不下功夫不吃苦能学会吗？你要想出好成绩，所下的功夫必须要超过常人。这就叫吃得苦中苦，方为人上人呀！</p></blockquote><p>这是讲“熬鹰”的一个片段，咋一听是挺渗人的，也挺长见识的。想想被影视作品里只会睁着眼“瞪鹰”骗了这么多年，还挺可笑的。</p><p>你要是动物保护协会的，这会肯定蹦起来要去抵制这种做法。还好我不是，我更关注的最后一句话。</p><p>这道理跟人一样，你想学点儿东西，你不下功夫不吃苦能学会吗？你要想出好成绩，所下的功夫必须要超过常人。这就叫吃得苦中苦，方为人上人呀！</p><p>看到这话真的是感触良多，我虽然不是多爱学习的人，但也确实为了几件事真的拼过，个中滋味也只有经历过才能了解。</p><p>你身边一定一两个这样的人，回看他们的人生，异样的精彩。几乎每过段时间，就可以看到他们专注在某一件事上，并且付出远高于我们的努力。</p><p>所以你看到他们顺利的考取了几个证书，学习了几门一辈子都学不会的语言，连玩“杀人游戏”你都不一定能赢过他。这些“比我们优秀还比我们努力的人”，或许只是做每件事的时候都比我们认真一些。</p><p>提到“玩儿”，更多人第一反应就是不务正业，我读完整本书，还是这么觉得。但事情的发展就在于，我们现在所处的时代，不管什么事情，认真的做，做到极致，都能挣到钱。能挣到钱，那就不是不务正业。</p><p>果然于大娘最后真的将自己的马场进行了开放，完成了“从玩儿到商业再到更好的玩儿”的闭环，这时候不管前边你再怎么不理解，这时候你都得承认人家比你强，为什么？因为人家连玩儿都比你认真。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看于谦的《玩儿》真的很有意思，这是一部表面极为不正经，其实蕴含很多人生道理，看完让人回味无穷的书。&lt;br&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="http://wxnacy.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
