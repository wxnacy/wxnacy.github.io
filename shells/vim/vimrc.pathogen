"===============================
" Author: wxnacy
" Email: wxnacy@gmail.com
" Create time:
" Last Modified: 2017-08-27
" Description:
"===============================




"==============================="
" 基本设置
"==============================="

" base
" call pathogen#infect('/Users/wxnacy/WebstormProjects/wxnacy.github.io/shells/vim/bundle')
call pathogen#infect()
set nocompatible				"去掉对vi的兼容，让vim运行在完全模式下
syntax on    					"开启语法高亮"
set history=2003                "记录VIM历史操作的条数
set autoread					"文件在vim外修改过自动重新载入
set magic                       "magic (\m)：除了 $ . * ^ 之外其他元字符都要加反斜杠。nomagic (\M)：除了 $ ^ 之外其他元字符都要加反斜杠。
set title
set nobackup                    "去掉编辑文件时的备份
set novisualbell                "关掉可视化响铃警报
set noerrorbells                "关掉错误警报
set visualbell t_vb=            "关掉警报
set tm=500
set t_Co=256
" leader
let mapleader = ';'
let g:mapleader = ';'

" filetype
filetype on                     "开启文件类型检测
filetype plugin on              "开启插件的支持
filetype indent on              "开启文件类型相应的缩进规则
set fileformat=unix    			"设置以unix的格式保存文件"

" encoding
set encoding=utf-8              "打开文件时编码格式
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1         "vim会根据该设置识别文件编码

" set fileencoding=utf-8        在保存文件时，指定编码
set termencoding=utf-8          "终端环境告诉vim使用编码
set ffs=unix,dos,mac            "在创建文件或写入时，这三种文件格式分别决定了行末要添加什么特殊字符，而在读入文件时，又分别决定了要从行末移去什么特殊字符。
set formatoptions+=m
set formatoptions+=B

" 主题
set background=dark       		"配色主题的色系,注意，这不是什么背景色！dark 是暗色系，light 是亮色系。
colorscheme desert              "配色主题的名称,:coloscheme 后键入<tab>可以自动补全 比较喜欢的desert,peachpuff,torte,elfload,slate

" show
set number						"显示行号"
set ruler						"显示当前光标行号和列
set nowrap    					"设置不折行"
set sidescroll=1                "默认设置set sidescroll=0之下，当光标到达屏幕边缘时，将自动扩展显示1/2屏幕的文本。通过使用set sidescroll=1设置，可以实现更加平滑的逐个字符扩展显示。
set showcmd						"在屏幕右下角显示未完成的命令
set showmode					"显示当前vim模式
set showmatch    				"显示匹配的括号"
set matchtime=1					"设置showmatch的效果时间，默认500ms，现在是100ms
set cursorline        			"突出显示当前行"
set cursorcolumn        		"突出显示当前列"


" search
set smartcase					"搜索时，如果输入大写，则严格按照大小写搜索，如果小写，并设置了ignorecase，则忽略大小写
set ignorecase        			"搜索时忽略大小写"
set incsearch					"搜索时及时匹配搜索内容，需要回车确认
set hlsearch        			"高亮搜索项"

" tab
set expandtab                   "将<tab>符号转变为<space>空格
set smarttab					"配合shiftwidth使用，如果设置该值，在行首键入<tab>会填充shiftwidth的数值,其他地方使用tabstop的数值，不设置的话，所有地方都是用shiftwidth数值

" indent
set autoindent                  "换行自动缩进
set smartindent                 "缩进采用c语言风格
set shiftround                  "在一般模式下键入>>整个缩进shiftwidth的长度，<<反向操作,== 可以与上一行对齐，插入模式下C-T和C-D也可以左右启动
set shiftwidth=4                "缩进的空格数
set tabstop=4                   "键入<tab>的步长
set softtabstop=4                " insert mode tab and backspace use 4 spaces

" set mark column color
hi! link SignColumn   LineNr
hi! link ShowMarksHLl DiffAdd
hi! link ShowMarksHLu DiffChange

" status line
" set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
set laststatus=2   " Always show the status line - use 2 lines for the status bar


" select & complete
set selection=inclusive         "选择文本事，光标所在位置也会被选中
set selectmode=mouse,key

set scrolloff=5        			"距离顶部和底部5行"
set backspace=2					"任何情况允许使用退格键删除
set mouse=a       				"启用鼠标"

" map
map <Leader>sa ggVG             " 选中全部
map <Leader>q :q<CR>            " 快速推出
map <Leader>w :w<CR>            " 快速保存
map <Leader>wq :wq<CR>          " 快速保存推出
nmap <Leader>nh :nohls<CR>      " 常规模式下单行右移
nmap <tab> V>                   " 常规模式下单行右移
nmap <s-tab> V<                 " 常规模式下单行左移
nmap <Leader>! :!
vmap <tab> >gv                  " 可视化模式下选中左移
vmap <s-tab> <gv                  " 可视化模式下选中右移
cmap <C-a> <Home>
cmap <C-e> <End>



"===============================
" Python 工作环境
"==============================
autocmd FileType python set tabstop=4 shiftwidth=4 textwidth=79 expandtab ai
autocmd FileType html set tabstop=2 shiftwidth=2 expandtab ai
autocmd BufNewFile *.py exec ":call NewPyFile()"
function! NewPyFile()
    if &filetype == 'python'
        call setline(1, "\#!/usr/bin/env python")
        call append(1, "\# -*- coding:utf-8 -*-")
        call append(2, "\# Author: wxnacy")
        call append(3, "\# Email: wxnacy@gmail.com")
        call append(4, "\# Description: ")
    endif

    normal G
    normal o
    normal o
endfunc

"===============================
" ruby 工作环境
"==============================
autocmd FileType ruby set tabstop=2 shiftwidth=2 expandtab ai
autocmd BufNewFile *.rb exec ":call NewRbFile()"
function! NewRbFile()
    if &filetype == 'ruby'
        call setline(1, "\#!/usr/bin/env ruby")
        call append(1, "\# -*- coding:utf-8 -*-")
        call append(2, "\# Author: wxnacy")
        call append(3, "\# Email: wxnacy@gmail.com")
        call append(4, "\# Description: ")
    endif

    normal G
    normal o
    normal o
endfunc

"===============================
" javascript 工作环境
"==============================
" autocmd FileType javascript set tabstop=2 shiftwidth=2 expandtab ai



colorscheme solarized

"===============================
" YouCompleterMe 配置
"===============================
"let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
"let g:ycm_error_symbol = '>>'
"let g:ycm_warning_symbol = '>*'
"l打开vim时不再询问是否加载ycm_extra_conf.py配置"
"let g:ycm_confirm_extra_conf=0
"let completeopt=longest,menu
"lpython解释器路径"
"let g:ycm_path_to_python_interpreter='/Users/wxnacy/.pyenv/shims/python'
"l是否开启语义补全"
"let g:ycm_seed_identifiers_with_syntax=1
"l是否在注释中也开启补全"
"let g:ycm_complete_in_comments=1
"let g:ycm_collect_identifiers_from_comments_and_strings = 0
"l开始补全的字符数"
"let g:ycm_min_num_of_chars_for_completion=2
"l补全后自动关机预览窗口"
"let g:ycm_autoclose_preview_window_after_completion=1
"l 禁止缓存匹配项,每次都重新生成匹配项"
"let g:ycm_cache_omnifunc=0
"l字符串中也开启补全"
"let g:ycm_complete_in_strings=1
"l离开插入模式后自动关闭预览窗口"
"lutocmd InsertLeave * if pumvisible() == 0|pclose|endif
"l回车即选中当前项"
" inoremap <expr> <CR>       pumvisible() ? '<C-y>' : '<CR>'
"上下左右键行为"
"inoremap <expr> <Down>     pumvisible() ? '\<C-n>' : '\<Down>'
"inoremap <expr> <Up>       pumvisible() ? '\<C-p>' : '\<Up>'
"inoremap <expr> <PageDown> pumvisible() ? '\<PageDown>\<C-p>\<C-n>' : '\<PageDown>'
"inoremap <expr> <PageUp>   pumvisible() ? '\<PageUp>\<C-p>\<C-n>' : '\<PageUp>'
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
nmap <F4> :YcmDiags<CR>

"===============================
" quickrun 配置
"===============================
let g:quickrun_config = {
\   "_" : {
\       "outputter" : "message",
\   },
\}
let g:quickrun_no_default_key_mappings = 1
nmap <Leader>r <Plug>(quickrun)
map <F10> :QuickRun<CR>

"===============================
" airline 配置
"===============================
if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif
let g:airline_left_sep       = '▶'
let g:airline_left_alt_sep   = '❯'
let g:airline_right_sep      = '◀'
let g:airline_right_alt_sep  = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'

" 是否打开tabline
" let g:airline#extensions#tabline#enabled = 1


"===============================
" EasyAlign 配置
"===============================
vmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }

"===============================
" NERDTree 配置
"===============================
autocmd vimenter * NERDTree     " 启动vim默认打开菜单
map tt :NERDTreeToggle<CR>       " 快速打开隐藏菜单栏
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif           " 关闭vim时，如果打开的文件除了NERDTree没有其他文件时，它自动关闭，减少多次按:q!。
let NERDTreeShowLineNumbers=1   " 是否显示菜单行号
" let NERDTreeAutoCenter=1
let NERDTreeShowHidden=1        " 是否显示隐藏文件
" let NERDTreeWinSize=31          " 设置宽度
let NERDTreeIgnore=['\.pyc','\~$','\.swp','\.class','\.git$','\.DS_Store','__pycache__','\.idea','\.cache','.python-version']  " 忽略文件显示
let NERDTreeShowBookmarks=1     " 显示书签列表
let NERDTreeHighlightCursorline = 1 " 高亮当前行
" let NERDTreeQuitOnOpen = 1      " 从菜单打开文件后关闭菜单
let NERDTreeWinPos ="left"      " 设置菜单在左侧打开，默认值

"===============================
" NERDTree-git-plugin 配置
"===============================
let g:nerdtree_tabs_open_on_console_startup=1


"===============================
" NERDTree-git-plugin 配置
"===============================
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
let g:NERDTreeShowIgnoredStatus = 1


"===============================
" gundo 配置
"===============================
nnoremap <leader>h :GundoToggle<CR>


"===============================
" whitespace 配置
"===============================
map <leader><space> :FixWhitespace<cr>


"===============================
" tagbar 配置
"===============================
nmap tb :TagbarToggle<CR>
" 启动时自动focus
let g:tagbar_autofocus = 1
let g:tagbar_width=30           " 设置宽度
" for md
let g:tagbar_type_markdown = {
    \ 'ctagstype' : 'markdown',
    \ 'kinds' : [
        \ 'h:Heading_L1',
        \ 'i:Heading_L2',
        \ 'k:Heading_L3'
    \ ]
\ }
"et g:tagbar_type_markdown = {
"   \ 'ctagstype': 'markdown',
"   \ 'ctagsbin' : '~/.vim/bundle/markdown2ctags/markdown2ctags.py',
"   \ 'ctagsargs' : '-f - --sort=yes',
"   \ 'kinds' : [
"       \ 's:sections',
"       \ 'i:images'
"   \ ],
"   \ 'sro' : '|',
"   \ 'kind2scope' : {
"       \ 's' : 'section',
"   \ },
"   \ 'sort': 0,
" }
" for ruby, delete if you do not need
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }

"===============================
" nerdcommenter 配置
"===============================
let g:NERDSpaceDelims = 1       " 注释后添加空格

"===============================
" closetag 配置
"===============================
let g:closetag_html_style=1

"===============================
" emment-vim 配置
"===============================
let g:user_emmet_leader_key='<C-Z>'     " 设置快捷键

"===============================
" syntastic 配置
"===============================
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_error_symbol='>>'
let g:syntastic_warning_symbol='>'
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_enable_highlighting=1
let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes,速度比pylint快
let g:syntastic_javascript_checkers = ['jsl', 'jshint']
let g:syntastic_html_checkers=['tidy', 'jshint']
" " 修改高亮的背景色, 适应主题
highlight SyntasticErrorSign guifg=white guibg=black

" " to see error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5
function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nmap <Leader>e :call ToggleErrors()<cr>
nnoremap <Leader>en :lnext<cr>
nnoremap <Leader>ep :lprevious<cr>

"===============================
" easymotion 配置
"===============================
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
map <Leader><leader>. <Plug>(easymotion-repeat)

"===============================
" expand-region
"===============================
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)

"===============================
" ale 配置
"===============================
" let g:ale_completion_enabled = 1
" let g:ale_fix_on_save = 1
" let g:ale_sign_column_always = 1            " 保持侧边栏可见"
" let g:ale_sign_error = '>>'                 " 改变错误和警告表示服"
" let g:ale_sign_warning = '--'
" let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']  " 改变状态栏信息格式"
" let g:ale_echo_msg_error_str = 'E'
" let g:ale_echo_msg_warning_str = 'W'
" let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" let g:ale_linters = {
              " \ 'sh' : ['shellcheck'],
              " \ 'vim' : ['vint'],
              " \ 'html' : ['tidy'],
              " \ 'python' : ['flake8'],
              " \ 'markdown' : ['mdl'],
              " \ 'javascript' : ['eslint'],
              " \}
" augroup YourGroup
    " autocmd!
    " autocmd User ALELint call YourFunction()
" augroup END

" nmap <Leader>en <Plug>(ale_next)
" nmap <Leader>ep <Plug>(ale_previous)
" nnoremap <Leader>e :ALEToggle<CR>

"===============================
" deoplete 配置
"===============================
" let g:deoplete#enable_at_startup = 1        " 启动"

"===============================
" ctrlp 配置
"===============================
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
map <leader>f :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1

"===============================
" ctrlp-funky 配置
"===============================
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1

let g:ctrlp_extensions = ['funky']

"===============================
" vim-multiple-cursors 配置
"===============================
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
" let g:multi_cursor_start_word_key='g<C-n>'
highlight multiple_cursors_cursor term=reverse cterm=reverse gui=reverse
highlight link multiple_cursors_visual Visual

"===============================
" python-mode 配置
"===============================
let g:pymode_python = 'python3'
